untyped
global function NessieDebug_Init

global function EnableDebugForEveryone
global function DebugParticle

bool nessieDebugging = false
bool isDebugEnabledforEveryone = false

array<string> nessieDebugger = ["1007270968017"]
array<string> disableMessagePlayers
array<string> dropshipDisabledPlayers
array<string> chatterDisabledPlayers

global const array<string> BARREL_SAFE_MAPS = ["mp_relic02", "mp_wargames"] // maps those had barrel.mdl auto precached

array<entity> physicsBarrels = []
const int MAX_BARREL_COUNT = 64

void function NessieDebug_Init()
{
	nessieDebugging = true
	SetShouldPlayFactionDialogue( false )
	SetBatterySpawnEnabled( false )

	if( !BARREL_SAFE_MAPS.contains( GetMapName() ) )
		PrecacheModel( $"models/containers/barrel.mdl" )
    PrecacheParticleSystem( $"env_thaw_interior_tank_pollen" )
	PrecacheParticleSystem( $"P_ar_holopulse_CP" )
	PrecacheParticleSystem( $"overhead_icon_ai_friendly" )
	PrecacheParticleSystem( $"TDP_wave" )
	PrecacheParticleSystem( $"P_holo_screespace" )

	if( nessieDebugging )
	{
		Riff_ForceTitanAvailability( eTitanAvailability.Never )
	    Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
		AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerGetsNewPilotLoadout )
		// register things for ingame script
		if( GetGameState() >= eGameState.Prematch )
		{
			foreach( entity player in GetPlayerArray() )
				OnClientConnected( player )
		}
		AddCallback_OnClientConnected( OnClientConnected )
		HoldingUp_Props_Init()
	}	
}

void function OnPlayerGetsNewPilotLoadout( entity player, PilotLoadoutDef p )
{
	foreach( entity weapon in player.GetMainWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )
	player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName() )
	player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName() )
	//player.GiveWeapon( "mp_weapon_softball", ["northstar_softball", "grenadier_low_damage"] ) //["northstar_softball", "extended_ammo", "pas_fast_reload", "reload_repeat"]
	//player.GiveWeapon( "mp_weapon_softball", ["error_softball", "extended_ammo", "pas_fast_reload", "reload_repeat"] )
	//player.GiveWeapon( "mp_weapon_semipistol", ["grenade_pistol", "extended_ammo"] ) //["gibber_pistol", "extended_ammo", "pas_fast_reload", "silencer"]
	//player.GiveWeapon( "mp_weapon_dmr", ["nessie_balance", "scope_4x"] ) //["gibber_pistol", "extended_ammo", "pas_fast_reload", "silencer"]
	//["gibber_pistol", "extended_ammo", "pas_fast_reload", "silencer"]
	//if( RandomInt( 2 ) == 1 )
	//{
		player.GiveWeapon( "mp_weapon_softball", ["northstar_softball", "grenadier_low_damage"] )
		player.GiveWeapon( "mp_weapon_softball", ["error_softball", "grenadier_low_damage"] )
		//player.GiveWeapon( "mp_weapon_sniper", ["stim_sniper", "pas_fast_reload", "pas_fast_ads", "extended_ammo"] )
		//player.GiveWeapon( "mp_weapon_sniper", ["phase_sniper", "pas_fast_reload", "pas_fast_ads", "extended_ammo"] )
	//}
	//else
	//{
	//	player.GiveWeapon( "mp_weapon_sniper", ["floating_bolt_sniper", "nessie_sniper", "pas_fast_reload", "pas_fast_ads", "extended_ammo"] )
	//	player.GiveWeapon( "mp_weapon_sniper", ["floating_bolt_sniper", "nessie_sniper", "pas_fast_reload", "pas_fast_ads", "extended_ammo"] )
	//}
	if( RandomInt( 2 ) == 1 )
		player.GiveWeapon( "mp_weapon_rocket_launcher", ["guided_missile", "at_unlimited_ammo"] )
	else
		player.GiveWeapon( "mp_weapon_arc_launcher", ["smoke_launcher", "pas_fast_reload", "at_unlimited_ammo"] )
	if( RandomInt( 2 ) == 1 )
		player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_SPECIAL, ["gravity_lift"] )
	else
		player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["wraith_portal", "amped_tacticals"] )
	player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_ANTIRODEO, ["zipline_gun", "infinite_duration_zipline", ""] )
	string setFile = player.GetPlayerSettings()
	player.SetPlayerSettingsWithMods( setFile, ["debug_zipline_recharge"] )
	int randomChance = 2
	if( GetPlayerArray().len() >= 8 )
		randomChance = 4
	if( RandomInt( randomChance ) == 1 )
		player.GiveOffhandWeapon( "mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE, ["creeping_bombardment"] )
	else
		player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_ORDNANCE, ["jump_pad", "infinite_jump_pad", "dev_mod_low_recharge"] )
	//if( !disableMessagePlayers.contains( player.GetUID() ) )
	//{
		//if( BARREL_SAFE_MAPS.contains( GetMapName() ) )
	//		SendHudMessage( player, "反泰坦武器: 遥控飞弹(保持瞄准以遥控) / 烟雾发射器\n战术技能: 滑索枪(对地图边角使用) & 重力电梯 / 传送门\n重火力: 空袭信号弹 / 跳板\n按下'近战': 丢出铁桶\n按下'使用': 捡起铁桶 / 吸附至准星处玩家\n长按'使用': 步枪兵语音\n长按'近战': 呼叫运输船\n\n长按跳跃关闭该提示", -1, 0.3, 255, 255, 0, 255, 0.15, 999, 0.15 )
		//else
			//SendHudMessage( player, "反泰坦武器: 遥控飞弹(保持瞄准以遥控)\n重火力: 空袭信号弹(概率获得)\n长按'使用': 步枪兵语音\n长按'近战': 呼叫运输船\n\n长按跳跃关闭该提示", -1, 0.3, 255, 255, 0, 255, 0.15, 999, 0.15 )
	//}
}

entity function GetPlayerAntiTitanWeapon( entity player )
{
	entity tempweapon
	foreach( entity weapon in player.GetMainWeapons() )
	{
		if( weapon.GetWeaponClassName() == "mp_weapon_defender" ||
			weapon.GetWeaponClassName() == "mp_weapon_mgl" ||
			weapon.GetWeaponClassName() == "mp_weapon_rocket_launcher" ||
			weapon.GetWeaponClassName() == "mp_weapon_arc_launcher"
		)
			tempweapon = weapon
	}
	return tempweapon
}

void function OnClientConnected( entity player )
{
	AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.3 )
	AddButtonPressedPlayerInputCallback( player, IN_USE, LungeToAnotherPlayer )
	AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, CallbackFuncCornerUs, 0.7 )
	AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, LungeToAnotherPlayer )
	AddPlayerHeldButtonEventCallback( player, IN_MELEE, CallbackFuncSpawnDropship, 1.5 )
	AddPlayerHeldButtonEventCallback( player, IN_JUMP, CallbackFuncDisableMessage, 2.0 )
	// WHY CRASH?
	//AddButtonPressedPlayerInputCallback( player, IN_MELEE, SpawnABarrel )
}

void function CallbackFuncCornerUs( entity player )
{
	if( chatterDisabledPlayers.contains( player.GetUID() ) )
		return
	EmitSoundOnEntity( player, "diag_sp_intro_WD104_24_01_mcor_grunt1" )
	thread ChatterCooldownManagement( player )
}

void function ChatterCooldownManagement( entity player )
{
	string uid = player.GetUID()
	chatterDisabledPlayers.append( uid )
	wait 2
	chatterDisabledPlayers.removebyvalue( uid )
}

void function LungeToAnotherPlayer( entity player )
{
	if( player.Lunge_IsActive() )
	{
		player.Lunge_SetTargetEntity( null, false )
		return
	}
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 10000, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
		return
	if( !traceResult.hitEnt.IsPlayer() && !traceResult.hitEnt.IsNPC() )
		return
	entity lungeTarget = traceResult.hitEnt
	player.Lunge_SetTargetEntity( lungeTarget, false )
	player.Lunge_EnableFlying()
	player.Lunge_SetSmoothTime( 3.0 )
}

void function CallbackFuncSpawnDropship( entity player )
{
	//int dropShipLimit = 10
	int dropShipLimit = 6
	//if( BARREL_SAFE_MAPS.contains( GetMapName() ) )
		//dropShipLimit = 6
	if( !IsValid( player ) || IsLobby() )
		return
	if( dropshipDisabledPlayers.contains( player.GetUID() ) )
	{
		Chat_ServerPrivateMessage( player, "你已有一架运输船在场", false )
		return
	}
	if( GetEntArrayByScriptName( "drivable_dropship" ).len() > dropShipLimit )
	{
		Chat_ServerPrivateMessage( player, "目前有过多运输船", false )
		return
	}
	if ( IsValid( player.GetParent() ) )
    {
		Chat_ServerPrivateMessage( player, "运输船不可用, 是否已在其他运输船？", false )
		return
	}
	if( !IsAlive( player ) )
	{
		Chat_ServerPrivateMessage( player, "运输船不可用, 需要处于存活状态", false )
		return
	}
	vector origin = player.GetOrigin()
	origin.z = 4000
	DropShiptruct dropship = SpawnDrivableDropShip( origin, CONVOYDIR, player.GetTeam() )
	
	EmitSoundAtPosition( TEAM_UNASSIGNED, origin, "dropship_warpin" )

	entity fx = PlayFX( TURBO_WARP_FX, origin, player.GetAngles() + <0,90,0> )
	fx.FXEnableRenderAlways()
	fx.DisableHibernation()

	dropship.dropship.model.Signal( "OnPlayerUse", {player = player} )
	thread DropShipLimitThink( player, dropship )
}

void function SpawnABarrel( entity player )
{
	//if( !BARREL_SAFE_MAPS.contains( GetMapName() ) )
	//	return
	entity barrel = CreateEntity( "prop_physics" )
	barrel.SetValueForModelKey( $"models/containers/barrel.mdl" )
	barrel.kv.spawnflags = "1"
	barrel.kv.skin = "0"
	barrel.kv.shadowcastdist = "0"
	barrel.kv.rendermode = "0"
	barrel.kv.renderfx = "0"
	barrel.kv.rendercolor = "255 255 255"
	barrel.kv.renderamt = "255"
	barrel.kv.pressuredelay = "0"
	barrel.kv.physdamagescale = "0.1"
	barrel.kv.PerformanceMode = "0"
	barrel.kv.nodamageforces = "0"
	barrel.kv.minhealthdmg = "0"
	barrel.kv.mingpulevel = "0"
	barrel.kv.mincpulevel = "0"
	barrel.kv.maxgpulevel = "0"
	barrel.kv.maxcpulevel = "0"
	barrel.kv.massScale = "0"
	barrel.kv.inertiaScale = "1.0"
	barrel.kv.fadedist = "-1"
	barrel.kv.ExplodeRadius = "0"
	barrel.kv.ExplodeDamage = "0"
	barrel.kv.drawinfastreflection = "0"
	barrel.kv.disableX360 = "0"
	barrel.kv.disableshadows = "0"
	barrel.kv.disablereceiveshadows = "0"
	barrel.kv.Damagetype = "0"
	barrel.kv.damagetoenablemotion = "0"
	barrel.kv.allowfunnel = "1"
	barrel.kv.scale = "1"
	barrel.kv.angles = "0 -26.065 0"
	barrel.kv.origin = "3180 -4114 55.9981"
	barrel.kv.targetname = "func_static_1"
	barrel.kv.physicsmode = "1"
	barrel.kv.forcetoenablemotion = "0"
	barrel.kv.classname = "prop_physics"
	DispatchSpawn( barrel )
	physicsBarrels.append( barrel )
	PhysicsBarrelLimitThink()
	barrel.SetOrigin( player.EyePosition() )
    barrel.SetAngles( < 0, player.EyeAngles().y, 0 > )
    barrel.SetVelocity( player.GetViewVector() * 1000 )
}

void function PhysicsBarrelLimitThink()
{
	if( physicsBarrels.len() >= MAX_BARREL_COUNT )
	{
		if( IsValid( physicsBarrels[0] ) )
		{
			physicsBarrels[0].Destroy()
			physicsBarrels.remove(0)
		}
	}
}

void function DropShipLimitThink( entity owner, DropShiptruct dropship )
{
	string uid = owner.GetUID()
	dropshipDisabledPlayers.append( uid )
	dropship.dropship.model.EndSignal( "OnDestroy" )
	// just don't do anything to the dropship... pretty weird it always crash even if I don't do anything!
	owner.EndSignal( "OnDeath" )
	owner.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( uid, dropship )
		{
			dropshipDisabledPlayers.removebyvalue( uid )
			if( IsValid( dropship.dropship.model ) )
			{
				//dropship.dropship.model.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
				dropship.dropship.model.SetHealth( 1 )
			}
		}
	)

	WaitForever()
}

void function CallbackFuncDisableMessage( entity player )
{
	if( !disableMessagePlayers.contains( player.GetUID() ) )
	{
		disableMessagePlayers.append( player.GetUID() )
		SendHudMessage( player, "", -1, 0.3, 255, 255, 0, 255, 0.15, 0.5, 0.15 )
	}
}

void function EnableDebugForEveryone()
{
	isDebugEnabledforEveryone = true
}

void function ShowEntityStats( entity player )
{
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 1000, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		Chat_ServerPrivateMessage( player, "hitEnt Invalid", false )
		return
	}
	Chat_ServerPrivateMessage( player, "hitEnt is " + traceResult.hitEnt.GetClassName(), false )
	asset modelName = traceResult.hitEnt.GetModelName()
	string tempString = string( modelName )
    string modelString = tempString.slice( 2, tempString.len() - 1 )
	if( modelName != $"" )
		Chat_ServerPrivateMessage( player, "hitEnt's modelname is " + modelString, false )
}

entity function CreateEnvBeam( entity owner, entity startEnt, entity endEnt )
{
	entity env_laser = CreateEntity( "env_laser" )
	env_laser.kv.LaserTarget = endEnt.GetTargetName()
	env_laser.kv.rendercolor = "150 100 15"
	env_laser.kv.rendercolorFriendly = "15 100 150"
	env_laser.kv.renderamt = 255
	env_laser.kv.width = 2
	env_laser.SetValueForTextureKey( $"sprites/laserbeam.spr" )
	env_laser.kv.TextureScroll = 35
	env_laser.kv.damage = "0"
	env_laser.kv.dissolvetype = -1//-1 to 2 - none, energy, heavy elec, light elec
	env_laser.kv.spawnflags = 1// 32 end sparks
	env_laser.SetOrigin( startEnt.GetOrigin() )
	env_laser.SetAngles( startEnt.GetAngles() )
	env_laser.SetParent( startEnt )
	env_laser.s.parents <- [startEnt, endEnt]

	SetTeam( env_laser, owner.GetTeam() )

	DispatchSpawn( env_laser )

	return env_laser
}

void function DebugParticle( entity player )
{
    vector origin = GetPlayerCrosshairOrigin( player )

    array<entity> fx = []
	array<entity> cp = []

    entity cpRadius = CreateEntity( "info_placement_helper" )
	SetTargetName( cpRadius, UniqueString( "cloakBeacon_cpRadius" ) )
	cpRadius.SetOrigin( Vector(500,0,0) )
	DispatchSpawn( cpRadius )
	cp.append( cpRadius )
	
	// friendly fx
	entity cpColorF = CreateEntity( "info_placement_helper" )
	SetTargetName( cpColorF, UniqueString( "cloakBeacon_cpColorF" ) )
	cpColorF.SetOrigin( ENEMY_COLOR_FX )
	DispatchSpawn( cpColorF )
	cp.append( cpColorF )

    /*
	entity fxIdF1 = PlayFXWithControlPoint( DEPLOYABLE_CLOAKFIELD_FX_ALL, tower.GetOrigin() + Vector(0,0,3), cpColorF )
	SetTeam( fxIdF1, tower.GetTeam() )
	fxIdF1.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	fx.append( fxIdF1 )
	entity fxIdF2 = PlayFXWithControlPoint( DEPLOYABLE_CLOAKFIELD_FX_ALL2, tower.GetOrigin() + Vector(0,0,3), cpColorF )
	SetTeam( fxIdF2, tower.GetTeam() )
	fxIdF2.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	fx.append( fxIdF2 )
    */

	int particleIndex = GetParticleSystemIndex( $"P_ar_holopulse_CP" )
	int attachmentIndex = player.LookupAttachment( "CHESTFOCUS" )
	StartParticleEffectOnEntity( player, particleIndex, FX_PATTACH_POINT_FOLLOW, attachmentIndex )
	entity fxIdF3 = CreateEntity( "info_particle_system" )
	fxIdF3.kv.start_active = 1
	fxIdF3.SetValueForEffectNameKey( $"P_ar_holopulse_CP" )
	SetTeam( fxIdF3, player.GetTeam() )
	fxIdF3.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	SetTargetName( fxIdF3, UniqueString() )
	fxIdF3.kv.cpoint1 = cpColorF.GetTargetName()
	fxIdF3.kv.cpoint5 = cpRadius.GetTargetName()
	fxIdF3.SetOrigin( origin + Vector(0,0,50) )
	fx.append( fxIdF3 )

    DispatchSpawn( fxIdF3 )
}