untyped
global function MpWeaponFlameWallGrenade_Init

global function OnWeaponTossReleaseAnimEvent_weapon_flamewall_grenade
global function OnProjectileCollision_weapon_flamewall_grenade

const float THERMITE_DOT_DURATION = 3
const float THERMITE_DOT_DAMAGE = 1
const float THERMITE_DOT_TICK = 0.5

#if SERVER
	const bool DEBUG_THERMITE_GRENADE_TRACES = false
	const bool DEBUG_BURN_DAMAGE = false
#endif // SERVER

struct SegmentData
{
	//int index
	vector startPos
	vector endPos
	vector angles
	string sound
	entity moveParent
}

const asset FLAME_WALL_FX = $"P_wpn_meteor_wall"

const string FLAME_WALL_PROJECTILE_SFX = "flamewall_flame_start"
const string FLAME_WALL_GROUND_SFX = "Explo_ThermiteGrenade_Impact_3P"
const string FLAME_WALL_GROUND_BEGINNING_SFX = "flamewall_flame_burn_front"
const string FLAME_WALL_GROUND_MIDDLE_SFX = "flamewall_flame_burn_middle"
const string FLAME_WALL_GROUND_END_SFX = "flamewall_flame_burn_end"

struct ThermiteSaveAngles
{
	entity projectile
	vector savedAngles
}

array<ThermiteSaveAngles> thermiteAngles = []

void function MpWeaponFlameWallGrenade_Init()
{
	#if SERVER
	//no need for now
	//AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_flame_wall, FlameWallGrenade_DamagedTarget )
	#endif
}

var function OnWeaponTossReleaseAnimEvent_weapon_flamewall_grenade( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	var grenade = Grenade_OnWeaponTossReleaseAnimEvent( weapon, attackParams )
	/*
	entity projectile = expect entity( grenade )
	if( !projectile.IsProjectile() )
		return 0
	entity weaponOwner = projectile.GetOwner()
	#if SERVER
	if ( IsValid( projectile ) )
		projectile.proj.savedDir = weaponOwner.GetViewForward()
	#endif
	*/

	//Replaced by entitystructs.gnut
	entity projectile = expect entity( grenade )
	if( !projectile.IsProjectile() )
		return 0
	entity owner = projectile.GetOwner()
	vector angles = owner.GetViewForward()
	ThermiteSaveAngles thermiteStruct
	thermiteStruct.projectile = projectile
	thermiteStruct.savedAngles = angles
	thermiteAngles.append( thermiteStruct )

	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
}

void function OnProjectileCollision_weapon_flamewall_grenade( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	/*
	entity player = projectile.GetOwner()
	if ( hitEnt == player )
		return

#if SERVER
	projectile.proj.projectileBounceCount++
	//printt( "bounceCount:", projectile.proj.projectileBounceCount )

	int maxBounceCount = projectile.GetProjectileWeaponSettingInt( eWeaponVar.projectile_ricochet_max_count )

	bool forceExplode = false
	if ( projectile.proj.projectileBounceCount > maxBounceCount )
	{
		//printt( "max bounceCount hit, forcing explosion" )
		forceExplode = true
	}

	bool projectileIsOnGround = normal.Dot( <0,0,1> ) > 0.75
	if ( !projectileIsOnGround && !forceExplode )
		return

	//if ( !forceExplode )
	//	printt( "projectileIsOnGround with Dot:", normal.Dot( <0,0,1> ) )

	table collisionParams =
	{
		pos = pos,
		normal = normal,
		hitEnt = hitEnt,
		hitbox = hitbox
	}

	/*
	ThermiteSaveAngles thermiteStruct

	foreach( ThermiteSaveAngles tempStruct in thermiteAngles )
	{
		if( tempStruct.projectile == projectile )
		{
			thermiteStruct = tempStruct
			thermiteAngles.fastremovebyvalue( tempStruct )
		}
	}
	vector dir = thermiteStruct.savedAngles

	table collisionParams =
	{
		pos = pos,
		normal = normal,
		hitEnt = hitEnt,
		hitbox = hitbox
	}

	vector dir = projectile.proj.savedDir
	dir.z = 0
	dir = Normalize( dir )

	if ( !PlantStickyEntity( projectile, collisionParams ) && !forceExplode )
		return

	projectile.SetDoesExplode( false )
	projectile.proj.onlyAllowSmartPistolDamage = false

	if ( !IsValid( player ) )
	{
		projectile.Destroy()
		return
	}
	bool shouldFlipDir = true
	array<string> mods = projectile.ProjectileGetMods()
	foreach ( mod in mods )
	{
		if ( mod == "vertical_firestar" )
			shouldFlipDir = false
	}

	if ( shouldFlipDir )
		dir = CrossProduct( dir, normal )

	BurnDamageSettings burnSettings
	burnSettings.damageSourceID 		= projectile.ProjectileGetDamageSourceID()
	burnSettings.preburnDuration 		= 0.0//0.5
	burnSettings.burnDuration 			= 8.0
	burnSettings.burnDamage 			= 25
	burnSettings.burnTime 				= 2.8
	burnSettings.burnTickRate 			= 1.2
	burnSettings.burnDamageRadius 		= 50.0
	burnSettings.burnDamageHeight 		= 48.0
	burnSettings.soundBurnSegmentStart 	= FLAME_WALL_PROJECTILE_SFX //FLAME_WALL_GROUND_BEGINNING_SFX
	burnSettings.soundBurnSegmentMiddle = FLAME_WALL_GROUND_MIDDLE_SFX
	burnSettings.soundBurnSegmentEnd 	= FLAME_WALL_GROUND_END_SFX
	burnSettings.soundBurnDamageTick_1P = "flesh_thermiteburn_1p_vs_3p"
	burnSettings.burnStackDebounce 		= 0.7
	burnSettings.burnStacksMax 			= 4
	burnSettings.segmentSpacingDist 	= 80.0

	int numSegments = 4

	entity owner = projectile.GetOwner()
	entity inflictor = CreateOncePerTickDamageInflictorHelper( burnSettings.burnDuration )

	if ( shouldFlipDir )
	{
		thread BeginFire( owner, inflictor, projectile.GetOrigin(), dir, numSegments, false, burnSettings )
		thread BeginFire( owner, inflictor, projectile.GetOrigin(), -1 * dir, numSegments, true, burnSettings )
	}
	else
	{
		thread BeginFire( owner, inflictor, projectile.GetOrigin(), dir, numSegments * 2, false, burnSettings )
	}

	projectile.GrenadeExplode( normal )
#endif // SERVER
	*/

	table collisionParams =
	{
		pos = pos,
		normal = normal,
		hitEnt = hitEnt,
		hitbox = hitbox
	}

	#if SERVER
	projectile.proj.projectileBounceCount++
	int maxBounceCount = projectile.GetProjectileWeaponSettingInt( eWeaponVar.projectile_ricochet_max_count )

	bool forceExplode = false
	if ( projectile.proj.projectileBounceCount > maxBounceCount )
	{
		forceExplode = true
	}
	bool projectileIsOnGround = normal.Dot( <0,0,1> ) > 0.75
	if ( projectile.GrenadeHasIgnited() )
		return
	if( projectileIsOnGround || forceExplode )
		bool result = PlantStickyEntity( projectile, collisionParams )
		thread ThermiteGrenadeExplode( projectile )
	#endif
}

#if SERVER
void function FlameWallGrenade_DamagedTarget( entity ent, var damageInfo )
{
	if ( !IsValid( ent ) )
		return

	entity inflictor = DamageInfo_GetInflictor( damageInfo )

	if( !IsValid( inflictor ) )
		return
	if( !inflictor.IsProjectile() )
		return

	array<string> mods = inflictor.ProjectileGetMods()

	if( mods.contains( "flamewall_grenade" ) )
	{
		entity attacker = DamageInfo_GetAttacker( damageInfo )
		DamageInfo_SetDamage( damageInfo, 1 )
		if( !IsValid( attacker ) )
			return
		thread ThermiteStatusEffect_DoT( ent, attacker )
	}
}

void function ThermiteStatusEffect_DoT( entity victim, entity attacker )
{
	if( !IsValid( victim ) || !IsValid( attacker ) )
		return

	StatusEffect_AddTimed( victim, eStatusEffect.thermite, 1.0, THERMITE_DOT_DURATION, 0.5 )

	float length = 0
	while( true )
	{
		if( IsAlive( victim ) && IsValid( attacker ) )
		{
			Thermite_DamagePlayerOrNPCSounds( victim )
			victim.TakeDamage( THERMITE_DOT_DAMAGE, attacker, attacker, { scriptType = DF_RAGDOLL | DF_EXPLOSION | DF_STOPS_TITAN_REGEN , damageSourceId = eDamageSourceId.burn } )
		}
		wait THERMITE_DOT_TICK
		length += THERMITE_DOT_TICK
		if( length >= THERMITE_DOT_DURATION )
			return
	}
}
#endif

#if SERVER
// Apex Thermite
void function BeginFire( entity owner, entity inflictor, vector pos, vector dir, int numSegments, bool skipFirstStep, BurnDamageSettings burnSettings )
{
	owner.EndSignal( "OnDestroy" )

	array<SegmentData> segmentsArray = CreateSpreadPattern( owner, inflictor, pos, dir, numSegments, burnSettings )
	// don't try to use an empty array
	if ( !segmentsArray.len() )
		return

	if ( skipFirstStep )
		segmentsArray.remove( 0 )
	waitthread BurnSequence( owner, inflictor, segmentsArray, burnSettings )
}

void function BurnSequence( entity owner, entity inflictor, array<SegmentData> segmentsArray, BurnDamageSettings burnSettings )
{
	owner.EndSignal( "OnDestroy" )

	foreach ( segment in segmentsArray )
	{
		thread DoSegment( owner, inflictor, segment, burnSettings )
		WaitFrame()
	}
}

void function DoSegment( entity owner, entity inflictor, SegmentData segment, BurnDamageSettings burnSettings )
{
	owner.EndSignal( "OnDestroy" )

	//entity preburnEffect = CreateSegmentEffect( PREBURN_EFFECT_ASSET, owner, segment.startPos, segment.endPos, segment.angles, burnSettings.preburnDuration )

	wait burnSettings.preburnDuration

	entity burnEffect = CreateSegmentEffect( FLAME_WALL_FX, owner, segment.startPos, segment.endPos, segment.angles, burnSettings.burnDuration )
	AI_CreateDangerousArea_Static( burnEffect, inflictor, burnSettings.burnDamageRadius, TEAM_INVALID, true, true, segment.endPos )
	thread FireSegment_DamageThink( burnEffect, owner, inflictor, burnSettings )

	if ( segment.sound != "" )
		EmitSoundOnEntity( burnEffect, segment.sound )
}

array<SegmentData> function CreateSpreadPattern( entity owner, entity inflictor, vector pos, vector dir, int stepCount, BurnDamageSettings burnSettings )
{
	owner.EndSignal( "OnDestroy" )

	int count = 0
	vector lastDownPos = pos
	bool firstTrace = true
	array<SegmentData> segmentsArray

	dir.z = 0
	dir = Normalize( dir )
	vector angles = VectorToAngles( dir )

	bool staggerDirState = CoinFlip()
	float staggerDegrees = 0.0
	vector staggerOffsetVec
	vector staggerDir

	for ( int i = 0; i < stepCount; i++ )
	{
		if ( staggerDirState )
			staggerOffsetVec = <0,staggerDegrees,0>
		else
			staggerOffsetVec = <0,-staggerDegrees,0>

		if ( i == 1 ) // half offset for 2nd placement
			staggerOffsetVec *= 0.5

		staggerDir = Normalize( VectorRotate( dir, staggerOffsetVec ) )
		staggerDirState = !staggerDirState

		vector newPos = pos
		if ( !firstTrace )
			newPos += staggerDir * burnSettings.segmentSpacingDist

		vector traceStart = pos
		vector traceEndUnder = newPos
		vector traceEndOver = newPos

		if ( !firstTrace )
		{
			traceStart = lastDownPos + <0,0,80>
			traceEndUnder = <newPos.x, newPos.y, traceStart.z - 40>
			traceEndOver = <newPos.x, newPos.y, traceStart.z + burnSettings.segmentSpacingDist * 0.57735056839> // The over height is to cover the case of a sheer surface that then continues gradually upwards (like mp_box)
		}
		firstTrace = false

		#if  DEBUG_THERMITE_GRENADE_TRACES
			//DebugDrawLine( traceStart, traceEndUnder, 0, 255, 0, true, 25.0 )
		#endif

		array ignoreArray = []
		if ( IsValid( inflictor ) && inflictor.GetOwner() != null )
			ignoreArray.append( inflictor.GetOwner() )

		TraceResults forwardTrace = TraceLine( traceStart, traceEndUnder, ignoreArray, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )
		if ( forwardTrace.fraction == 1.0 )
		{
			#if DEBUG_THERMITE_GRENADE_TRACES
				DebugDrawLine( forwardTrace.endPos, forwardTrace.endPos + <0,0,-225>, 255, 0, 0, true, 25.0 )
			#endif

			TraceResults downTrace = TraceLine( forwardTrace.endPos, forwardTrace.endPos + <0,0,-225>, ignoreArray, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )
			if ( downTrace.fraction == 1.0 )
				continue

			SegmentData segment
			//segment.index = i
			segment.startPos = lastDownPos
			segment.endPos = downTrace.endPos
			segment.angles = angles
			segment.sound = GetSoundForSegment( i, stepCount, burnSettings )
			//printt( "i:", i, "stepCount:", stepCount, "segment.sound:", segment.sound )
			segmentsArray.append( segment )

			lastDownPos = downTrace.endPos
			pos = forwardTrace.endPos

			continue
		}

		TraceResults upwardTrace = TraceLine( traceStart, traceEndOver, ignoreArray, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )

		#if DEBUG_THERMITE_GRENADE_TRACES
			DebugDrawLine( traceStart, traceEndOver, 0, 0, 255, true, 25.0 )
		#endif

		if ( upwardTrace.fraction < 1.0 && IsValid( upwardTrace.hitEnt ) && upwardTrace.hitEnt.IsWorld() )
		{
			continue
		}
		else
		{
			TraceResults downTrace = TraceLine( upwardTrace.endPos, upwardTrace.endPos + <0,0,-1000>, ignoreArray, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )
			if ( downTrace.fraction == 1.0 )
				continue

			SegmentData segment
			//segment.index = i
			segment.startPos = lastDownPos
			segment.endPos = downTrace.endPos
			segment.angles = angles
			segment.sound = GetSoundForSegment( i, stepCount, burnSettings )
			//printt( "i:", i, "stepCount:", stepCount, "segment.sound:", segment.sound )
			segmentsArray.append( segment )

			lastDownPos = downTrace.endPos
			pos = forwardTrace.endPos
		}
	}

	#if DEBUG_THERMITE_GRENADE_TRACES
		printt( "Total segments:", segmentsArray.len() )
	#endif

	return segmentsArray
}

entity function CreateSegmentEffect( asset effectAsset, entity owner, vector startPos, vector endPos, vector angles, float duration )
{
	Assert( IsValid( owner ) )

	entity effect = StartParticleEffectInWorld_ReturnEntity( GetParticleSystemIndex( effectAsset ), endPos, angles )
	effect.SetOwner( owner )
	AddToUltimateRealm( owner, effect )

	EffectSetControlPointVector( effect, 1, startPos )

	if ( duration > 0 )
		EntFireByHandle( effect, "Kill", "", duration, null, null )

	return effect
}

void function FireSegment_DamageThink( entity effect, entity owner, entity inflictor, BurnDamageSettings burnSettings )
{
	Assert( IsValid( owner ) )

	float topDelta = burnSettings.burnDamageHeight
	float bottomDelta = 0
	entity trig = CreateTriggerRadiusMultiple( effect.GetOrigin(), burnSettings.burnDamageRadius, [], TRIG_FLAG_NONE, topDelta, bottomDelta )
	//trig.RemoveFromAllRealms()
	//trig.AddToOtherEntitysRealms( owner )
	ScriptTriggerSetEnabled( trig, true )

	effect.EndSignal( "OnDestroy" )
	trig.EndSignal( "OnDestroy" )
	inflictor.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( effect, trig )
		{
			EffectStop( effect )

			if ( IsValid( trig ) )
				trig.Destroy()
		}
	)

	while ( 1 )
	{
		array<entity> touchingEnts = GetAllEntitiesInTrigger( trig )
		ArrayRemoveDead( touchingEnts )

		foreach ( ent in touchingEnts )
			TryApplyingBurnDamage( ent, owner, inflictor, burnSettings )

		WaitFrame()
	}
}

void function TryApplyingBurnDamage( entity ent, entity owner, entity inflictor, BurnDamageSettings burnSettings )
{
	if ( EntityCanAcceptNewBurnDamageStack( ent, burnSettings ) )
	{
		AddEntityBurnDamageStack( ent, owner, inflictor, burnSettings )
	}
	else if ( ent.IsPlayerDecoy() )
	{
		// just apply all the damage at once since it should only tick once on a decoy
		ApplyBurnDamageTick( ent, burnSettings.burnDamage, owner, inflictor, burnSettings.damageSourceID )
	}
}

bool function EntityCanAcceptNewBurnDamageStack( entity ent, BurnDamageSettings burnSettings )
{
	if ( !EntityCanBurnOverTime( ent ) )
		return false

	if ( EntityHasMaxBurnDamageStacks( ent, burnSettings ) )
		return false

	// don't add another stack before it's time
	foreach ( stack in GetEntityBurnDamageStacks( ent ) )
		if ( (Time() - stack.startTime) < burnSettings.burnStackDebounce )
			return false

	return true
}

void function AddEntityBurnDamageStack( entity ent, entity owner, entity inflictor, BurnDamageSettings burnSettings )
{
	//Assert( IsDoor(ent) || ent.IsPlayer() || ent.IsNPC() , "Burn damage currently only supports players, NPCs and doors." )
	Assert( ent.IsPlayer() || ent.IsNPC() , "Burn damage currently only supports players, and NPCs" )

	BurnDamageStack stack
	stack.owner = owner
	stack.inflictor = inflictor
	stack.startTime = Time()
	stack.endTime = stack.startTime + burnSettings.burnTime
	stack.tickInterval = burnSettings.burnTickRate / burnSettings.burnTime
	int numIntervals = int( burnSettings.burnTime / stack.tickInterval )
	stack.damagePerTick = burnSettings.burnDamage / numIntervals
	stack.burnSettings = burnSettings

	//if ( IsDoor(ent) )
		//ent.e.burnDamageStacks.append( stack )
	if ( ent.IsPlayer() )
		ent.p.burnDamageStacks.append( stack )
	else if ( ent.IsNPC() )
		ent.ai.burnDamageStacks.append( stack )

	#if DEBUG_BURN_DAMAGE
		printt( "tickInterval:", stack.tickInterval )
		printt( "numIntervals:", numIntervals )
		printt( "damagePerTick:", stack.damagePerTick )
		printt( "burn stack added, total:", GetEntityBurnDamageStackCount( ent ) )
	#endif

	if ( !EntityIsBurning( ent ) )
		thread EntityBurnDamageThread( ent )
}

void function RemoveEntityBurnDamageStack( entity ent, int stackIdx )
{
	//if ( IsDoor(ent) )
		//ent.e.burnDamageStacks.remove( stackIdx )
	if ( ent.IsPlayer() )
		ent.p.burnDamageStacks.remove( stackIdx )
	else if ( ent.IsNPC() )
		ent.ai.burnDamageStacks.remove( stackIdx )

	#if DEBUG_BURN_DAMAGE
		printt( "burn stack removed, num stacks is now:", GetEntityBurnDamageStackCount( ent ) )
	#endif
}

void function EntityBurnDamageThread( entity ent )
{
	ent.EndSignal( "OnDeath" )

	SetEntityIsBurning( ent, true )

	OnThreadEnd(
		function () : ( ent )
		{
			#if DEBUG_BURN_DAMAGE
				printt( "EntityBurnDamageThread ended" )
			#endif

			if ( IsValid( ent ) )
				SetEntityIsBurning( ent, false )
		}
	)

	while ( GetEntityBurnDamageStackCount( ent ) > 0 )
	{
		array<int> removeIndices

		foreach ( idx, BurnDamageStack stack in GetEntityBurnDamageStacks( ent ) )
		{
			int dmgThisTick = 0

			if ( Time() >= stack.endTime )
			{
				// add to remove list
				removeIndices.append( idx )

				// process any remaining damage
				int remainderDmg = stack.burnSettings.burnDamage - stack.damageDealt
				if ( remainderDmg > 0 )
				{
					dmgThisTick += remainderDmg
					stack.damageDealt += remainderDmg

					#if DEBUG_BURN_DAMAGE
						printt( "applying", remainderDmg, "burn damage remainder, total damage dealt:", stack.damageDealt )
					#endif
				}
			}
			else if ( (Time() - stack.lastDamageTime) >= stack.tickInterval )
			{
				dmgThisTick += stack.damagePerTick
				stack.damageDealt += stack.damagePerTick
				stack.lastDamageTime = Time()

				#if DEBUG_BURN_DAMAGE
					printt( "applying", stack.damagePerTick, "burn damage, total damage dealt:", stack.damageDealt )
				#endif
			}

			if ( dmgThisTick > 0 )
			{
				if ( ent.IsPlayer() )
				{
					EmitSoundOnEntityOnlyToPlayer( ent, ent, stack.burnSettings.soundBurnDamageTick_1P )
				}

				ApplyBurnDamageTick( ent, dmgThisTick, stack.owner, stack.inflictor, stack.burnSettings.damageSourceID )

				// TickDamageInflictorHelper ent only allows one damage event per frame
				if ( GetBugReproNum() != 42069 )
					break
			}
		}

		// process remove list
		foreach ( idxToRemove in removeIndices )
			RemoveEntityBurnDamageStack( ent, idxToRemove )

		WaitFrame()
	}
}

bool function EntityCanBurnOverTime( entity ent )
{
	if ( !IsAlive( ent ) )
		return false

	//if ( IsDoor(ent) )
		//return true

	if ( ent.IsPlayer() && !ent.IsPlayerDecoy() )
		return true
	else if ( ent.IsNPC() )
		return true

	return false
}

void function ApplyBurnDamageTick( entity ent, int damage, entity owner, entity inflictor, int damageSourceID )
{
	ent.TakeDamage( damage, owner, inflictor, { damageSourceId = damageSourceID } )
}

bool function EntityHasMaxBurnDamageStacks( entity ent, BurnDamageSettings burnSettings )
{
	return GetEntityBurnDamageStackCount( ent ) >= burnSettings.burnStacksMax
}

array<BurnDamageStack> function GetEntityBurnDamageStacks( entity ent )
{
	//if ( IsDoor(ent) )
		//return ent.e.burnDamageStacks
	if ( ent.IsPlayer() )
		return ent.p.burnDamageStacks

	return ent.ai.burnDamageStacks
}

int function GetEntityBurnDamageStackCount( entity ent )
{
	if ( !IsAlive(ent) )
		return 0

	//if ( IsDoor(ent) )
		//return ent.e.burnDamageStacks.len()
	if ( ent.IsPlayer() )
		return ent.p.burnDamageStacks.len()

	return ent.ai.burnDamageStacks.len()
}

bool function EntityIsBurning( entity ent )
{
	//if ( IsDoor(ent) )
		//return ent.e.isBurning
	if ( ent.IsPlayer() )
		return ent.p.isBurning

	return ent.ai.isBurning
}

void function SetEntityIsBurning( entity ent, bool isBurning )
{
	//if ( IsDoor(ent) )
		//ent.e.isBurning = isBurning
	if ( ent.IsPlayer() )
		ent.p.isBurning = isBurning
	else 
		ent.ai.isBurning = isBurning
}

string function GetSoundForSegment( int index, int max, BurnDamageSettings burnSettings )
{
	string weaponSettingKey = ""
	string soundAlias = ""

	if ( index == 0 )
		soundAlias = burnSettings.soundBurnSegmentStart
	else if ( index == ( max - 1 ) )
		soundAlias = burnSettings.soundBurnSegmentEnd
	else if ( index == max / 2 )
		soundAlias = burnSettings.soundBurnSegmentMiddle

	return soundAlias
}

void function AddToUltimateRealm( entity player, entity offhandWeapon )
{
	//stub
}
#endif

/* //No Use
void function ThermiteGrenadeExplode( entity projectile )
{
	entity owner = projectile.GetOwner()
	if( !IsValid( owner ) )
		return
	CreatePhysicsThermiteTrail( projectile.GetOrigin(), owner, projectile, projectile, <0,0,0>, FLAME_WALL_THERMITE_DURATION, FLAME_WALL_FX, eDamageSourceId.mp_titanweapon_flame_wall )
}
*/
#if SERVER
void function ThermiteGrenadeExplode( entity projectile )
{
	entity owner = projectile.GetOwner()

	if( !IsValid( owner ) )
		return

	ThermiteSaveAngles thermiteStruct

	foreach( ThermiteSaveAngles tempStruct in thermiteAngles )
	{
		if( tempStruct.projectile == projectile )
		{
			thermiteStruct = tempStruct
			thermiteAngles.fastremovebyvalue( tempStruct )
		}
	}
	vector dir = thermiteStruct.savedAngles
	dir.z = 0
	dir = Normalize( dir )

	vector ang = VectorToAngles(dir)

	projectile.EndSignal( "OnDestroy" )
	projectile.SetAbsOrigin( projectile.GetOrigin() )
	projectile.SetAbsAngles( projectile.GetAngles() )
	projectile.SetVelocity( Vector( 0, 0, 0 ) )
	projectile.StopPhysics()
	projectile.SetTakeDamageType( DAMAGE_NO )
	projectile.Hide()
	projectile.NotSolid()
	projectile.proj.savedOrigin = < -999999.0, -999999.0, -999999.0 >

	EmitSoundOnEntity( projectile, FLAME_WALL_PROJECTILE_SFX )
	waitthread WeaponAttackWave( projectile, 0, projectile, projectile.GetOrigin(), ang, CreateThermiteWallSegment )
	waitthread WeaponAttackWave( projectile, 0, projectile, projectile.GetOrigin(), -ang, CreateThermiteWallSegment )
	projectile.Destroy()
}
#endif