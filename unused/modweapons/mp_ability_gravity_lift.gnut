// this is a file from mp_weapon_grenade_gravity.nut, for saving my thoughts

global function MpAbilityGravityLift_Init
global function OnWeaponTossReleaseAnimEvent_ability_gravity_lift
global function OnProjectileCollision_ability_gravity_lift

// Gravity Lift
const float LIFT_THROW_POWER_SCALE = 0.3
//const int LIFT_SEGMENT_COUNT = 10
//const float LIFT_HEIGHT_PER_SEGMENT = 50
const float LIFT_HEIGHT = 1200
const float LIFT_RADIUS = 120
const float LIFT_RISE_SPEED = 325
const float LIFT_HORIZON_MOVE_SPEED = 225
const float LIFT_PULL_SPEED_HORIZON = 350
//const float LIFT_PULL_SPEED_MULTIPLIER = 2
const float LIFT_PULL_SPEED_VERTICAl = 340
const float LIFT_TOP_TIME_LIMIT = 2
const float LIFT_LIFETIME = 10
const float LIFT_COOLDOWN = 0.0 // 0.5 // time between second lift, I guess it's no need for titanfall?

/* // now using a new check!
//array<entity> hasGravityLifted = []
struct GravLiftStruct
{
	entity trigger
	array<entity> gravityLiftedPlayers = []
	array<entity> reachedHighestPlayers = []
}
*/

struct
{
	/* // now using a new check!
	array<GravLiftStruct> gravityLifts = []
	array<entity> inGravLiftCooldownPlayers = []
	//array<entity> gravityLiftedPlayers = []
	//array<entity> reachedHighestPlayers = []
	*/

	table<entity, int> playerInGravLiftCount = {} // for handling multiple gravlifts!
} file



void function MpAbilityGravityLift_Init()
{
	#if SERVER
	RegisterSignal( "EnterGravityLift" )
	RegisterSignal( "LeaveGravityLift" )

	AddCallback_OnClientConnected( OnClientConnected )
	#endif
}


var function OnWeaponTossReleaseAnimEvent_ability_gravity_lift( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity projectile = ThrowDeployable( weapon, attackParams, LIFT_THROW_POWER_SCALE, OnGravityLiftDeployed ) // less vec?
	// fix sound!
	string fpSound = string ( GetGrenadeThrowSound_1p( weapon ) )
	string tpSound = string ( GetGrenadeThrowSound_3p( weapon ) )
	weapon.EmitWeaponSound_1p3p( fpSound, tpSound )
	if ( projectile )
	{
		#if SERVER
		thread WaitForGravLiftDeployMent( weapon, projectile )
		// manage weapon cooldown
		thread GravLiftWeaponCooldown( weapon, projectile )
		#endif
	}

	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
}

#if SERVER
void function OnClientConnected( entity player )
{
	file.playerInGravLiftCount[ player ] <- 0
}

void function WaitForGravLiftDeployMent( entity weapon, entity projectile )
{
	weapon.EndSignal( "OnDestroy" )
    projectile.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( weapon, projectile )
		{
			if ( !IsValid( weapon ) )
			{
				if ( IsValid( projectile ) )
					projectile.Destroy() // if weapon has been destroyed after deployment, destroy the projectile
			}
		}
	)

    projectile.WaitSignal( "Planted" )
}

void function GravLiftWeaponCooldown( entity weapon, entity projectile )
{
	weapon.EndSignal( "OnDestroy" )
	weapon.AddMod( "no_regen" ) // stop regen!

	// wait for projectile being destroyed
	projectile.WaitSignal( "OnDestroy" )
	weapon.RemoveMod( "no_regen" )
}
#endif

void function OnProjectileCollision_ability_gravity_lift( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	#if SERVER
		entity owner = projectile.GetOwner()
		if( !IsAlive( owner ) )
		{
			if( IsValid( projectile ) ) // don't let a useless shuriken stay on ground
			{
				projectile.Destroy()
				return
			}
		}
	#endif

	OnProjectileCollision_weapon_deployable( projectile, pos, normal, hitEnt, hitbox, isCritical )
}

void function OnGravityLiftDeployed( entity projectile )
{
	#if SERVER
	thread GravityLiftThink( projectile )

	// now using a new check!
	//thread GravityLiftThink( projectile )
	#endif
}

#if SERVER
void function GravityLiftThink( entity projectile )
{
	projectile.Hide() // don't show the shuriken to player
	EmitSoundOnEntity( projectile, "default_gravitystar_impact_3p" )

	entity gravLiftBeam = StartParticleEffectOnEntity_ReturnEntity( projectile, GetParticleSystemIndex( FX_HARVESTER_BEAM ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
	gravLiftBeam.DisableHibernation() // prevent it from fading out( will leave a red destroyed beam! )
	EffectSetControlPointVector( gravLiftBeam, 1, < 0,100,255 > ) // purly blue

	// maybe not a good idea to use "trigger_cylinder", for they're too sensitive about z values
	/* // setup trigger
	entity trigger = CreateEntity( "trigger_cylinder" )
	trigger.SetRadius( LIFT_RADIUS )
	trigger.SetAboveHeight( LIFT_HEIGHT + 200 ) // set a bit higher, this is not a single scriptRef anymore
	trigger.SetBelowHeight( -1 )
	trigger.SetOrigin( projectile.GetOrigin() )

	trigger.SetEnterCallback( OnGravityLiftTriggerEnter )
	trigger.SetLeaveCallback( OnGravityLiftTriggerLeave )
	DispatchSpawn( trigger )
	*/

	entity trigger = CreateTriggerRadiusMultiple( projectile.GetOrigin(), LIFT_RADIUS, [], TRIG_FLAG_START_DISABLED | TRIG_FLAG_NO_PHASE_SHIFT, LIFT_HEIGHT, -1 )
	//trigger.SetParent( projectile, "ORIGIN" )

	AddCallback_ScriptTriggerEnter( trigger, OnGravityLiftTriggerEnter )
	AddCallback_ScriptTriggerLeave( trigger, OnGravityLiftTriggerLeave )

	ScriptTriggerSetEnabled( trigger, true )

	thread GravityLiftLifeTime( projectile, trigger, gravLiftBeam )
}

void function GravityLiftLifeTime( entity projectile, entity trigger, entity gravLiftBeam )
{
	projectile.EndSignal( "OnDestroy" )
	trigger.EndSignal( "OnDestroy" )
	gravLiftBeam.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( projectile, trigger, gravLiftBeam )
		{
			// this handles IsValid() checks
			thread DestroyGravityLift( projectile, trigger, gravLiftBeam )
		}
	)

	float endTime = Time() + LIFT_LIFETIME
	float maxEndTime = Time() + ( LIFT_LIFETIME * 1.5 ) // for players staying on it, it will try it's best to keep alive
	while ( true )
	{
		array<entity> inLiftEntities = GetAllEntitiesInTrigger( trigger )
		array<entity> inLiftPlayers
		foreach ( entity ent in inLiftEntities )
		{
			if ( !IsValid( ent ) ) // this could happen!
				continue
			if ( ent.IsPlayer() )
				inLiftPlayers.append( ent )
		}

		// reached lifetime with no players inside
		if( Time() > endTime && inLiftPlayers.len() == 0 )
		{
			break
		}
		// reached lifetime with players inside, will keep lifting for another .5 times
		else if( Time() > maxEndTime )
		{
			break
		}

		WaitFrame()
	}
}

void function DestroyGravityLift( entity projectile, entity trigger, entity gravLiftBeam )
{
	if( IsValid( gravLiftBeam ) )
	{
		gravLiftBeam.kv.Visibilityflags = 0 // first hide, then destroy, or it will show a harvester destroyed fx
		wait 0.1
		if ( IsValid( gravLiftBeam ) ) // anti crash
			EffectStop( gravLiftBeam )
	}
	if( IsValid( projectile ) )
		projectile.Destroy()
	if( IsValid( trigger ) )
		trigger.Destroy()
}

void function OnGravityLiftTriggerEnter( entity trigger, entity ent )
{
	// only affects pilots, npcs, prop_physics and grenades
	if( ent.IsTitan() )
		return
	string className = ent.GetClassName()
	if ( !ent.IsNPC() && !ent.IsPlayer() && !( className == "prop_physics" ) && !( className == "grenade" ) )
		return

	bool shouldEndLift = true
	if ( ent.IsPlayer() )
	{
		if ( file.playerInGravLiftCount[ ent ] > 0 ) // not first lift
			shouldEndLift = false
	}
	if ( shouldEndLift )
		ent.Signal( "EnterGravityLift" ) // this will end other gravlifts
	if ( ent.IsPlayer() )
		file.playerInGravLiftCount[ ent ] += 1
	thread EntityInGravityLift( ent, trigger )
}

void function OnGravityLiftTriggerLeave( entity trigger, entity ent )
{
	//if( ent.IsTitan() )
	//	return

	bool shouldEndLift = true
	if ( ent.IsPlayer() )
	{
		if ( file.playerInGravLiftCount[ ent ] > 1 ) // still have other lifts left
			shouldEndLift = false
	}
	
	if ( shouldEndLift )
		ent.Signal( "LeaveGravityLift" ) // this will end other gravlifts
	if ( ent.IsPlayer() )
		file.playerInGravLiftCount[ ent ] -= 1
}

void function EntityInGravityLift( entity ent, entity trigger )
{
	trigger.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDestroy" )
	if ( ent.IsPlayer() || ent.IsNPC() ) // these entities may die
		ent.EndSignal( "OnDeath" )
	ent.EndSignal( "EnterGravityLift" )
	ent.EndSignal( "LeaveGravityLift" )

	table storedStats = {} // save ent's gravity or some other keyvalues for later restoring
	storedStats.gravity <- int ( ent.kv.gravity ) // int

	table results = {} // save some behaviors
	results.bouncedFromLift <- false // bool, to get if the entity is leaving the lift manually or being bounced away

	OnThreadEnd(
		function(): ( ent, trigger, storedStats, results )
		{
			if ( IsValid( ent ) ) // any valid ent should be restore gravity or someother keyvalues
			{
				ent.kv.gravity = storedStats.gravity
				
				// player specifics
				if ( ent.IsPlayer() ) 
				{
					ent.UnforceStand()
					ent.TouchGround() // restore one doublejump!
					StopSoundOnEntity( ent, "titan_flight_hover_3p" ) // clear existing sound
				}
			}
			if ( IsAlive( ent ) ) // only living ent will be push away
			{
				if ( ent.IsPlayer() )
				{
					if ( file.playerInGravLiftCount[ ent ] > 1 ) // still having other gravlifts!
						return // don't bounce
				}

				// consider this means the entity is force bounced away, or trigger caused them being force bounced
				if ( results.bouncedFromLift || !IsValid( trigger ) ) 
				{
					BounceEntityForward( ent )
				}
				else
				{
					BounceEntityFromLift( ent )
				}
			}
		}
	)

	float bottomHeight = trigger.GetOrigin().z
	float topHeight = bottomHeight + LIFT_HEIGHT

	bool reachedHighest = false
	float reachHighestTime // for saving reach highest part's time

	// sound for player lifting
	if ( ent.IsPlayer() )
	{
		StopSoundOnEntity( ent, "titan_flight_hover_3p" ) // clear existing sound
		EmitSoundOnEntity( ent, "titan_flight_hover_3p" )
	}

	bool firstLoop = true
	while( true ) // start lifting entity
	{
		if ( !firstLoop )
			firstLoop = false
		else
			WaitFrame()

		//bool shouldLiftEnt = true
		// check if we need to lift the ent
		if ( ent.IsPlayer() )
		{
			//print( file.playerInGravLiftCount[ ent ] )
			// don't lift wallrunning/wallhanging/wallclimbing/ziplining players
			if ( ent.IsWallRunning() || ent.IsWallHanging() || ent.IsTraversing() || ent.IsZiplining() )
				continue
		}
		if ( IsValid( ent.GetParent() ) ) // has a parent
			continue

		if( !reachedHighest )
		{
			// lift the entity
			ent.kv.gravity = 0.0001 // never uses 0.0, it means default gravity
			vector airSpeed = GetEntityGravLiftVelocity( ent, LIFT_HORIZON_MOVE_SPEED )
			airSpeed.z = LIFT_RISE_SPEED
			ent.SetVelocity( airSpeed )
		}
		else // reached highest!
		{
			// make entity floating
			vector airSpeed = GetEntityGravLiftVelocity( ent, LIFT_HORIZON_MOVE_SPEED )
			airSpeed.z = 0
			ent.SetVelocity( airSpeed )
			if ( Time() > reachHighestTime + LIFT_TOP_TIME_LIMIT ) // more than limit!
			{
				if ( ent.IsPlayer() )
				{
					if ( file.playerInGravLiftCount[ ent ] > 1 ) // still having other gravlifts! )
						continue
				}
				results.bouncedFromLift = true // consider as force bounced away!
				break // end the loop
			}
		}

		// highest parts check
		if( ent.GetOrigin().z - bottomHeight >= LIFT_HEIGHT && !reachedHighest )
		{
			reachHighestTime = Time()
			reachedHighest = true
		}

		if ( ent.IsPlayer() )
		{
			ent.ForceStand() // force player to stand
			ent.ConsumeDoubleJump() // don't let players doublejump
			FindNearestSafeSpotAndPutEntity( ent, 1 ) // always try to protect players from stucking
		}
	}
}

void function BounceEntityFromLift( entity ent )
{
	vector airSpeed = GetEntityGravLiftVelocity( ent, 1 ) * LIFT_PULL_SPEED_HORIZON
	airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	ent.SetVelocity( airSpeed )
}

void function BounceEntityForward( entity ent )
{
	vector airSpeed
	if ( ent.IsPlayer() ) // player specifics
	{
		vector playerAngles = ent.EyeAngles()
		vector forward = AnglesToForward( < 0, playerAngles.y, 0 > ) // yaw only
		airSpeed = forward * LIFT_PULL_SPEED_HORIZON
		airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	}
	else
	{
		airSpeed = ent.GetForwardVector() * LIFT_PULL_SPEED_HORIZON
		airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	}

	ent.SetVelocity( airSpeed )
}

vector function GetEntityGravLiftVelocity( entity ent, float speed )
{
	if ( ent.IsPlayer() ) // for players, get their input!
		return GetPlayerVelocityFromInput( ent, speed )

	// other conditions
	return ent.GetUpVector() * speed
}

vector function GetPlayerVelocityFromInput( entity player, float speed )
{
	vector angles = player.EyeAngles()
	float xAxis = player.GetInputAxisRight()
	float yAxis = player.GetInputAxisForward()
	vector directionForward = GetDirectionFromInput( angles, xAxis, yAxis )

	return directionForward * speed
}

vector function GetDirectionFromInput( vector playerAngles, float xAxis, float yAxis )
{
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}
#endif

/* // now using a new check!
#if SERVER
void function GravityLiftThink( entity projectile )
{
	if( !IsValid( projectile ) )
		return

	GravLiftStruct gravityLift

	EmitSoundOnEntity( projectile, "default_gravitystar_impact_3p" )
	
	// FX_HARVESTER_BEAM don't have these things
	//entity cpColor = CreateEntity( "info_placement_helper" )
	//SetTargetName( cpColor, UniqueString( "gravlift_cpColor" ) )
	//cpColor.SetOrigin( < 0,100,255 > )
	//DispatchSpawn( cpColor )

	//entity cpRadius = CreateEntity( "info_placement_helper" )
	//SetTargetName( cpRadius, UniqueString( "gravlift_cpRadius" ) )
	//cpRadius.SetOrigin( Vector(LIFT_HEIGHT,LIFT_HEIGHT,LIFT_HEIGHT) )
	//DispatchSpawn( cpRadius )

	//entity gravliftbeam = CreateEntity( "info_particle_system" )
	//gravliftbeam.kv.start_active = 1
	//gravliftbeam.SetValueForEffectNameKey( FX_HARVESTER_BEAM )
	//SetTargetName( gravliftbeam, UniqueString() )
	//gravliftbeam.kv.cpoint1 = cpColor.GetTargetName()
	//gravliftbeam.kv.cpoint5 = cpRadius.GetTargetName()
	//gravliftbeam.SetOrigin( projectile.GetOrigin() )
	//DispatchSpawn( gravliftbeam )

	entity gravliftbeam = StartParticleEffectOnEntity_ReturnEntity( projectile, GetParticleSystemIndex( FX_HARVESTER_BEAM ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
	EffectSetControlPointVector( gravliftbeam, 1, < 0,100,255 > )

	entity trigger = CreateTriggerRadiusMultiple( projectile.GetOrigin(), LIFT_RADIUS, [], TRIG_FLAG_PLAYERONLY | TRIG_FLAG_START_DISABLED | TRIG_FLAG_NO_PHASE_SHIFT, LIFT_HEIGHT, -1 )

	AddCallback_ScriptTriggerEnter( trigger, OnGravityLiftTriggerEnter )
	AddCallback_ScriptTriggerLeave( trigger, OnGravityLiftTriggerLeave )

	ScriptTriggerSetEnabled( trigger, true )

	gravityLift.trigger = trigger
	file.gravityLifts.append( gravityLift )

	float startTime = Time()
	float bottomHeight = projectile.GetOrigin().z
	float progressTime
	while( true )
	{
		if( IsValid( trigger ) )
		{
			foreach( entity player in gravityLift.gravityLiftedPlayers )
			{
				if( IsValid( player ) )
				{
					//if( player.IsWallRunning() || player.IsWallHanging() || player.GetParent() != null )
					if( file.inGravLiftCooldownPlayers.contains( player ) || player.GetParent() != null )
					{
						player.kv.gravity = 0.0
						continue
					}
					if( !gravityLift.reachedHighestPlayers.contains( player ) )
					{
						player.kv.gravity = 0.001
						vector airspeed = GetPlayerVelocityFromInput( player, LIFT_HORIZON_MOVE_SPEED )
						airspeed.z = LIFT_RISE_SPEED
						player.SetVelocity( airspeed )
					}
					if( gravityLift.reachedHighestPlayers.contains( player ) )
					{
						vector airspeed = GetPlayerVelocityFromInput( player, LIFT_HORIZON_MOVE_SPEED )
						airspeed.z = 0
						player.SetVelocity( airspeed )
					}
					if( player.GetOrigin().z - bottomHeight >= LIFT_HEIGHT && !gravityLift.reachedHighestPlayers.contains( player ) )
						thread OnPlayerReachedHighest( player, trigger )
					FindNearestSafeSpotAndPutEntity( player, 1 )
				}
			}
		}
		WaitFrame()
		progressTime = Time()
		//if( progressTime - startTime >= LIFT_LIFETIME && gravityLift.gravityLiftedPlayers.len() == 0 gravityLift.reachedHighestPlayers.len() == 0 )
		if( progressTime - startTime >= LIFT_LIFETIME && gravityLift.gravityLiftedPlayers.len() == 0 )
		{
			//DestroyPlacementHelper( cpRadius, cpColor )
			thread DestroyGravityLift( projectile, trigger, gravityLift, gravliftbeam )
			return
		}
		else if( progressTime - startTime >= LIFT_LIFETIME * 1.5 )
		{
			//DestroyPlacementHelper( cpRadius, cpColor )
			thread DestroyGravityLift( projectile, trigger, gravityLift, gravliftbeam )
			return
		}
	}
}

void function OnGravityLiftTriggerEnter( entity trigger, entity player )
{
	if( player.IsTitan() )
		return

	player.Signal( "EnterGravityLift" )

	GravLiftStruct gravityLift
	foreach( GravLiftStruct lift in file.gravityLifts )
	{
		if( lift.trigger == trigger )
			gravityLift = lift
	}

	if( !gravityLift.gravityLiftedPlayers.contains( player ) )
	{
		gravityLift.gravityLiftedPlayers.append( player )
		//EmitSoundOnEntityOnlyToPlayer( player, player, "titan_flight_hover_1p" )
		//EmitSoundOnEntityExceptToPlayer( player, player, "titan_flight_hover_3p" )
		StopSoundOnEntity( player, "titan_flight_hover_3p" )
		EmitSoundOnEntity( player, "titan_flight_hover_3p" )
		player.ForceStand()
		//player.kv.airSpeed = LIFT_HORIZON_MOVE_SPEED
		//player.kv.gravity = 0.001
		//if( player.IsOnGround() )
		//	player.SetOrigin( player.GetOrigin() + < 0,0,20 > ) //may get stuck, but should set this on if radius is small
		//else
		//	player.SetOrigin( player.GetOrigin() + < 0,0,5 > ) //may get stuck
	}
}

void function OnGravityLiftTriggerLeave( entity trigger, entity player )
{
	if( player.IsTitan() )
		return

	player.Signal( "LeaveGravityLift" )

	GravLiftStruct gravityLift
	foreach( GravLiftStruct lift in file.gravityLifts )
	{
		if( lift.trigger == trigger )
			gravityLift = lift
	}

	if( gravityLift.gravityLiftedPlayers.contains( player ) )
	{
		gravityLift.gravityLiftedPlayers.fastremovebyvalue( player )
		//StopSoundOnEntity( player, "titan_flight_hover_1p" )
		StopSoundOnEntity( player, "titan_flight_hover_3p" )
		//player.kv.airSpeed = 60.0
		player.kv.gravity = 0.0 // defensive fix
		array<string> settingMods = player.GetPlayerSettingsMods()
		//if( settingMods.contains( "wallclimber" ) ) // wallclimber uses settings gravity now, not kv.gravity
		//	player.kv.gravity = player.GetPlayerSettingsField( "gravityScale" )
		player.UnforceStand()
		if( !file.inGravLiftCooldownPlayers.contains( player ) )
		{
			vector airspeed = GetPlayerVelocityFromInput( player, LIFT_PULL_SPEED_HORIZON )
			airspeed.z = LIFT_PULL_SPEED_VERTICAl
			player.SetVelocity( airspeed )
			thread GravLiftCooldownThink( player )
		}
		//print( "[MIXED_GAME]" + player.GetPlayerName() + " left gravitylift and has been bounced away" )
	}
}

void function OnPlayerReachedHighest( entity player, entity trigger )
{
	player.EndSignal( "LeaveGravityLift" )
		
	GravLiftStruct gravityLift
	foreach( GravLiftStruct lift in file.gravityLifts )
	{
		if( lift.trigger == trigger )
			gravityLift = lift
	}

	if( !gravityLift.reachedHighestPlayers.contains( player ) )
		gravityLift.reachedHighestPlayers.append( player )

	OnThreadEnd(
		function(): ( player, gravityLift )
		{
			if( gravityLift.reachedHighestPlayers.contains( player ) )
				gravityLift.reachedHighestPlayers.fastremovebyvalue( player )
		}
	)

	wait LIFT_TOP_TIME_LIMIT

	if( IsValid( player ) && IsAlive( player ) )
	{
		BouncePlayerForward( player )
		//StopSoundOnEntity( player, "titan_flight_hover_1p" )
		StopSoundOnEntity( player, "titan_flight_hover_3p" )
		if( gravityLift.gravityLiftedPlayers.contains( player ) )
		{
			gravityLift.gravityLiftedPlayers.fastremovebyvalue( player )
			//player.kv.airSpeed = 60.0
			player.kv.gravity = 0.0
			//player.kv.gravity = player.GetPlayerSettingsField( "gravityScale" )
		}
		if( gravityLift.reachedHighestPlayers.contains( player ) )
			gravityLift.reachedHighestPlayers.fastremovebyvalue( player )
	}
}

void function BouncePlayerForward( entity player )
{
	if( IsValid( player ) )
	{
		player.UnforceStand()
		vector playerAngles = player.EyeAngles()
		//vector playerAngles = player.GetAngles()
		//vector forward = AnglesToForward( playerAngles )
		vector forward = AnglesToForward( < 0, playerAngles.y, 0 > ) // yaw only
		//vector directionVec = Vector(0,0,0)
		//directionVec += forward
		//vector directionAngles = VectorToAngles( directionVec )
		//vector directionForward = AnglesToForward( directionAngles )
		//vector airspeed = directionForward * LIFT_PULL_SPEED_HORIZON
		vector airspeed = forward * LIFT_PULL_SPEED_HORIZON
		airspeed.z = LIFT_PULL_SPEED_VERTICAl
		player.SetVelocity( airspeed )
		thread GravLiftCooldownThink( player )
	}
}

void function GravLiftCooldownThink( entity player )
{
	if( LIFT_COOLDOWN <= 0 )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	file.inGravLiftCooldownPlayers.append( player )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				file.inGravLiftCooldownPlayers.fastremovebyvalue( player )
			}
		}
	)


	wait LIFT_COOLDOWN
}

void function DestroyGravityLift( entity projectile, entity trigger, GravLiftStruct gravityLift, entity gravliftbeam )
{
	if( IsValid(gravliftbeam) )
	{
		gravliftbeam.kv.Visibilityflags = 0
		wait 0.1
		EffectStop(gravliftbeam)
	}
	if( IsValid(projectile) )
	{
		projectile.Destroy()
	}
	if( IsValid(trigger) )
		trigger.Destroy()
	file.gravityLifts.fastremovebyvalue( gravityLift )
	//foreach( entity player in GetPlayerArray() ) // fix!!! for sometimes ending lift stucks players
	//{	
	//	FindNearestSafeSpotAndPutEntity( player, 1 )
	//}
}

void function DestroyPlacementHelper( entity cpRadius, entity cpColor )
{
	if( IsValid( cpRadius ) )
		cpRadius.Destroy()
	if( IsValid( cpColor ) )
		cpColor.Destroy()
}

vector function GetPlayerVelocityFromInput( entity player, float scale )
{
	vector angles = player.EyeAngles()
	float xAxis = player.GetInputAxisRight()
	float yAxis = player.GetInputAxisForward()
	vector directionForward = GetDirectionFromInput( angles, xAxis, yAxis )

	return directionForward * scale
}

vector function GetDirectionFromInput( vector playerAngles, float xAxis, float yAxis )
{
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}
*/

/* //Bassically some try, failed though
void function GravityLiftThink( entity projectile )
{
	if( !IsValid( projectile ) )
		return

	//float height = GetRoofHeight( projectile )
	
	//float highestpoint
	//if( height >= LIFT_HEIGHT )
	//	highestpoint = LIFT_HEIGHT //* 1.2
	//else
	//	highestpoint = height - 80

	GravLiftStruct gravityLift

	EmitSoundOnEntity( projectile, "default_gravitystar_impact_3p" )
	entity gravliftbeam = StartParticleEffectOnEntity_ReturnEntity( projectile, GetParticleSystemIndex( FX_HARVESTER_BEAM ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
	EffectSetControlPointVector( gravliftbeam, 1, < 0,100,255 > )

	//entity trigger = CreateTriggerRadiusMultiple( projectile.GetOrigin(), LIFT_RADIUS, [], TRIG_FLAG_PLAYERONLY | TRIG_FLAG_START_DISABLED | TRIG_FLAG_NO_PHASE_SHIFT, height, -1 )
	entity trigger = CreateTriggerRadiusMultiple( projectile.GetOrigin(), LIFT_RADIUS, [], TRIG_FLAG_PLAYERONLY | TRIG_FLAG_START_DISABLED | TRIG_FLAG_NO_PHASE_SHIFT, LIFT_HEIGHT, -1 )

	AddCallback_ScriptTriggerEnter( trigger, OnGravityLiftTriggerEnter )
	AddCallback_ScriptTriggerLeave( trigger, OnGravityLiftTriggerLeave )

	ScriptTriggerSetEnabled( trigger, true )

	gravityLift.trigger = trigger
	file.gravityLifts.append( gravityLift )

	//thread DelayedDestroyTrigger( projectile, trigger, gravliftbeam )

	float startTime = Time()
	float progressTime
	while( true )
	{
		if( IsValid( trigger ) )
		{
			foreach( entity player in gravityLift.gravityLiftedPlayers )
			{
				if( IsValid( player ) )
				{
					if( !gravityLift.reachedHighestPlayers.contains( player ) )
					{
						vector airspeed = GetPlayerVelocityFromInput( player, LIFT_HORIZON_MOVE_SPEED )
						airspeed.z = LIFT_RISE_SPEED
						player.SetVelocity( airspeed )
					}
					if( gravityLift.reachedHighestPlayers.contains( player ) )
					{
						vector airspeed = GetPlayerVelocityFromInput( player, LIFT_HORIZON_MOVE_SPEED )
						airspeed.z = 0
						player.SetVelocity( airspeed )
					}
					//if( player.GetOrigin().z - projectile.GetOrigin().z >= highestpoint && !reachedHighestPlayers.contains( player ) )
					if( player.GetOrigin().z - projectile.GetOrigin().z >= LIFT_HEIGHT && !gravityLift.reachedHighestPlayers.contains( player ) )
						thread OnPlayerReachedHighest( player, trigger )
					//if( !file.reachedHighestPlayers.contains( player ) )
					//{
					//	vector liftspeed = player.GetVelocity()
					//	liftspeed.z = LIFT_RISE_SPEED
					//	if( !CanTetherPlayer( player, trigger ) )
					//	{
					//		BouncePlayerAway( player )
					//		if( file.gravityLiftedPlayers.contains( player ) )
					//		{
					//			file.gravityLiftedPlayers.fastremovebyvalue( player )
					//			player.kv.gravity = 1
					//			//player.kv.gravity = player.GetPlayerSettingsField( "gravityScale" )
					//		}
					//		if( file.reachedHighestPlayers.contains( player ) )
					//			file.reachedHighestPlayers.fastremovebyvalue( player )
					//	}
					//	player.SetVelocity( liftspeed )
					//}
					if( file.reachedHighestPlayers.contains( player ) )
					{
						vector liftspeed = player.GetVelocity()
						liftspeed.z = 0
						player.SetVelocity( liftspeed )
					}
					if( PlayerTouchedRoof( player ) )
					{
						if( !file.reachedHighestPlayers.contains( player ) )
							thread OnPlayerReachedHighest( player )
					}
				}
			}
		}
		WaitFrame()
		progressTime = Time()
		//if( progressTime - startTime >= LIFT_LIFETIME - 0.1 )
		//{
		//	if( IsValid(gravliftbeam) )
		//	{
		//		if( gravliftbeam.kv.Visibilityflags != 0 )
		//			gravliftbeam.kv.Visibilityflags = 0
		//	}
		//}
		if( progressTime - startTime >= LIFT_LIFETIME && gravityLift.gravityLiftedPlayers.len() == 0 ) //gravityLift.reachedHighestPlayers.len() == 0
		{
			if( IsValid(gravliftbeam) )
			{
				gravliftbeam.kv.Visibilityflags = 0
				wait 0.1
				EffectStop(gravliftbeam)
			}
			if( IsValid(projectile) )
			{
				//projectile.GrenadeExplode( < 0,0,0 > )
				projectile.Destroy()
			}
			if( IsValid(trigger) )
				trigger.Destroy()
			file.gravityLifts.fastremovebyvalue( gravityLift )
			break
		}
	}
}

void function DelayedDestroyTrigger( entity projectile, entity trigger, entity fx )
{
	wait LIFT_LIFETIME
	if( IsValid( fx ) )
		fx.kv.Visibilityflags = 0
	if( IsValid( trigger ) )
		trigger.Destroy()
	if( IsValid( projectile ) )
		projectile.Destroy()
}

bool function CanTetherPlayer( entity player, entity trigger )
{
	TraceResults trace = TraceLine( trigger.GetOrigin(), player.GetOrigin(), [ trigger ], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
	if( trace.hitEnt != player )
		return false

	return true
}

bool function PlayerTouchedRoof( entity player )
{
	TraceResults trace = TraceLine( player.GetOrigin(), player.GetOrigin() + < 0,0,60 >, [ player ], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
	if( trace.hitEnt == null )
		return false

	return true
}

float function GetRoofHeight( entity projectile, vector startpos, vector endpos )
{
	TraceResults trace = TraceLine( startpos, startpos + < 0,0,9999 >, [projectile], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
	float roofheight
	// Avoid line been interrupted by players or npcs
	if( IsValid( trace.hitEnt ) )
	{
		if( trace.hitEnt.IsPlayer() || trace.hitEnt.IsNPC() )
		{
			return GetRoofHeight( projectile, trace.hitEnt.GetOrigin() + < 0,0,20 >, trace.hitEnt.GetOrigin() + < 0,0,9999 > )
		}
	}
	else
		roofheight = trace.endPos.z - projectile.GetOrigin().z

	if( roofheight >= LIFT_HEIGHT )
		return LIFT_HEIGHT

	return roofheight
}

void function CreateGravityLift( entity projectile )
{
	array<entity> triggers = []
	array<entity> fxhandles = []
	entity poshandle = CreateEntity( "script_mover" )
	poshandle.SetOrigin( projectile.GetOrigin() )
	
	for( int i = 0; i < LIFT_SEGMENT_COUNT; i++ )
	{
		if( !RoofCheck( poshandle ) )
			continue
		entity trigger = CreateTriggerBySegment( poshandle.GetOrigin() )
		entity fxhandle = CreateEntity( "script_mover" )
		fxhandle.SetOrigin( poshandle.GetOrigin() )
		fxhandle.SetModel( $"models/domestic/nessy_doll.mdl" )
		entity fx = StartParticleEffectOnEntity_ReturnEntity( fxhandle, GetParticleSystemIndex( GRAVITY_VORTEX_FX ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 )
		triggers.append( trigger )
		fxhandles.append( fxhandle )
		poshandle.SetOrigin( poshandle.GetOrigin() + < 0,0,LIFT_HEIGHT_PER_SEGMENT > )
	}
	poshandle.Destroy()

	wait LIFT_LIFETIME

	foreach( entity trigger in triggers )
	{
		if( IsValid( trigger ) )
			trigger.Destroy()
	}
	foreach( entity fxhandle in fxhandles )
	{
		if( IsValid( fxhandle ) )
			fxhandle.Destroy()
	}
	if( IsValid( projectile ) )
		projectile.GrenadeExplode( < 0,0,0 > )
}

entity function CreateTriggerBySegment( vector pos )
{
	entity trigger = CreateTriggerRadiusMultiple( pos, LIFT_RADIUS, [], TRIG_FLAG_PLAYERONLY | TRIG_FLAG_START_DISABLED | TRIG_FLAG_NO_PHASE_SHIFT, LIFT_HEIGHT_PER_SEGMENT, 0 )

	AddCallback_ScriptTriggerEnter( trigger, OnGravityLiftTriggerEnter )
	AddCallback_ScriptTriggerLeave( trigger, OnGravityLiftTriggerLeave )

	ScriptTriggerSetEnabled( trigger, true )
	return trigger
}

void function OnGravityLiftTriggerEnter( entity trigger, entity ent )
{
	//ent.Signal( "EnterGravityLift" )
	ent.EndSignal( "LeaveGravityLift" )
	ent.EndSignal( "OnDeath" )
	ent.EndSignal( "OnDestroy" )

	
	//hasGravityLifted.append( ent )
	//if( !hasGravityLifted.contains( ent ) )
	//{
	//	ent.kv.gravity = 0.0
	//	ent.kv.airAcceleration = 5400
		while( true )
		{
			if( IsValid( ent ) )
			{
				vector airspeed = GetPlayerVelocityFromInput( ent, LIFT_HORIZON_MOVE_SPEED )
				airspeed.z = LIFT_RISE_SPEED
				ent.SetVelocity( airspeed )
			}
			WaitFrame()
		}
	//}

	//OnThreadEnd(
	//	function(): ( ent )
	//	{
	//		hasGravityLifted.fastremovebyvalue( ent )
	//		if( IsValid( ent ) )
	//			ent.kv.gravity = 0.8
	//	}
	//)
}

void function OnGravityLiftTriggerLeave( entity trigger, entity ent )
{
	ent.Signal( "LeaveGravityLift" )
	//SetPlayerVelocityFromInput( ent, LIFT_PULL_SPEED_HORIZON, < 0,0,LIFT_PULL_SPEED_VERTICAl> )
}

void function OnPlayerReachedHighestTrigger( entity player )
{
	player.EndSignal( "LeaveGravityLift" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				SetPlayerVelocityFromInput( player, LIFT_PULL_SPEED_HORIZON, < 0,0,LIFT_PULL_SPEED_VERTICAl> )
		}
	)

	wait LIFT_TOP_TIME_LIMIT
}

bool function RoofCheck( entity trigger )
{
	if( TraceLine( trigger.GetOrigin(), trigger.GetOrigin() + < 0,0,LIFT_HEIGHT_PER_SEGMENT >, [ trigger ], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE ).hitEnt == null )
		return false

	return true
}
#endif
*/