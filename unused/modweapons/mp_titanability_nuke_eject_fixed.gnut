// respawn don't have this file, but I'll still mark is as "_fixed"
// this file still won't work if player not doomed, so I decided to remove it( client can't know this titan is doomed by server! )
// currently still handled by sh_titan.gnut
global function MpTitanAbilityNukeEject_Init
global function OnWeaponOwnerChanged_nuke_eject

struct
{
    table <entity, bool> playerHasNuclearCoreAtStart
} file

void function MpTitanAbilityNukeEject_Init()
{
#if SERVER
    AddCallback_OnClientConnected( OnClientConnected )
#endif
}

#if SERVER
void function OnClientConnected( entity player )
{
    file.playerHasNuclearCoreAtStart[ player ] <- false
}
#endif

void function OnWeaponOwnerChanged_nuke_eject( entity weapon, WeaponOwnerChangedParams changeParams )
{
#if SERVER
    print( "RUNNING OnWeaponOwnerChanged_nuke_eject()" )

    // old owner
    if ( IsValid( changeParams.oldOwner ) )
    {
        entity player
        if ( changeParams.oldOwner.IsPlayer() )
            player = changeParams.oldOwner
        if( IsValid( player ) )
        {
            if ( !file.playerHasNuclearCoreAtStart[ player ] ) // player don't have a nuclearCore at the start of getting this weapon
            {
                print( "player don't have a nuclear core! cleaning it" )
                TakePassive( player, ePassives.PAS_BUILD_UP_NUCLEAR_CORE ) // take the passive off player
            }

            file.playerHasNuclearCoreAtStart[ player ] <- false // reset it
        }
    }

    // new owner
    if ( IsValid( changeParams.newOwner ) )
    {
        entity player
        if( changeParams.newOwner.IsPlayer() )
            player = changeParams.newOwner
        if( IsValid( player ) )
        {
            // PAS_BUILD_UP_NUCLEAR_CORE is ttf2's nuke, PAS_NUCLEAR_CORE is super nuke!
            if ( PlayerHasPassive( player, ePassives.PAS_BUILD_UP_NUCLEAR_CORE ) )
            {
                print( "player already have a nuclear core!" )
                file.playerHasNuclearCoreAtStart[ player ] = true // mark as already has a nuclear core, we won't remove it after ejecting
            }
            else
            {
                print( "player don't have a nuclear core! giving them a temp one" )
                GivePassive( player, ePassives.PAS_BUILD_UP_NUCLEAR_CORE ) // temp give NUCLEAR_CORE to player
                file.playerHasNuclearCoreAtStart[ player ] <- false // 
            }
        }
    }
#endif      
}