untyped

global function AirDropsPVP_Init

struct DroppodStruct
{
	entity door
	bool openDoor = false
	int numGuys = 0
	int flags = 0
}
const asset CAREPACKAGE_MODEL = $"models/vehicle/escape_pod/escape_pod.mdl"

//const array<string> WEAPONS = [ "mp_weapon_alternator_smg", "mp_weapon_arc_launcher", "mp_weapon_autopistol", "mp_weapon_car", "mp_weapon_defender", "mp_weapon_dmr", "mp_weapon_doubletake", "mp_weapon_epg", "mp_weapon_esaw", "mp_weapon_g2", "mp_weapon_hemlok", "mp_weapon_hemlok_smg", "mp_weapon_lmg", "mp_weapon_lstar", "mp_weapon_mastiff", "mp_weapon_mgl", "mp_weapon_pulse_lmg", "mp_weapon_r97", "mp_weapon_rocket_launcher", "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_semipistol", "mp_weapon_shotgun", "mp_weapon_shotgun_pistol", "mp_weapon_smart_pistol", "mp_weapon_smr", "mp_weapon_sniper", "mp_weapon_softball", "mp_weapon_vinson", "mp_weapon_wingman", "mp_weapon_wingman_n" ]
//const array<string> WEAPONS = [ "mp_weapon_alternator_smg", "mp_weapon_car", "mp_weapon_esaw", "mp_weapon_r97", "mp_weapon_shotgun", "mp_weapon_hemlok" ]
const array<string> WEAPONS = [ "mp_weapon_alternator_smg", "mp_weapon_car", "mp_weapon_esaw", "mp_weapon_r97", "mp_weapon_hemlok", "mp_weapon_softball", "mp_weapon_smr", "mp_weapon_semipistol", "mp_weapon_wingman", "mp_weapon_defender", "mp_weapon_lstar" ]
const array<string> MODS = [ "pas_run_and_gun", "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_fast_ads", "tactical_cdr_on_kill", "threat_scope" ]

const array< string > ANTITITANS = [ "mp_weapon_arc_launcher", "mp_weapon_mgl", "mp_weapon_rocket_launcher" ]
const array< string > DEFENDER = [ "mp_weapon_defender" ]
const array< string > PISTOLS = [ "mp_weapon_autopistol", "mp_weapon_semipistol", "mp_weapon_smart_pistol", "mp_weapon_wingman", "mp_weapon_wingman_n", "mp_weapon_shotgun_pistol" ]
const array< string > SNIPERS = [ "mp_weapon_dmr", "mp_weapon_sniper", "mp_weapon_doubletake" ]
const array< string > LAUNCHERS = [ "mp_weapon_smr", "mp_weapon_epg", "mp_weapon_pulse_lmg", "mp_weapon_softball" ]

const array< string > ANTITAN_MODS = [ "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo", "at_unlimited_ammo" ]
const array< string > DEFENDER_MODS = [ "tactical_cdr_on_kill", "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > PISTOL_MODS = [ "tactical_cdr_on_kill", "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > SNIPER_MODS = [ "tactical_cdr_on_kill", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > LAUNCHER_MODS = [ "tactical_cdr_on_kill", "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
array< string > usedplayer = []

void function AirDropsPVP_Init()
{
	#if SERVER
	PrecacheModel( CAREPACKAGE_MODEL )
	AddCallback_GameStateEnter( eGameState.Playing, AirDropsEnable )
	#endif
}

#if SERVER
void function AirDropsEnable()
{
	int team = RandomInt(2) + 2
	thread SpawnerWeapons( team )
}

void function SpawnerWeapons( int team )
{
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	while( true )
	{
		if( GetGameState() == eGameState.Playing )
		{
			wait 60

			foreach( entity player in GetPlayerArray() )
			{
				if( IsValid(player) )
					SendHudMessage(player, "正在运送补给舱\n于补给舱处获取强化",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
			}
			array< entity > points = SpawnPoints_GetDropPod()
			team = RandomInt(2) + 2

			for( int i = 0; i < 2; i++ )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				waitthread SpawnDropPodToGetWeapons( node.GetOrigin(), node.GetAngles() )
			}
		}
	}
}

//-------------------------------------------------------------------------------------------------

void function SpawnDropPodToGetWeapons( vector pos, vector rot )
{
	thread DropWeaponAlert( pos )
	thread SpawnDropPodToGetWeapons_Threaded( pos, rot )
}

void function SpawnDropPodToGetWeapons_Threaded( vector pos, vector rot )
{
	usedplayer.clear()
	wait 7
	entity pod = CreateDropPod( pos, <0,0,0> )
	Highlight_SetOwnedHighlight( pod, "friendly_ai" )
	//InitFireteamDropPod( pod )
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	pod.SetUsable()
    pod.SetUsableByGroup( "pilot" )
    pod.SetUsePrompts( "按住 %use% 以獲取強化", "按下 %use% 以獲取強化" )
    //AddCallback_OnUseEntity( pod , GiveAirDropWeapon )
    AddCallback_OnUseEntity( pod , GiveAirDropBoosts )
    if( IsValid(pod) )
    {
    	HighlightDropPod( pod )
    	pod.SetModel( CAREPACKAGE_MODEL )
    }

    wait 30
    if( IsValid(pod) )
    {
    	pod.Destroy()
   		//pod.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
    }
}

void function DropWeaponAlert( vector pos )
{
	foreach ( entity player in GetPlayerArray() )
	{
	    Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + 12 )
	}
}

function GiveAirDropWeapon( pod , player )
{
	expect entity( player )
	vector pos = player.GetOrigin()
	string uid = player.GetUID()

	if( usedplayer.contains( uid ) )
	{
		SendHudMessage(player, "已于本轮的补给舱获取过一次武器\n请等待下一轮补给舱",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
		return
	}
    DropModdedWeapons( WEAPONS, pos, MODS )
    SendHudMessage(player, "成功从补给舱获取武器\n掉落在地面",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
    usedplayer.append( uid )
	
}

function GiveAirDropBoosts( pod , player )
{
	expect entity( player )
	vector pos = player.GetOrigin()
	string uid = player.GetUID()

	if( usedplayer.contains( uid ) )
	{
		SendHudMessage(player, "已于本轮的补给舱获取过一次强化\n请等待下一轮补给舱",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
		return
	}
	string boostname = GiveRandomBurnCard_ReturnString( player )
    SendHudMessage(player, "成功从补给舱获取 " + boostname,  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
    usedplayer.append( uid )
	
}

string function GiveRandomBurnCard_ReturnString( entity player )
{
	//if( IsValid( player.GetOffhandWeapon( OFFHAND_INVENTORY ) ) )
	//	return ""
	switch( RandomInt(5) )
	{
		case 0:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_amped_weapons" )
			return "强化武器"
		case 1:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_at_turret_weapon" )
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_at_turret_weapon" )
			return "泰坦哨兵 2个"
		case 2:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_hard_cover" )
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_hard_cover" )
			return "强化掩护 2个"
		case 3:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_nuke_titan" )
			return "死神降落"
		case 4:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_rodeo_grenade" )
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_rodeo_grenade" )
			return "幽灵战士空投 2个"
		/*
		case 5:
			PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_smart_pistol" )
			return "智慧手枪"
		case 6:
			for( int i = 0; i < 10; i++ )
				PlayerInventory_PushInventoryItemByBurnRef( player, "burnmeter_emergency_battery" )
			return "紧急电池 10个"
		*/
		default:
			return ""
	}
	return ""
}

void function DropModdedWeapons( array<string> weapons, vector droppoint, array<string> mods )
{
	string weaponName = weapons[ RandomInt(weapons.len()) ]
    entity weapon = CreateWeaponEntityByNameWithPhysics( weaponName, droppoint + Vector(0,0,20), <0,0,0> )
    if( weaponName == "mp_weapon_lstar" )
    	mods.append( "reloadanimtest" )
    if( ANTITITANS.contains( weaponName ) )
    	mods = ANTITAN_MODS
    if( DEFENDER.contains( weaponName ) )
    	mods = DEFENDER_MODS
    if( PISTOLS.contains( weaponName ) )
    {
    	mods = PISTOL_MODS
    	if( weaponName == "mp_weapon_wingman" )
    		mods.append( "burn_mod_wingman" )
    	if( weaponName == "mp_weapon_semipistol" )
    		mods.append( "burn_mod_semipistol" )
    }
    if( SNIPERS.contains( weaponName ) )
        mods = SNIPER_MODS
    if( LAUNCHERS.contains( weaponName ) )
    {
    	mods = LAUNCHER_MODS
    	if( weaponName == "mp_weapon_smr" )
    		mods.append( "burn_mod_smr" )
    	if( weaponName == "mp_weapon_softball" )
    		mods.append( "burn_mod_softball" )
    }
    weapon.SetMods( mods )
    HighlightWeaponAmped( weapon )
}

void function HighlightWeaponAmped( entity weapon )
{
#if HAS_WEAPON_PICKUP_HIGHLIGHT
	if ( weapon.IsLoadoutPickup() )
	{
		Highlight_SetOwnedHighlight( weapon, "sp_loadout_pickup" )
		Highlight_SetNeutralHighlight( weapon, "sp_loadout_pickup" )
	}
	else
	{
		Highlight_SetOwnedHighlight( weapon, "enemy_boss_bounty" )
		Highlight_SetNeutralHighlight( weapon, "enemy_boss_bounty" )
	}
#endif // #if HAS_WEAPON_PICKUP_HIGHLIGHT
}

void function HighlightDropPod( entity pod )
{
	Highlight_SetNeutralHighlight( pod, "enemy_boss_bounty" )
}

//-------------------------------------------------------------------------------------------------

int function GetSpawnPointIndex( array< entity > points, int team )
{
	entity zone = DecideSpawnZone_Generic( points, team )

	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			int index = RandomInt( points.len() )

			if ( Distance2D( points[ index ].GetOrigin(), zone.GetOrigin() ) < 6000 )
				return index
		}
	}

	return RandomInt( points.len() )
}
#endif