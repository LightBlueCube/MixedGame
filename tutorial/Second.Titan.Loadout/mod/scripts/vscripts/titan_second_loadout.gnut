untyped // 允许使用无类型变量，这个文件里的 “owner.s.replacementDropInProgress” 便是无类型

global function SecondTitanLoadout_Init

void function SecondTitanLoadout_Init() // 主函数，可以放整个函数内使用的回调等
{
    // 这个是函数调用：函数名( 第一参数，第二参数 )
    AddSpawnCallback( "npc_titan", OnTitanSpawned ) // “Callback”即“回调”，AddSpawnCallback()指在第一参数的实体(这里为npc泰坦)生成时，执行第二参数的函数(这里为下面即将定义的函数)
}

// 这个是函数定义，这个函数有一个参数，类型是实体。这个实体将在AddSpawnCallback()回调时被传入，即一个npc泰坦实体
// 函数也就是将多行代码存进一个定义内，引用是指把函数内的代码顺序执行
void function OnTitanSpawned( entity titan )
{
    print( "RUNNING OnTitanSpawned()!" )
    // 这里开始写函数体，即函数的内容
    // 这里函数的参数是实体 titan，可以直接使用
    entity owner = GetPetTitanOwner( titan ) // 尝试获取这个泰坦的主人
	if( !IsValid( owner ) ) // IsValid()即判断这个实体是否为空(null)，如果实体为空则说明泰坦并没有主人
		return // 用return，结束这个函数。下面的内容不会再被执行
    if ( !owner.IsPlayer() ) // 如果主人不是玩家，也要结束这个函数--我们下面的代码都只考虑了玩家的情况，对于npc或其他实体来说会产生崩溃
        return

    bool isDisembarkedTitan = expect bool( titan.s.spawnWithoutSoul )
    if ( !isDisembarkedTitan )
        return

    // 至于为什么要判断泰坦是否在降落过程中，因为玩家和泰坦的切换实质是摧毁了npc泰坦并将玩家设定为“泰坦”角色
    // 而下机则是将玩家由“泰坦”角色转为“铁驭”角色，并且再生成一个npc泰坦，因此会触发在AddSpawnCallback()里写的调用
    // 对于替换武器，这会导致下机后玩家的npc泰坦重新获得一次武器，一般来说会把弹药补满。这是上下机时不应该出现的情况

    // 接下来可以通过判断模型来决定应该给予这个泰坦何种装备
    asset titanModel = titan.GetModelName() // 模型为游戏内资源，所以使用“asset”类型，它的一般形式是 $字符串，包括下面的模型名，在判断时一定不要忘记“$”符号

    switch( titanModel ) // 这里使用switch函数，它会执行其函数体内与“titanModel”值相同的情况
    {
        // case 顾名思义，即switch内的各种“情况”，使用时一定要是 case 条件: (注意最后的半角冒号)
        case $"models/titans/medium/titan_medium_tone_prime.mdl": // 若模型为至尊强力
            BecomeAtlas( titan ) // 执行“BecomeAtlas()”函数(瞎起的名字)
            break // 在一个case结束后，需要用break来停止执行后续的case，这相当于“switch”的“return”
        // 接下来的case也是这样写，在这里写一下各个泰坦的模型名
        /*
        $"models/titans/medium/titan_medium_ajax.mdl"       // 离子
        $"models/titans/medium/titan_medium_wraith.mdl"     // 强力
        $"models/titans/heavy/titan_heavy_ogre.mdl"         // 烈焰
        $"models/titans/heavy/titan_heavy_deadbolt.mdl"     // 军团
        $"models/titans/light/titan_light_locust.mdl"       // 浪人
        $"models/titans/light/titan_light_raptor.mdl"       // 北极星

        $"models/titans/medium/titan_medium_ion_prime.mdl"      // 至尊离子
        $"models/titans/medium/titan_medium_tone_prime.mdl"     // 至尊强力
        $"models/titans/heavy/titan_heavy_scorch_prime.mdl"     // 至尊烈焰
        $"models/titans/heavy/titan_heavy_legion_prime.mdl"     // 至尊军团
        $"models/titans/light/titan_light_ronin_prime.mdl"      // 至尊浪人
        $"models/titans/light/titan_light_northstar_prime.mdl"  // 至尊北极星
        */
    }
}

// 接下来可以定义上面我们需要用到的函数
void function BecomeAtlas( entity titan )
{
    // 提醒玩家泰坦装备发生变化。这是北极星新加的函数，会在右边显示弹窗提示
    // 需要注意的是这里只能使用游戏内已有的字体，一般来说繁体就可以
    entity owner = GetPetTitanOwner( titan ) // 再次获取泰坦主人
    NSSendInfoMessageToPlayer( owner, "泰坦裝備已被替換至“天圖”" ) // 将通知发给主人

    TakeAllWeapons( titan ) // 取走这个泰坦的所有武器( 主武器、技能、近战 )

    // 开始给予主武器
    titan.GiveWeapon( "mp_titanweapon_xo16_vanguard", ["battle_rifle"] )
    // titan.GiveWeapon()的用法：第一参数为字符串，是想给予的武器名；第二参数为字符串数组，是这个武器要用到的配件
    // 这里为：给予一把帝王的xo16，配件为加速器
    // 主武器最多只能有3把，否则游戏崩溃

    // 接下来给予技能。技能和近战统称为Offhand Weapon(副手武器)
    titan.GiveOffhandWeapon( "mp_titanweapon_vortex_shield", OFFHAND_SPECIAL, ["slow_recovery_vortex"] )
    // titan.GiveOffhandWeapon()的用法：与GiveWeapon()基本一致，但第二参数是所指定的副手武器槽位。
    // 这里为：给予普通的涡旋护盾到中键槽位，配件效果为限制使用(必须充满才能使用)
    // 副手武器一个槽位只能有一把，且一个npc或玩家的副手武器不能有重复，并且npc泰坦不能有相同定位的副手武器(如：同时持有两个防御型技能，涡旋护盾和热能护罩)，可能是由于会导致ai出问题
    // 如果为默认键位的话，副手武器的槽位分为
    /*
    OFFHAND_SPECIAL     // 中键，即铁驭的战术技能或泰坦的防御技能
    OFFHAND_ANTIRODEO   // G键，即泰坦的特殊能力。铁驭如果使用键鼠也可以使用这个槽位的武器，手柄不会绑定这个按键。
    OFFHAND_ORDNANCE    // Q键，即铁驭和泰坦的重火力
    OFFHAND_INVENTORY   // C键，即铁驭的强化卡和泰坦的电烟。平常不用修改这个，可能会导致获取电烟时产生崩溃
    OFFHAND_EQUIPMENT   // 即泰坦核心。铁驭可以获得，但键鼠手柄默认都不会绑定这个按键，左下角的充能条也不会显示核心(铁驭也无法获取核心充能)
    OFFHAND_MELEE       // 即近战武器
    */

    titan.GiveOffhandWeapon( "mp_titanability_sonar_pulse", OFFHAND_ANTIRODEO )
    // 声呐突波，在G键槽位

    titan.GiveOffhandWeapon( "mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE )
    // 集束炸弹，在Q键槽位

    titan.GiveOffhandWeapon( "mp_titancore_salvo_core", OFFHAND_EQUIPMENT )
    // 核心：弹群核心

    titan.GiveOffhandWeapon( "melee_titan_sword", OFFHAND_MELEE )
    // 近战武器：大剑

    // 函数自然结束，加上上面switch内的调用，现在至尊强力将被替换为“天图”泰坦
}

entity owner = GetPetTitanOwner( titan )
if( !IsValid( owner ) )
    return
if ( !owner.IsPlayer() )
    return