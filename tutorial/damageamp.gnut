global function MainFunc_Init

const float AMPED_DAMAGE_SCALE      = 1.3 // 增伤倍率
const float AMPED_DAMAGE_DURATION   = 60 // 增伤时间

array<string> BONUS_NPC_AISETTINGS  = // 如果一个npc使用这个列表里的aisetting，击杀其将给予玩家增伤
[
    "npc_super_spectre_burnmeter"
]

struct
{
    table<entity, bool> playerHasDamageAmp
} file

void function MainFunc_Init()
{
    RegisterSignal( "PlayerDamageAmp" ) // 用于防止增伤重复进行
    AddCallback_OnClientConnected( OnClientConnected )

    AddDamageByCallback( "player", OnPlayerDealDamage )
    AddCallback_OnNPCKilled( OnNPCKilled )
}

void function OnClientConnected( entity player )
{
    file.playerHasDamageAmp[ player ] <- false // 初始化：将玩家的增伤状态设为false
}

void function OnPlayerDealDamage( entity victim, var damageInfo )
{
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    if ( IsValid( attacker ) ) // 确定攻击者仍未被摧毁
    {
        // 获取攻击者是否拥有增伤状态。
        // 由于玩家实体必定在连入服务器时被初始化，无需判断 player in file.playerHasDamageAmp
        if ( file.playerHasDamageAmp[ player ] )
            DamageInfo_ScaleDamage( damageInfo, AMPED_DAMAGE_SCALE )
    }
}

void function OnNPCKilled( entity victim, entity attacker, var damageInfo )
{
    TryGiveAmpedDamageToPlayer( victim, attacker )
}

// 我个人的命名习惯：try开头的函数返回bool类型，告诉调用位置这次调用是否成功
bool function TryGiveAmpedDamageToPlayer( entity victim, entity attacker )
{
    if ( !IsValid( attacker ) || !attacker.IsPlayer() )
        return false
    
    string victimAiSet = victim.GetAISettingsName()
    if ( !BONUS_NPC_AISETTINGS.contains( victimAiSet ) ) // 检测所设定的奖励aisetting是否包含当前npc的
        return false
    
    PlayerDamageAmp( attacker )
    return true // 运行到这里说明增伤成功了，return true
}

void function PlayerDamageAmp( entity player )
{
    thread PlayerDamageAmp_Threaded( player )
}

void function PlayerDamageAmp_Threaded( entity player )
{
    // 用于防止增伤重复进行
    player.Signal( "PlayerDamageAmp" )
    player.EndSignal( "PlayerDamageAmp" )

    player.EndSignal( "OnDeath" ) // 死亡结束thread，进入OnThreadEnd(): 取消增伤
    player.EndSignal( "OnDestroy" )

    // 将玩家标为拥有增伤
    file.playerHasDamageAmp[ player ] = true
    // 添加 "武器已强化" 提示
    foreach ( entity weapon in player.GetMainWeapons() )
    {
        weapon.SetScriptFlags0( weapon.GetScriptFlags0() | WEAPONFLAG_AMPED )
		weapon.SetScriptTime0( Time() + AMPED_DAMAGE_DURATION )
    }

    // 当这个thread结束时，会运行该函数
    OnThreadEnd
    (
        function(): ( player ) // OnThreadEnd函数的参数为一个无类型函数function()，这里function()函数的参数为player
        {
            if ( IsValid( player ) ) // 由于我们在玩家被摧毁时也添加了endSignal，这里需要确定玩家仍没被摧毁
            {
                // 移除玩家的增伤标记
                file.playerHasDamageAmp[ player ] = false 
                // 移除 "武器已强化" 提示
                foreach ( entity weapon in player.GetMainWeapons() )
                {
                    weapon.SetScriptFlags0( weapon.GetScriptFlags0() & ~WEAPONFLAG_AMPED )
                    weapon.SetScriptTime0( Time() )
                }
            }
        }
    )

    wait AMPED_DAMAGE_DURATION
}