
// 默认打开"titan_shield_regen"的playlistvar
void function MainFunc_Init()
{
    AddSoulInitFunc( OnSoulInitilize ) // 添加soul实体的初始化函数
    AddSpawnCallback( "npc_titan", TryEnemyTitanShieldRegen )
    TrackFDHarvesterSpawn()
}

struct
{
    bool titanShieldRegenStarted = false
} file

if ( !file.titanShieldRegenStarted )
{
    foreach ( entity player in GetPlayerArray() )
        StartTitanShieldHealthRegen( player )
    file.titanShieldRegenStarted = true
}

void function OnSoulInitilize( entity soul )
{
    thread StopSoulShieldHealthRegen_Internal( soul )
}

void function TryEnemyTitanShieldRegen( entity titan )
{
    thread TryEnemyTitanShieldRegen_Threaded( titan )
}

// 命名为同名函数，后缀_Threaded(或_Internal)，表示这是由上个函数thread来的
void function TryEnemyTitanShieldRegen_Threaded( entity titan )
{
    // 这里写主要内容，由于用到了wait，是一定要在另一线程内进行的
}

void function StopSoulShieldHealthRegen_Internal( entity soul )
{
    soul.EndSignal( "OnDestroy" ) // 防崩溃，如果soul实体在接下来等待的1tick内被摧毁，将结束thread

    WaitFrame() // 等待泰坦的soul实体的回盾设置完毕
    /*
    entity titan = soul.GetTitan() // 获取这个soul的泰坦
    if ( IsValid( titan ) )
    {
        entity boss = titan.GetBossPlayer() // 获取泰坦的主人
        if ( !IsValid( boss ) || !boss.IsPlayer() ) // 如果主人不可用，或主人不为玩家(默认情况下不会这样)
            return // 不考虑停止回盾
    }
    */
    soul.Signal( "StopShieldRegen" ) // 停止可能进行的护盾回复
}

// 功能函数，用于需要的时候启用某个泰坦的回盾
void function StartTitanShieldHealthRegen( entity titan )
{
    entity soul = null // 初值赋为空，如果传入的泰坦是玩家且通过下方的检查没能获得soul实体，不执行回盾
    if ( titan.IsPlayer() ) // 如果传入的是玩家
    {
        if ( !titan.IsTitan() ) // 但这个玩家并不是泰坦
        {
            titan = titan.GetPetTitan() // 尝试获取该玩家的自动泰坦
            if ( IsValid( titan ) ) // 如果自动泰坦可用
                soul = titan.GetTitanSoul() // 获取该自动泰坦的soul实体

        }
        else // 玩家已经是泰坦
            soul = titan.GetTitanSoul()
    }
    else if ( titan.IsNPC() && titan.IsTitan() ) // 若为npc泰坦
        soul = titan.GetTitanSoul()

    if ( IsValid( soul ) ) // 防崩溃，仅在soul不为null的时候尝试再次启用回盾
        thread TitanShieldRegenThink( soul )
}

void function TrackFDHarvesterSpawn()
{
    thread TrackFDHarvesterSpawn_Threaded()
}

void function TrackFDHarvesterSpawn_Threaded()
{
    while ( true )
    {
        while ( !IsValid( fd_harvester.harvester ) ) // 如果采集机实体为null
            WaitFrame() // 等待1tick
        
        // 如果跑到了这里，说明采集机一定被创建了
        AddEntityCallback_OnDamaged( fd_harvester.harvester, OnHarvesterDamaged ) // 添加受伤回调
        fd_harvester.harvester.WaitSignal( "OnDestroy" ) // 等待采集机被摧毁，再次循环
    }
}