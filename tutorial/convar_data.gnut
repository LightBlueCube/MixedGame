global function StoreLastSeekers
global function CanPlayerBecomeSeeker

struct
{
    bool roundCountUpdated = false
} file

void function UpdateHideAndSeekRound()
{
    if ( file.roundCountUpdated ) // 每局比赛只能更新一次
        return
    // 更新回合数
    SetConVarInt( "game_round_count", GetConVarInt( "game_round_count" ) + 1 )
    file.roundCountUpdated = true
}

// =================== 保存玩家数据 =================== //
// 在选取鬼的函数底部调用
// 将被选作鬼的玩家数组传入
void function StoreLastSeekers( array<entity> selectedSeekers )
{
    UpdateHideAndSeekRound() // 更新回合数

    string playerList = GetConVarString( "uid_list" )
    string seekerRoundList = GetConVarString( "last_seeker_round_list" )

    // 首先将所有玩家添加进uid列表
    foreach ( entity player in GetPlayerArray() )
    {
        string playerUID = player.GetUID()
        // 不重复记录同一个玩家的uid
        if ( GetStringArrayFromConVar( "uid_list" ).contains( playerUID ) )
            continue
        AppendStringIntoArrayConVar( "uid_list", playerUID )
        AppendStringIntoArrayConVar( "last_seeker_round_list", "0" ) // 作为鬼的次数，从0开始计算
    }
    // 为被选中当鬼的玩家更新最后当鬼的回合数
    foreach ( entity player in selectedSeekers )
    {
        array<string> playerList = GetStringArrayFromConVar( "uid_list" )
        array<string> seekerRoundList = GetStringArrayFromConVar( "last_seeker_round_list" )
        // 遍历数组，如果保存操作正确的话这里玩家uid与其当鬼的回合数是对应的
        for ( int i = 0; i < playerList.len(); i++ )
        {
            string playerUID = player.GetUID()
            if ( playerList[i] != playerUID )
                continue

            int currentRound = GetConVarInt( "game_round_count" )
            seekerRoundList[i] = string( currentRound ) // 更新玩家最后一次当鬼的回合到当前回合
            StoreStringArrayIntoConVar( "last_seeker_round_list", seekerRoundList ) // 更新数组
        }
    }
}



// =================== 获取玩家数据 =================== //
// 传入一个玩家实体，即可获取其是否已经结束冷却可以当鬼
bool function CanPlayerBecomeSeeker( entity player )
{
    UpdateHideAndSeekRound() // 更新回合数

    string playerUID = player.GetUID()
    array<string> playerList = GetStringArrayFromConVar( "uid_list" )
    array<string> seekerRoundList = GetStringArrayFromConVar( "last_seeker_round_list" )
    if ( !playerList.contains( playerUID ) )
    {
        print( "=========== 玩家躲猫猫数据 ===========" )
        print( "玩家: " + string( player ) )
        print( "初次加入，允许当鬼" )
        print( "=====================================" )
        return true // 玩家还没有被记录当鬼次数，允许当鬼
    }

    // 遍历数组，如果保存操作正确的话这里玩家uid与其当鬼的回合数是对应的
    for ( int i = 0; i < playerList.len(); i++ )
    {
        if ( playerList[i] != playerUID )
            continue

        int playerLastSeekerRound = int( seekerRoundList[i] )
        int currentRound = GetConVarInt( "game_round_count" )
        int seekerCooldown = GetConVarInt( "seeker_cooldown_rounds" )

        print( "=========== 玩家躲猫猫数据 ===========" )
        print( "玩家: " + string( player ) )
        print( "当前回合：" + string( currentRound ) )
        print( "上次当鬼的回合：" + string( playerLastSeekerRound ) )

        if ( currentRound > playerLastSeekerRound + seekerCooldown )
        {
            print( "判断结果：本局可以当鬼" )
            print( "=====================================" )
            return true
        }
        
        break
    }

    print( "=====================================" )
    return false
}



// ================= 将ConVar当作数组使用的功能函数 ================= //
array<string> function GetStringArrayFromConVar( string convar )
{
    return split( GetConVarString( convar ), "," )
}

// 用于更新整个ConVar数组
string function StoreStringArrayIntoConVar( string convar, array<string> arrayToStore )
{
    string builtString = ""
    foreach ( string item in arrayToStore )
    {
        if ( builtString == "" ) // 第一个元素，不添加逗号
            builtString = item
        else // 后续元素，在开头添加一个逗号用来分隔，通过GetStringArrayFromConVar()可以将其转化为数组
            builtString += "," + item
    }

    // 更新ConVar
    SetConVarString( convar, builtString )
    // 返回构造好的字符串
    return builtString
}

// 用于存放单个元素到ConVar数组内
void function AppendStringIntoArrayConVar( string convar, string stringToAppend )
{
    array<string> convarArray = GetStringArrayFromConVar( convar )
    convarArray.append( stringToAppend )
    StoreStringArrayIntoConVar( convar, convarArray )
}