untyped

global function MeleeSyncedTitanShared_Init

// modified here, we add more execution settings
#if SERVER
global function MeleeSyncedTitan_ExecutionRefHasCallback
global function MeleeSyncedTitan_RunCallbackForRef

struct ExecutionSavedLoadout
{
	string primary = "" // primary weapon
	array<string> primaryMods = []
	int primaryAmmo
	int primarySkin
	int primaryCamo
	entity replacedPrimaryEnt = null

	string special = "" // defensive
	array<string> specialMods = []

	string antiRodeo = "" // utility
	array<string> antiRodeoMods = []

	string ordnance = "" // ordnance
	array<string> ordnanceMods = []

	string melee = "" // melee
	array<string> meleeMods = []

	string equipment = "" // core
	array<string> equipmentMods = []

	table<int, float> offhandCooldowns = {} // all offhands cooldown
}

struct
{
	table<string, void functionref( entity, entity )> titanExecutionRefCallback
	table<entity, ExecutionSavedLoadout> titanExecutionSavedLoadout
} file
#endif

function MeleeSyncedTitanShared_Init()
{
	SyncedMeleeChooser chooser = CreateSyncedMeleeChooser( "titan", "titan" )

	chooser.displayMeleePrompt = false

	#if SERVER
		MeleeSyncedTitan_Init()

		// modified here, we add more execution settings
		MeleeSyncedTitan_InitDefaultRefCallbacks()
	#endif

	SyncedMelee action
	action.direction = Vector( 1, 0, 0 )
	action.distance = TITAN_EXECUTION_RANGE
	action.isAttackerRef = false

	AddSyncedMelee( chooser, action )
}

// modified here, we add more execution settings
#if SERVER
void function MeleeSyncedTitan_InitDefaultRefCallbacks()
{
	/* // note:
		execution_northstar_prime, 
		execution_scorch_prime, 
		execution_vanguard, 
		execution_vanguard_kit,
		execution_bt_pilotrip, 
		execution_bt_flip,
		these executions don't use weapons
	*/

	file.titanExecutionRefCallback[ "execution_ion" ] <- Execution_Ion
	file.titanExecutionRefCallback[ "execution_ion_prime" ] <- Execution_Ion_Prime
	file.titanExecutionRefCallback[ "execution_tone" ] <- Execution_Tone
	file.titanExecutionRefCallback[ "execution_tone_prime" ] <- Execution_Tone_Prime
	file.titanExecutionRefCallback[ "execution_ronin" ] <- Execution_Ronin
	file.titanExecutionRefCallback[ "execution_ronin_prime" ] <- Execution_Ronin_Prime
	file.titanExecutionRefCallback[ "execution_northstar" ] <- Execution_Northstar

	file.titanExecutionRefCallback[ "execution_legion" ] <- Execution_Legion
	file.titanExecutionRefCallback[ "execution_legion_prime" ] <- Execution_Legion_Prime
	file.titanExecutionRefCallback[ "execution_scorch" ] <- Execution_Scorch
	

	file.titanExecutionRefCallback[ "execution_bt_kickshoot" ] <- Execution_BT_KickShoot
}

void function Execution_Ion( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_particle_accelerator", 
		"",		// "mp_titanweapon_vortex_shield_ion", won't use during execution
		"",		// "mp_titanability_laser_trip", won't use during execution
		"mp_titanweapon_laser_lite",
		"",		// "melee_titan_punch_ion", won't use during execution
		""		// "mp_titancore_laser_cannon", won't use during execution
	)
}

void function Execution_Ion_Prime( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"",		// "mp_titanweapon_particle_accelerator", won't use during execution
		"",		// "mp_titanweapon_vortex_shield_ion", won't use during execution
		"",		// "mp_titanability_laser_trip", won't use during execution
		"mp_titanweapon_laser_lite",
		"",		// "melee_titan_punch_ion", won't use during execution
		"mp_titancore_laser_cannon"
	)
}

void function Execution_Tone( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_sticky_40mm",
		"",		// "mp_titanaility_particle_wall", won't use during execution
		"",		// "mp_titanability_sonar_pulse", won't use during execution
		"",		// "mp_titanweapon_tracker_rockets", won't use during execution
		"",		// "melee_titan_punch_tobe", won't use during execution
		""		// "mp_titancore_salvo_core", won't use during execution
	)
}

void function Execution_Tone_Prime( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_sticky_40mm",
		"",		// "mp_titanaility_particle_wall", won't use during execution
		"",		// "mp_titanability_sonar_pulse", won't use during execution
		"",		// mp_titanweapon_tracker_rockets, execution actually plays particle effect but not firing weapon
		"",		// "melee_titan_punch_tone", won't use during execution
		""		// "mp_titancore_salvo_core", won't use during execution
	)
}

void function Execution_Ronin( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"",		// "mp_titanweapon_leadwall", won't use during execution
		"",		// "mp_titanability_basic_block", won't use during execution
		"",		// "mp_titanability_phase_dash", won't use during execution
		"",		// "mp_titanweapon_arc_wave", won't use during execution
		"melee_titan_sword",
		""		// "mp_titancore_shift_core", won't use during execution
	)
}

void function Execution_Ronin_Prime( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"",		// "mp_titanweapon_leadwall", won't use during execution
		"",		// "mp_titanability_basic_block", won't use during execution
		"",		// "mp_titanability_phase_dash", won't use during execution
		"",		// "mp_titanweapon_arc_wave", execution actually plays particle effect but not firing weapon
		"melee_titan_sword",
		""		// "mp_titancore_shift_core", won't use during execution
	)
}

void function Execution_Northstar( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_sniper",
		"",		// "mp_titanability_tether_trap", won't use during execution
		"",		// "mp_titanability_hover", won't use during execution
		"",		// "mp_titanweapon_dumbfire_rockets", won't use during execution
		"",		// "melee_titan_punch_northstar", won't use during execution
		""		// "mp_titancore_flight_core", won't use during execution
	)
}

void function Execution_Legion( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_predator_cannon",
		"",		// "mp_titanability_gun_shield", won't use during execution
		"",		// "mp_titanability_ammo_swap", won't use during execution
		"mp_titanability_power_shot",	// won't use during execution, but is required for overwriting other smart ammo ordnances
		"",		// "melee_titan_punch_legion", won't use during execution
		""		// "mp_titancore_siege_mode", won't use during execution
	)
}

void function Execution_Legion_Prime( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"mp_titanweapon_predator_cannon",
		"",		// "mp_titanability_gun_shield", won't use during execution
		"",		// "mp_titanability_ammo_swap", won't use during execution
		"mp_titanability_power_shot",
		"",		// "melee_titan_punch_legion", won't use during execution
		""		// "mp_titancore_siege_mode", won't use during execution
	)
}

void function Execution_Scorch( entity attacker, entity victim )
{
	ReplaceExecutionAttackerLoadout
	( 
		attacker, 
		"",		// "mp_titanweapon_meteor", won't use during execution
		"mp_titanweapon_heat_shield",
		"",		// "mp_titanability_slow_trap", won't use during execution
		"",		// "mp_titanweapon_flame_wall", won't use during execution
		"",		// "melee_titan_punch_scorch", won't use during execution
		""		// "mp_titancore_flame_wave", won't use during execution
	)
}

void function Execution_BT_KickShoot( entity attacker, entity victim )
{
	string xo16 = "mp_titanweapon_xo16_shorty"
	entity xo16Weapon
	array<entity> weapons = attacker.GetMainWeapons()
	if ( weapons.len() > 0 )
	{
		// fakebt version, it has multiple main weapons so do more checks
		// this version allowing bt to use any active weapon, requires refilling ammo
		attacker.ClearOffhand() // so they will switch to last main weapon
		entity activeWeapon = attacker.GetActiveWeapon()
		if ( IsValid( activeWeapon ) && !activeWeapon.IsWeaponOffhand() ) // try to use active main weapon
		{
			// have to try-catch this since not all main weapons can use weapon clip
			try { activeWeapon.SetWeaponPrimaryClipCount( activeWeapon.GetWeaponPrimaryClipCountMax() ) }
			catch( ex ){}
		}
		else // can't find active weapon, try to find xo16
		{
			foreach ( entity weapon in weapons )
			{
				if ( weapon.GetWeaponClassName() == xo16 )
				{
					xo16Weapon = weapon
					break
				}
			}
			if ( IsValid( xo16Weapon ) )
			{
				attacker.SetActiveWeaponByName( xo16 )
				xo16Weapon.SetWeaponPrimaryClipCount( xo16Weapon.GetWeaponPrimaryClipCountMax() ) // don't want to make bt reload while executing
			}

			if ( !IsValid( xo16Weapon ) ) // can't find xo16
				ReplaceExecutionAttackerLoadout( attacker, xo16 )
		}
	}
}

// utility
void function ReplaceExecutionAttackerLoadout( entity guy, string primary = "", string special = "", string antiRodeo = "", string ordnance = "", string melee = "", string equipment = "" )
{
	thread ReplaceExecutionAttackerLoadout_Threaded( guy, primary, special, antiRodeo, ordnance, melee, equipment )
}

// note that doing this will pause titan offhands' cooldowns, and will sometimes regen a wrong amount of cooldown
// use it carefully through MeleeSyncedTitan_SetSoulUseExecutionCallback() to prevent breaking the gameplay
void function ReplaceExecutionAttackerLoadout_Threaded( entity guy, string primary = "", string special = "", string antiRodeo = "", string ordnance = "", string melee = "", string equipment = "" )
{
	ExecutionSavedLoadout savedLoadout
	if ( !( guy in file.titanExecutionSavedLoadout ) )
		file.titanExecutionSavedLoadout[ guy ] <- savedLoadout

	// save current loadout and take them off, so there won't be any issue changing to a dual smart ammo loadout
	bool hasChangedOffhand = false
	// primary weapon
	if ( primary != "" )
	{
		array<entity> mainWeapons = guy.GetMainWeapons()
		if ( mainWeapons.len() > 0 )
		{
			entity weapon = mainWeapons[0]
			if ( IsValid( weapon ) )
			{
				savedLoadout.primary = weapon.GetWeaponClassName()
				savedLoadout.primaryMods = weapon.GetMods()
				try { savedLoadout.primaryAmmo = weapon.GetWeaponPrimaryClipCount() } // some weapon don't have clip so try-catch it
				catch (ex) {}
				savedLoadout.primarySkin = weapon.GetSkin()
				savedLoadout.primaryCamo = weapon.GetCamo()

				weapon.Destroy() // so we can take off exact primary weapon
			}
		}
	}
	// defensive
	if ( special != "" )
	{
		entity weapon = guy.GetOffhandWeapon( OFFHAND_SPECIAL )
		if ( IsValid( weapon ) )
		{
			savedLoadout.special = weapon.GetWeaponClassName()
			savedLoadout.specialMods = weapon.GetMods()
			hasChangedOffhand = true // mark as changed offhand, we will save cooldowns later

			guy.TakeOffhandWeapon( OFFHAND_SPECIAL )
		}
	}
	// utility
	if ( antiRodeo != "" )
	{
		entity weapon = guy.GetOffhandWeapon( OFFHAND_ANTIRODEO )
		if ( IsValid( weapon ) )
		{
			savedLoadout.antiRodeo = weapon.GetWeaponClassName()
			savedLoadout.antiRodeoMods = weapon.GetMods()
			hasChangedOffhand = true // mark as changed offhand, we will save cooldowns later

			guy.TakeOffhandWeapon( OFFHAND_ANTIRODEO )
		}
	}
	// ordnance
	if ( ordnance != "" )
	{
		entity weapon = guy.GetOffhandWeapon( OFFHAND_ORDNANCE )
		if ( IsValid( weapon ) )
		{
			savedLoadout.ordnance = weapon.GetWeaponClassName()
			savedLoadout.ordnanceMods = weapon.GetMods()
			hasChangedOffhand = true // mark as changed offhand, we will save cooldowns later

			guy.TakeOffhandWeapon( OFFHAND_ORDNANCE )
		}
	}
	// melee
	if ( melee != "" )
	{
		entity weapon = guy.GetOffhandWeapon( OFFHAND_MELEE )
		if ( IsValid( weapon ) )
		{
			savedLoadout.melee = weapon.GetWeaponClassName()
			savedLoadout.meleeMods = weapon.GetMods()

			guy.TakeOffhandWeapon( OFFHAND_MELEE )
		}
	}
	// core
	if ( equipment != "" )
	{
		entity weapon = guy.GetOffhandWeapon( OFFHAND_EQUIPMENT )
		if ( IsValid( weapon ) )
		{
			savedLoadout.equipment = weapon.GetWeaponClassName()
			savedLoadout.equipmentMods = weapon.GetMods()

			guy.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
		}
	}
	// cooldowns
	//print( "hasChangedOffhand: " + string( hasChangedOffhand ) )
	if ( hasChangedOffhand && guy.IsPlayer() ) // save cooldowns for players
		savedLoadout.offhandCooldowns = GetWeaponCooldownsForTitanLoadoutSwitch( guy ) // in _loadouts_switch.nut
	
	// apply new weapons after certain weapon being taken, or game might crash because of dual smart ammo weapons
	// primary 
	if ( primary != "" && savedLoadout.primary != "" ) // do saved primary
	{
		entity newWeapon = guy.GiveWeapon( primary )
		// also apply skin to temp weapon
		newWeapon.SetSkin( savedLoadout.primarySkin )
		newWeapon.SetCamo( savedLoadout.primaryCamo )
		guy.SetActiveWeaponByName( primary )
		savedLoadout.replacedPrimaryEnt = newWeapon // for later we clean up
	}
	// defensive
	if ( special != "" && savedLoadout.special != "" ) // do saved defensive
		guy.GiveOffhandWeapon( special, OFFHAND_SPECIAL )
	// utility
	if ( antiRodeo != "" && savedLoadout.antiRodeo != "" ) // do saved utility
		guy.GiveOffhandWeapon( antiRodeo, OFFHAND_ANTIRODEO )
	// ordnance
	if ( ordnance != "" && savedLoadout.ordnance != "" ) // do saved ordnance
		guy.GiveOffhandWeapon( ordnance, OFFHAND_ORDNANCE )
	// melee
	if ( melee != "" && savedLoadout.melee != "" ) // do saved ordnance
		guy.GiveOffhandWeapon( melee, OFFHAND_MELEE )
	// core
	if ( equipment != "" && savedLoadout.equipment != "" ) // do saved ordnance
		guy.GiveOffhandWeapon( equipment, OFFHAND_EQUIPMENT )

	file.titanExecutionSavedLoadout[ guy ] = savedLoadout

	OnThreadEnd
	(
		function(): ( guy )
		{
			if ( IsValid( guy ) )
			{
				ExecutionSavedLoadout savedLoadout = file.titanExecutionSavedLoadout[ guy ]
				bool hasChangedOffhand = false
				// restore weapons
				// primary 
				if ( savedLoadout.primary != "" ) // do savedast primary
				{
					entity replacedWeapon = savedLoadout.replacedPrimaryEnt
					if ( IsValid( IsValid( replacedWeapon ) ) )
						replacedWeapon.Destroy() // so we can take off exact primary weapon
					entity newWeapon = guy.GiveWeapon( savedLoadout.primary, savedLoadout.primaryMods )
					guy.SetActiveWeaponByName( savedLoadout.primary )
					newWeapon.SetSkin( savedLoadout.primarySkin )
					newWeapon.SetCamo( savedLoadout.primaryCamo )
					try { newWeapon.SetWeaponPrimaryClipCount( savedLoadout.primaryAmmo ) } // some weapon don't have clip so try-catch it
					catch (ex) {}
				}
				// defensive
				if ( savedLoadout.special != "" ) // do saved defensive
				{
					guy.TakeOffhandWeapon( OFFHAND_SPECIAL )
					guy.GiveOffhandWeapon( savedLoadout.special, OFFHAND_SPECIAL, savedLoadout.specialMods )
					hasChangedOffhand = true // mark as changed offhand, we will apply cooldowns later
				}
				// utility
				if ( savedLoadout.antiRodeo != "" ) // do saved utility
				{
					guy.TakeOffhandWeapon( OFFHAND_ANTIRODEO )
					guy.GiveOffhandWeapon( savedLoadout.antiRodeo, OFFHAND_ANTIRODEO, savedLoadout.antiRodeoMods )
					hasChangedOffhand = true // mark as changed offhand, we will apply cooldowns later
				}
				// ordnance
				if ( savedLoadout.ordnance != "" ) // do saved ordnance
				{
					guy.TakeOffhandWeapon( OFFHAND_ORDNANCE )
					guy.GiveOffhandWeapon( savedLoadout.ordnance, OFFHAND_ORDNANCE, savedLoadout.ordnanceMods )
					hasChangedOffhand = true // mark as changed offhand, we will apply cooldowns later
				}
				// melee
				if ( savedLoadout.melee != "" ) // do saved ordnance
				{
					guy.TakeOffhandWeapon( OFFHAND_MELEE )
					guy.GiveOffhandWeapon( savedLoadout.melee, OFFHAND_MELEE, savedLoadout.meleeMods )
				}
				// core
				if ( savedLoadout.equipment != "" ) // do saved ordnance
				{
					guy.TakeOffhandWeapon( OFFHAND_EQUIPMENT )
					guy.GiveOffhandWeapon( savedLoadout.equipment, OFFHAND_EQUIPMENT, savedLoadout.equipmentMods )
				}
				// cooldowns
				//print( "hasChangedOffhand: " + string( hasChangedOffhand ) )
				if ( hasChangedOffhand && guy.IsPlayer() ) // apply cooldowns for players
					SetWeaponCooldownsForTitanLoadoutSwitch( guy, savedLoadout.offhandCooldowns ) // in _loadouts_switch.nut
			}
		}
	)

	guy.EndSignal( "OnDestroy" )
	guy.EndSignal( "OnDeath" )
	// signals from FirstPersonSequence()
	//guy.EndSignal( "NewFirstPersonSequence" )
	guy.EndSignal( "ScriptAnimStop" )
	guy.WaitSignal( "SyncedMeleeComplete" ) // attacker's signal
}

bool function MeleeSyncedTitan_ExecutionRefHasCallback( string ref )
{
	//PrintFunc()
	if ( ref in file.titanExecutionRefCallback )
	{
		//print( "ref has executionCallback!" )
		return true
	}
	return false
}

void function MeleeSyncedTitan_RunCallbackForRef( string ref, entity attacker, entity target )
{
	if ( !( ref in file.titanExecutionRefCallback ) )
		return
	//PrintFunc()
	file.titanExecutionRefCallback[ ref ]( attacker, target )
}
#endif