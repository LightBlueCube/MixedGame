global function Modded_Gamemode_Kraber_Init

const array<string> TACTICALS_LIST = 
[
    "mp_ability_heal", 
    "mp_ability_grapple", 
    "mp_ability_holopilot", 
    "mp_weapon_grenade_sonar"
]

void function Modded_Gamemode_Kraber_Init()
{
    SetHackedDeathEnabled( true ) // powerful thing, no any screen blur and flash on death

    // enable normal settings, since this modifier didn't change so many things
    Nessie_Normal_Settings_NonTitan_Init()

    // gamemode_kraber specific settings
    SetSyncedMeleeNoLimit( true ) // enable execution
	SetShouldFUCKOFFAWALL( true ) // no awall allowed
    SetOverridesBaseForcedPlayList( true ) // overrides base forced playlist
    SetWeaponDropsEnabled( false ) // don't let players pickup other kraber
    SetBattleChatterEnableToAll( true ) // play chatter to their enemies
    
    Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
	//AddCallback_OnPlayerRespawned( OnPlayerRespawned ) // respawn not giving loadout, which will mess things up
	AddCallback_GameStateEnter( eGameState.Playing, OnGameStart )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
	AddCallback_GameStateEnter( eGameState.Postmatch, OnGamePostmatch )
}

void function OnPlayerRespawned( entity player )
{
	GiveKraber( player )
    thread DisableGrappleContent( player )
    thread DisableBoostBar( player )
}

void function OnPlayerChangeLoadout( entity player , PilotLoadoutDef p)
{
	GiveKraber( player )
    thread DisableBoostBar( player )
}

void function OnGameStart()
{
    foreach( entity player in GetPlayerArray() )
        thread DisableBoostBar( player ) // starting will re-enable player's boost, lets set it to disable again
}

void function OnGamePostmatch()
{
    thread KraberForcedPlaylist()
}

void function GiveKraber( entity player )
{
    player.TakeWeaponNow( "melee_pilot_emptyhanded" )

	foreach ( int enum_, entity weapon in player.GetMainWeapons() ) //_enum: loop count
    {
        if( weapon.GetWeaponClassName() == "mp_weapon_defender" )
        {
            if( weapon.HasMod( "extended_ammo" ) )
                weapon.RemoveMod( "extended_ammo" )
            weapon.AddMod( "at_unlimited_ammo" )
        }
        if( weapon.GetWeaponClassName() != "mp_weapon_sniper" && weapon.GetWeaponClassName() != "mp_weapon_defender" )
        {
            player.TakeWeaponNow( weapon.GetWeaponClassName() )

            switch ( enum_ ) 
            {
                case 0:
                    player.GiveWeapon( "mp_weapon_sniper", ["pas_fast_ads", "extended_ammo"] )
                    break
                case 1:
                    break
                case 2:
                    break
                default:
                    break
            }
        }
    }

	foreach( entity weapon in player.GetOffhandWeapons() )
	{
		if( !TACTICALS_LIST.contains( weapon.GetWeaponClassName() ) )
			player.TakeWeaponNow( weapon.GetWeaponClassName() )
	}
    if( !IsValid( player.GetOffhandWeapon( OFFHAND_SPECIAL ) ) )
        player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL )
    //player.GiveOffhandWeapon( "mp_weapon_frag_grenade", OFFHAND_ORDNANCE, ["nessie_grenade"] )
}

void function DisableGrappleContent( entity player )
{
    WaitFrame() // wait for other respawn functions( especially hacked death ) to set up
    if( IsAlive( player ) )
        player.kv.contents = (int(player.kv.contents) | CONTENTS_NOGRAPPLE) // make player unable to be grappled
}

void function DisableBoostBar( entity player )
{
    WaitFrame() // wait for player earn meter being set up
    if( IsValid( player ) )
        PlayerEarnMeter_SetMode( player, eEarnMeterMode.DISABLED )
}

void function KraberForcedPlaylist()
{
    string curMapName = GetMapName()
    wait 5
    switch( curMapName )
    {
        case "mp_glitch":
            ServerCommand( "map mp_colony02" )
            break
        case "mp_colony02":
            ServerCommand( "map mp_wargames" )
            break
        case "mp_wargames":
            ServerCommand( "map mp_eden" )
            break
        case "mp_eden":
            ServerCommand( "map mp_drydock" )
            break
        case "mp_drydock":
            ServerCommand( "map mp_black_water_canal" )
            break
        case "mp_black_water_canal":
            ServerCommand( "map mp_thaw" )
            break
        case "mp_thaw":
            ServerCommand( "map mp_grave" )
            break
        case "mp_grave":
            ServerCommand( "map mp_homestead" )
            break
        case "mp_homestead":
            ServerCommand( "map mp_forwardbase_kodai" )
            break
        case "mp_forwardbase_kodai":
            ServerCommand( "map mp_angel_city" )
            break
        case "mp_angel_city":
            ServerCommand( "map mp_glitch" )
            break
        default:
            ServerCommand( "map mp_glitch" )
    }
}
