untyped // for player.GiveExtraWeaponMod()
global function Modded_Gamemode_Bleedout_Init

// things below should be in riff
/*
riff_player_bleedout 1
player_bleedout_forceHolster 1
player_bleedout_forceDeathOnTeamBleedout 0
player_bleedout_bleedoutTime 20
player_bleedout_firstAidTime 2
player_bleedout_firstAidTimeSelf 6
player_bleedout_firstAidHealPercent 0.4
player_bleedout_aiBleedingPlayerMissChance 0.25

// abandoned
const float GAMEMODE_BLEEDOUT_TIME = 15
const float GAMEMODE_FIRSTAID_TIME = 2
const float GAMEMODE_FIRSTAID_TIME_SELF = 6
const float GAMEMODE_FIRSTAID_HEAL_PERCENT = 0.4
const float GAMEMODE_AI_BLEEDING_PLAYER_MISS_CHANCE = 0.5
const bool GAMEMODE_FORCE_WEAPON_HOLSTER = true
const bool GAMEMODE_DEATH_ON_TEAM_BLEEDOUT = false
*/
// fake apex loadouts
const bool BLEEDOUT_MODE_ENABLE_SECOND_LOADOUT = false

const float BLEEDOUT_MODE_SHIELD_BATTERY_USETIME = 2.1 // remember try to avoid sound issue
const float BLEEDOUT_MODE_AMPED_SHIELD_BATTERY_USETIME = 7.0
const int BLEEDOUT_MODE_SHIELD_BATTERY_REGEN_AMOUNT = 125
const int BLEEDOUT_MODE_REVIVING_FRIENDLY_SHIELD_REWARD = 80
const int BLEEDOUT_MODE_EXECUTION_SHIELD_REWARD = 80
const int BLEEDOUT_MODE_AMPED_SHIELD_BATTERY_REGEN_AMOUNT = 300

const int BLEEDOUT_MODE_HEALTH = 100
const int BLEEDOUT_MODE_SHIELD_HEALTH = 125

const float BLEEDOUT_MODE_ELIMINATE_PILOT_EARNED_VALUE = 0.1
const float BLEEDOUT_MODE_ELIMINATE_PILOT_OWNED_VALUE = 0.3
const float BLEEDOUT_MODE_PILOT_ASSIST_EARNED_VALUE = 0.3
const float BLEEDOUT_MODE_PILOT_ASSIST_OWNED_VALUE = 0.0

struct
{
    table< string, bool > useFakeApexLoadout // player's uid, whether to use
} file

void function Modded_Gamemode_Bleedout_Init()
{
    Rodeo_SetBatterySkinRandom( false ) // from _rodeo_titan.gnut
	
    Bleedout_EnableExecutingBleedingPlayer( true ) // funny
	//Bleedout_SetIncapShieldInvulnerable( true ) // op
	//Bleedout_AllowInterruptSelfRes( false ) // meaning you can choose weather allow teammate revive you, complicated
	
    //SetSyncedMeleeNoLimit( true ) // so you can execute anywhere
    //Rodeo_SetBatteryThrowEnabled( true ) // messed up
	
    SetBurnCardAllBattery( true ) // from _burnmeter.gnut
	
    SetAltPilotChance( 2 ) // higher chance to change model, 50%
    SetShouldAlsoFuckOffPOV( false ) // for something
    SetShouldFUCKOFFCLOAK( true ) // fuck them
	
    SetPlayerDeathsHidden( true ) // no sounds for deaths, and won't count deaths by default
    SetWeaponDropsEnabled( false ) // bleedout uses USE so much, don't let players drop weapons
    ScoreEvent_ForceUsePilotEliminateEvent( true ) // from _score.nut, do special "Eliminate Pilot" Score event
    
    // from pilot_shield_battery.gnut, shield battery main mechanic
    SetPilotBatteryUsageAllowed( true )
    SetShieldBatteryInputOverwritesBoost( true )
    SetShieldBatteryUseTime( BLEEDOUT_MODE_SHIELD_BATTERY_USETIME, BLEEDOUT_MODE_AMPED_SHIELD_BATTERY_USETIME )
    SetShieldBatteryRegenAmount( BLEEDOUT_MODE_SHIELD_BATTERY_REGEN_AMOUNT, BLEEDOUT_MODE_AMPED_SHIELD_BATTERY_REGEN_AMOUNT )

    // don't make the intro annoying
    SetWaitingForPlayersMaxDuration( 10.0 )
    ClassicMP_SetLevelIntro( ClassicMP_ShorterDropshipIntro_Setup, DROPSHIP_INTRO_LENGTH_SHORTER )

    Bleedout_AddCallback_OnPlayerStartBleedout( BleedoutMode_OnPlayerDowned )
    Bleedout_AddCallback_OnPlayerGiveFirstAid( BleedoutMode_OnPlayerRevived )

    //AddCallback_GameStateEnter( eGameState.Playing, SetBleedoutState )
    AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_PlayerClassChanged( OnPlayerClassChanged )
    AddCallback_OnPlayerRespawned( OnPlayerRespawned )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerGetsPilotLoadout )
    AddCallback_OnPlayerKilled( OnPlayerKilled )
    AddCallback_OnTouchHealthKit( "item_titan_battery", OnTouchBatteryPack )

    // more score added, why it can only be done midgame?
    AddCallback_GameStateEnter( eGameState.Playing, SetBleedoutModeScoreEvent )
    //ScoreEvent_SetEarnMeterValues( "EliminatePilot", BLEEDOUT_MODE_ELIMINATE_PILOT_EARNED_VALUE, BLEEDOUT_MODE_ELIMINATE_PILOT_OWNED_VALUE )

    RegisterSignal( "GiveMeleeAfterGracePeriod" )
    /* // do these in riff
    Riff_ForcePlayerBleedout( ePlayerBleedout.Enabled )
    BleedoutShared_Init( 
        GAMEMODE_BLEEDOUT_TIME, 
        GAMEMODE_FIRSTAID_TIME,
	    GAMEMODE_FIRSTAID_TIME_SELF, 
        GAMEMODE_FIRSTAID_HEAL_PERCENT,
	    GAMEMODE_AI_BLEEDING_PLAYER_MISS_CHANCE, 
        GAMEMODE_FORCE_WEAPON_HOLSTER,
	    GAMEMODE_DEATH_ON_TEAM_BLEEDOUT 
        )
    Bleedout_Init()
    */

    Riff_ForceTitanAvailability( eTitanAvailability.Never )
}

void function SetBleedoutState()
{
    

    //BleedoutShared_Init( 30, 4,8, 0.4,0.5, true,true )
}

void function OnClientConnected( entity player )
{
    file.useFakeApexLoadout[ player.GetUID() ] <- false
    if( BLEEDOUT_MODE_ENABLE_SECOND_LOADOUT )
        AddButtonPressedPlayerInputCallback( player, IN_MELEE, SwitchLoadoutType )
    //AddButtonPressedPlayerInputCallback( player, IN_USE, GetShieldLeft )
    //AddButtonPressedPlayerInputCallback( player, IN_USE_AND_RELOAD, GetShieldLeft )
}

void function OnPlayerClassChanged( entity player )
{
    print( "Running OnPlayerClassChanged()" )
    thread Bleedout_HealthRegenThink( player )
}

void function OnPlayerRespawned( entity player )
{
    if( !BLEEDOUT_MODE_ENABLE_SECOND_LOADOUT )
        return
    if( !file.useFakeApexLoadout[player.GetUID()] )
        SendHudMessage( player, "当前装备: 原版\n按 近战 切换至伪apex技能", -1, -0.3, 0, 255, 255, 255, 0, 10, 0 )
    else if( file.useFakeApexLoadout[player.GetUID()] )
        SendHudMessage( player, "当前装备: 伪apex技能\n按 近战 切换至原版", -1, -0.3, 0, 255, 255, 255, 0, 10, 0 )
}

void function OnPlayerGetsPilotLoadout( entity player, PilotLoadoutDef p )
{
    // FUCKOFFCLOAK( player )
    // don't enable EverythingNessy_Init(), will conflict, use it's function instead
    ClearNessy( player ) 
	thread SpawnNessyOutfit( player ) // become cuter!

    //entity meleeWeapon = player.GetOffhandWeapon( OFFHAND_MELEE )
    //if( IsValid( meleeWeapon ) )
    //    meleeWeapon.AddMod( "pushback_melee" )

    for ( int i = 0; i <= OFFHAND_MELEE; i++ ) // for better sloting
    {
        entity nowWeapon = player.GetOffhandWeapon( i )
        if( IsValid( nowWeapon ))
        {
            string className = nowWeapon.GetWeaponClassName()
            if( className == "mp_ability_cloak" )
            {
                player.TakeWeaponNow( className )
                player.GiveOffhandWeapon( "mp_ability_grapple", i )
            }
            else if( className == "mp_weapon_deployable_cover" )
            {
                player.TakeWeaponNow( className )
                player.GiveOffhandWeapon( "mp_weapon_hard_cover", i, ["hard_cover_always"] )
            }
        }
    }

    SyncedMelee_Disable( player )
    player.SetMaxHealth( BLEEDOUT_MODE_HEALTH )
    player.SetHealth( BLEEDOUT_MODE_HEALTH )
    player.SetShieldHealthMax( BLEEDOUT_MODE_SHIELD_HEALTH )
    player.SetShieldHealth( BLEEDOUT_MODE_SHIELD_HEALTH )

	player.GiveExtraWeaponMod( "bleedout_balance" )
	player.GiveExtraWeaponMod( "pushback_melee" )
	player.GiveExtraWeaponMod( "fuckoff_ordnance" )

    if( file.useFakeApexLoadout[player.GetUID()] ) // apex loadout players
    {
        AltPilot_ReplacePilotModel( player )
        GiveFakeApexLoadout( player )
    }
    if( BLEEDOUT_MODE_ENABLE_SECOND_LOADOUT )
        thread GiveMeleeAfterGracePeriod( player )
    else
        thread DelayedCheckMelee( player )

    // charge rifle chargehack specific!
    thread DelayedRestoreQuickChargeRifle( player )
}

void function DelayedRestoreQuickChargeRifle( entity player )
{
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )

    WaitFrame() // wait for weapons ready
    foreach ( entity weapon in player.GetMainWeapons() )
    {
        if ( weapon.HasMod( "quick_charge" ) )
            weapon.RemoveMod( "bleedout_balance" ) // remove it's damage reduction
    }
}

void function GiveMeleeAfterGracePeriod( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.Signal( "GiveMeleeAfterGracePeriod" )
    player.EndSignal( "GiveMeleeAfterGracePeriod" )
    player.TakeOffhandWeapon( OFFHAND_MELEE )

    while( true )
    {
        if( !( expect bool( player.s.inGracePeriod ) ) )
            break
        WaitFrame()
    }
	
    GivePlayerSpecialMelee( player )
}

void function DelayedCheckMelee( entity player )
{
	player.TakeOffhandWeapon( OFFHAND_MELEE )
    WaitFrame()
    if( IsAlive( player ) )
    {
        GivePlayerSpecialMelee( player )
    }
}

void function GivePlayerSpecialMelee( entity player )
{
	string meleeToGive = CoinFlip() ? "melee_pilot_kunai" : "melee_pilot_sword"
	if( !IsValid( player.GetOffhandWeapon( OFFHAND_MELEE ) ) )
        player.GiveOffhandWeapon( meleeToGive, OFFHAND_MELEE )
}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
    ClearNessy( victim )
    int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
    entity attacker = DamageInfo_GetAttacker( damageInfo )
    // reward for executions
    if( !IsValid( attacker ) )
        return
    if( damageSourceID == eDamageSourceId.human_execution && attacker.IsPlayer() )
    {
        if( attacker.GetShieldHealth() == attacker.GetShieldHealthMax() ) // shield full!
            return
        entity shieldFXHandle = StartParticleEffectOnEntity_ReturnEntity( attacker, GetParticleSystemIndex( $"P_xo_armor_body_CP" ), FX_PATTACH_POINT_FOLLOW, attacker.LookupAttachment( "CHESTFOCUS" ) )
        SetTeam( shieldFXHandle, attacker.GetTeam() )
        shieldFXHandle.SetOwner( attacker )
        EffectSetControlPointVector( shieldFXHandle, 1, <115, 247, 255> )
        
        int currentShieldHealth = attacker.GetShieldHealth()
        int shieldToRestore = int( min( attacker.GetShieldHealthMax() - currentShieldHealth, BLEEDOUT_MODE_EXECUTION_SHIELD_REWARD ) )
        if( shieldToRestore <= BLEEDOUT_MODE_EXECUTION_SHIELD_REWARD ) // consider shield is full, not showing a extra fx
            shieldFXHandle.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY | ENTITY_VISIBLE_TO_FRIENDLY
        attacker.SetShieldHealth( min( attacker.GetShieldHealthMax(), attacker.GetShieldHealth() + shieldToRestore ) )
        SendHudMessage( attacker, "处决一名敌人, 已回复" + string(shieldToRestore) + "点护盾! ", -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )
        MessageToPlayer( attacker, eEventNotifications.VANGUARD_ShieldGain, attacker )
    }
    // abandoned, only using emergency batteries
    /*
    entity battery = Rodeo_CreateBatteryPack()
    if( IsValid( battery ) )
    {
        battery.SetOrigin( victim.EyePosition() )
        battery.SetVelocity( < 0,0,1 > )
    }
    */
}

bool function OnTouchBatteryPack( entity player, entity batteryPack )
{
    if( !IsAlive( player ) )
        return false
    //if( IsValid( GetBatteryOnBack( player ) ) ) // player carring a battery
    //    return false
    // HACKED FIX!
    if( GetPlayerLastShieldBatteryUsedTime( player ) >= Time() - 1.0 ) // modified function in pilot_shield_battery.gnut
    {
        //print( GetPlayerLastShieldBatteryUsedTime( player ) >= Time() - 1.0 )    
        return false
    }
    SendHudMessage( player, "按 强化 按键\n使用护盾电池", -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )

    //Basically always return false since we don't want the battery pack to go away when being touched. ApplyBatteryToTitan() etc will deal with lifetime of battery
	return false
}

void function SetBleedoutModeScoreEvent()
{
    ScoreEvent_SetEarnMeterValues( "EliminatePilot", BLEEDOUT_MODE_ELIMINATE_PILOT_EARNED_VALUE, BLEEDOUT_MODE_ELIMINATE_PILOT_OWNED_VALUE )
    ScoreEvent_SetEarnMeterValues( "PilotAssist", BLEEDOUT_MODE_PILOT_ASSIST_EARNED_VALUE, BLEEDOUT_MODE_PILOT_ASSIST_OWNED_VALUE )
}

void function BleedoutMode_OnPlayerDowned( entity player, entity attakcer, var damageInfo )
{
    print( "Running OnPlayerDowned()" )
	//player.Signal( "StopHealthRegenThink" )
    player.SetMaxHealth( BLEEDOUT_MODE_HEALTH * 5 )
    player.SetHealth( BLEEDOUT_MODE_HEALTH )
}

void function BleedoutMode_OnPlayerRevived( entity playerToRes, entity playerHealer )
{
    print( "Running OnPlayerRevived()" )
	//player.Signal( "StopHealthRegenThink" )
    playerToRes.SetMaxHealth( BLEEDOUT_MODE_HEALTH )
    playerToRes.p.lastDamageTime = Time()

    // do a reward for playerHealer
    if( playerHealer.GetShieldHealth() == playerHealer.GetShieldHealthMax() ) // shield full!
        return
    if( playerHealer == playerToRes ) // selfRes
        return
    entity shieldFXHandle = StartParticleEffectOnEntity_ReturnEntity( playerHealer, GetParticleSystemIndex( $"P_xo_armor_body_CP" ), FX_PATTACH_POINT_FOLLOW, playerHealer.LookupAttachment( "CHESTFOCUS" ) )
    SetTeam( shieldFXHandle, playerHealer.GetTeam() )
    shieldFXHandle.SetOwner( playerHealer )
    EffectSetControlPointVector( shieldFXHandle, 1, <115, 247, 255> )
    
    int currentShieldHealth = playerHealer.GetShieldHealth()
    int shieldToRestore = int( min( playerHealer.GetShieldHealthMax() - currentShieldHealth, BLEEDOUT_MODE_REVIVING_FRIENDLY_SHIELD_REWARD ) )
    if( shieldToRestore <= BLEEDOUT_MODE_REVIVING_FRIENDLY_SHIELD_REWARD ) // consider shield is full, not showing a extra fx
        shieldFXHandle.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY | ENTITY_VISIBLE_TO_FRIENDLY
    playerHealer.SetShieldHealth( min( playerHealer.GetShieldHealthMax(), playerHealer.GetShieldHealth() + shieldToRestore ) )
    SendHudMessage( playerHealer, "复活一名队友, 已回复" + string(shieldToRestore) + "点护盾! ", -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )
    MessageToPlayer( playerHealer, eEventNotifications.VANGUARD_ShieldGain, playerHealer )
}

void function SwitchLoadoutType( entity player )
{
    if( !Loadouts_CanGivePilotLoadout( player ) )
        return

    string uid = player.GetUID()

    if( !file.useFakeApexLoadout[uid] )
    {
        file.useFakeApexLoadout[uid] = true
        SendHudMessage( player, "当前装备: 伪apex技能\n按 近战 切换至原版", -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )
        Loadouts_TryGivePilotLoadout( player )
    }
    else if( file.useFakeApexLoadout[uid] )
    {
        file.useFakeApexLoadout[uid] = false
        SendHudMessage( player, "当前装备: 原版\n按 近战 切换至伪apex技能", -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )
        Loadouts_TryGivePilotLoadout( player )
    }
}

void function GiveFakeApexLoadout( entity player )
{
    string tacticalName = player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName()
    string ordnanceName = player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName()

    if( ordnanceName == "mp_weapon_grenade_gravity" )
        GiveReplacementOrdnance( player )

    player.TakeWeaponNow( tacticalName )
    player.TakeWeaponNow( ordnanceName )

    switch( tacticalName )
    {
        case "mp_weapon_hard_cover":
            player.GiveOffhandWeapon( "mp_weapon_hard_cover", OFFHAND_SPECIAL, ["gibraltar_shield"] )
            break
        case "mp_ability_heal":
			player.GiveOffhandWeapon( "mp_ability_heal", OFFHAND_SPECIAL, ["jump_pad"] )
            break
		case "mp_ability_grapple":
			player.GiveOffhandWeapon( "mp_ability_grapple", OFFHAND_SPECIAL, ["zipline_gun"] )
            break
		case "mp_ability_holopilot":
			player.GiveOffhandWeapon( "mp_ability_holopilot", OFFHAND_SPECIAL, ["holoshift"] )
            break
		case "mp_ability_shifter":
            player.GiveOffhandWeapon( "mp_ability_shifter", OFFHAND_SPECIAL, ["wraith_portal", "amped_tacticals"] )
            break
        case "mp_weapon_grenade_sonar":
            player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_SPECIAL, ["gravity_lift"] )
            break
    }

    switch( ordnanceName )
    {
        case "mp_weapon_frag_grenade":
            player.GiveOffhandWeapon( "mp_titanability_tether_trap", OFFHAND_ORDNANCE, ["pilot_tether"] )
            break
        case "mp_weapon_grenade_emp":
			player.GiveOffhandWeapon( "mp_weapon_arc_trap", OFFHAND_ORDNANCE, ["limited_arc_trap", "multiplayer_arc_trap"] )
            break
        case "mp_weapon_thermite_grenade":
			player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", OFFHAND_ORDNANCE, ["flamewall_grenade"] )
            break
        case "mp_weapon_grenade_electric_smoke":
			player.GiveOffhandWeapon( "mp_titanability_slow_trap", OFFHAND_ORDNANCE, ["gas_trap"] )
            break
        case "mp_weapon_satchel":
            player.GiveOffhandWeapon( "mp_weapon_satchel", OFFHAND_ORDNANCE, ["proximity_mine"] )
            break
        default:
            player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", OFFHAND_ORDNANCE )
    }
}

void function GiveReplacementOrdnance( entity player )
{
    string tacticalName = player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName()
    string ordnanceName = player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName()
        
    player.TakeWeaponNow( ordnanceName )
    switch( tacticalName )
    {
        case "mp_ability_grapple":
            player.GiveOffhandWeapon( "mp_titanability_tether_trap", OFFHAND_ORDNANCE, ["pilot_tether"] )
            break
        case "mp_ability_heal":
			player.GiveOffhandWeapon( "mp_weapon_arc_trap", OFFHAND_ORDNANCE, ["limited_arc_trap", "multiplayer_arc_trap"] )
            break
        case "mp_weapon_hard_cover":
			player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", OFFHAND_ORDNANCE, ["flamewall_grenade"] )
            break
        case "mp_ability_shifter":
			player.GiveOffhandWeapon( "mp_titanability_slow_trap", OFFHAND_ORDNANCE, ["gas_trap"] )
            break
        case "mp_ability_holopilot":
            player.GiveOffhandWeapon( "mp_weapon_satchel", OFFHAND_ORDNANCE, ["proximity_mine"] )
            break
        default:
            player.GiveOffhandWeapon( "mp_weapon_thermite_grenade", OFFHAND_ORDNANCE )
    }
}

void function GetShieldLeft( entity player )
{
    SendHudMessage( player, "剩余护盾值: " + string( player.GetShieldHealth() ) + " / " + string( player.GetShieldHealthMax() ), -1, -0.3, 0, 255, 255, 255, 0, 2, 0 )
}