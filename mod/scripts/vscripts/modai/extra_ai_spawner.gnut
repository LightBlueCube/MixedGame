untyped

global function ExtraAISpawner_Init

global function ExtraSpawner_SpawnTitanBT

global function ExtraSpawner_SpawnNPC
global function ExtraSpawner_SpawnTitanRandom
global function ExtraSpawner_SpawnGunShip

global function ExtraSpawner_SpawnPilotCanEmbark
global function ExtraSpawner_SpawnBTWithCooper
// these settings should be done in prematch, don't do it right after levelLoad
global function ExtraSpawner_SetPilotWeapons
// unused, unstable
//global function ExtraSpawner_SpawnPilotWithTitan

global function ExtraSpawner_SpawnCarePackageToGetWeapons
// these settings should be done in prematch, don't do it right after levelLoad
global function ExtraSpawner_SetCarePackageWeapons
global function ExtraSpawner_SetCarePackageWeaponMods
global function ExtraSpawner_SetCarePackageWeaponModsMultiple
// unused, unstable
//global function ExtraSpawner_SpawnDropPodWithWeapons
//global function ExtraSpawner_SpawnReaperDorpsWeapons

global function ExtraSpawner_SpawnReaperCanLaunchTicks


/*
//const array<string> WEAPONS = [ "mp_weapon_alternator_smg", "mp_weapon_arc_launcher", "mp_weapon_autopistol", "mp_weapon_car", "mp_weapon_defender", "mp_weapon_dmr", "mp_weapon_doubletake", "mp_weapon_epg", "mp_weapon_esaw", "mp_weapon_g2", "mp_weapon_hemlok", "mp_weapon_hemlok_smg", "mp_weapon_lmg", "mp_weapon_lstar", "mp_weapon_mastiff", "mp_weapon_mgl", "mp_weapon_pulse_lmg", "mp_weapon_r97", "mp_weapon_rocket_launcher", "mp_weapon_rspn101", "mp_weapon_rspn101_og", "mp_weapon_semipistol", "mp_weapon_shotgun", "mp_weapon_shotgun_pistol", "mp_weapon_smr", "mp_weapon_sniper", "mp_weapon_softball", "mp_weapon_vinson", "mp_weapon_wingman", "mp_weapon_wingman_n" ]
const array<string> MODS = [ "pas_run_and_gun", "threat_scope", "pas_fast_ads", "pas_fast_reload", "extended_ammo", "pas_fast_swap" ]

const table< string, int > ANTITITANS = { ["mp_weapon_arc_launcher"]= 0, ["mp_weapon_mgl"]= 1, ["mp_weapon_rocket_launcher"]= 2 }
const table< string, int > DEFENDER = { ["mp_weapon_defender"]= 0 }
const table< string, int > PISTOLS = { ["mp_weapon_autopistol"]= 0, ["mp_weapon_semipistol"]= 1, ["mp_weapon_smart_pistol"]= 2, ["mp_weapon_wingman"]= 3, ["mp_weapon_wingman_n"]= 4, ["mp_weapon_shotgun_pistol"]= 5 }
const table< string, int > SNIPERS = { ["mp_weapon_dmr"]= 0, ["mp_weapon_sniper"]= 1, ["mp_weapon_doubletake"]= 2 }
const table< string, int > LAUNCHERS = { ["mp_weapon_smr"]= 0, ["mp_weapon_epg"]= 1, ["mp_weapon_pulse_lmg"]= 2, ["mp_weapon_softball"]= 3 }

const array< string > ANTITAN_MODS = [ "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > DEFENDER_MODS = [ "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > PISTOL_MODS = [ "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > SNIPER_MODS = [ "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
const array< string > LAUNCHER_MODS = [ "pas_run_and_gun", "extended_ammo" ]//[ "pas_run_and_gun", "pas_fast_ads", "pas_fast_swap", "pas_fast_reload", "extended_ammo" ]
*/

// these are no need to change
const asset CAREPACKAGE_MODEL = $"models/vehicle/escape_pod/escape_pod.mdl"

// basically medium animation pilots!
const array<asset> NPC_PILOT_ALLOWED_MODELS = 
[ 
	$"models/humans/pilots/pilot_medium_stalker_m.mdl", 
	$"models/humans/pilots/pilot_medium_stalker_f.mdl", 
	$"models/humans/pilots/pilot_medium_geist_m.mdl", 
	$"models/humans/pilots/pilot_medium_geist_f.mdl", 
	$"models/humans/pilots/pilot_medium_reaper_m.mdl", 
	$"models/humans/pilots/pilot_medium_reaper_f.mdl",  
	/* // now leaving only mp pilot models, for others maybe spawn with their unique titans( like jack in bt, ash in ronin )
	$"models/humans/grunts/mlt_grunt_lmg.mdl", 
	$"models/humans/grunts/imc_grunt_lmg.mdl", 
	$"models/humans/grunts/imc_grunt_shield_captain.mdl", 
	$"models/Humans/heroes/imc_hero_ash.mdl", 
	$"models/Humans/heroes/imc_hero_blisk.mdl", 
	$"models/humans/heroes/mlt_hero_jack.mdl", 
	$"models/humans/heroes/mlt_hero_sarah.mdl", 
	$"models/humans/pilots/sp_medium_geist_f.mdl", 
	$"models/humans/pilots/sp_medium_reaper_m.mdl", 
	$"models/humans/pilots/sp_medium_stalker_m.mdl" 
	*/
]

struct
{
	array<string> pilotMainWeapons = []

	/* // unused, pilots don't switch weapons
	array<string> pilotAntiTitanWeapons = 
	[ 
		"mp_weapon_defender", 
		"mp_weapon_mgl" 
	]
	*/

	array<entity> usedplayer = []

	array<string> carePackageWeapons
	// now allowing every weapon to have a custom mod
	table< string, array<string> > carePackageWeaponMods
} file

void function ExtraAISpawner_Init()
{
	InitCarePackageDefaultSettings()
	ProwlerPrecache()
	RegisterSignal( "PlayerUsedCarePackage" ) // for some grunt mode classes regen their ability?
	PrecacheModel( CAREPACKAGE_MODEL )
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )
	// this should be in _ai_pilots.gnut
	//RegisterSignal( "ForceStartMove" ) // the signal as been deleted
	
	if( GetMapName() != "mp_lobby" ) // prevent unable to enter lobby
	{
		AddCallback_OnNpcPilotBecomesTitan( OnNpcPilotBecomesTitan )
		AddCallback_OnNpcTitanBecomesPilot( OnNpcTitanBecomesPilot )
	}

	// if npc titan has a pilot inside, reset it's melee damageSourceId
	AddDamageCallbackSourceID( eDamageSourceId.auto_titan_melee, ApplyNormalMeleeIdToNPCTitan )

	// for debug
	AddClientCommandCallback( "spawnpilot", ClientCommand_SpawnPilotCanEmbark )
	//AddClientCommandCallback( "spawnassassin",  ) // WIP
	//AddClientCommandCallback( "spawnreaper", ClientCommand_SpawnReaperCanLaunchTicks )
	//AddClientCommandCallback( "spawngunship", ClientCommand_SpawnGunShip )

	// npc pilot score event, better be added by gamemodes
	//AddDeathCallback( "npc_pilot_elite", KilledNPCPilotScoreEvent )

	// no need since we already got these in _ai_pilots.gnut
	//AddCallback_OnNpcPilotBecomesTitan( NpcPilotBecomesTitan )
	//AddCallback_OnNpcTitanBecomesPilot( NpcTitanBecomesPilot )
}

void function ProwlerPrecache()
{
	/* // don't precache corpses again, or game's existing model will become errors!
	PrecacheModel($"models/creatures/prowler/prowler_corpse_static_01.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_02.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_05.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_06.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_07.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_08.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_09.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_10.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_corpse_static_12.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_dead_static_07.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_dead_static_08.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_dead_static_09.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_dead_static_10.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_dead_static_11.mdl")
    PrecacheModel($"models/creatures/prowler/prowler_death1_static.mdl")
	*/
    PrecacheModel($"models/creatures/prowler/r2_prowler.mdl")
}

// this is default settings, modders can change later
void function InitCarePackageDefaultSettings()
{
	// pilot weapons
	file.pilotMainWeapons =
	[ // try to make this all anti-titans? or grenadiers idk
		"mp_weapon_rspn101_og", 
		"mp_weapon_r97", 
		"mp_weapon_car",
		"mp_weapon_alternator_smg",
		"mp_weapon_vinson" ,
		"mp_weapon_epg",
		//"mp_weapon_smr",
		//"mp_weapon_defender",
		//"mp_weapon_mgl",
		//"mp_weapon_rocket_launcher"
	]

	// carepackage weapons
	// new grunt mode: only contains launchers
	file.carePackageWeapons =
	[
		"mp_weapon_epg", 
		"mp_weapon_softball", 
		"mp_weapon_pulse_lmg", 
		"mp_weapon_smr" 
	]

	// anti-titan
	file.carePackageWeaponMods["mp_weapon_arc_launcher"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap", "burn_mod_arc_launcher" ]
	file.carePackageWeaponMods["mp_weapon_mgl"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap", "burn_mod_mgl" ]
	file.carePackageWeaponMods["mp_weapon_rocket_launcher"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap", "burn_mod_rocket_launcher" ]
	file.carePackageWeaponMods["mp_weapon_defender"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap", "burn_mod_defender" ]

	// pistol
	file.carePackageWeaponMods["mp_weapon_autopistol"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "burn_mod_autopistol" ]
	file.carePackageWeaponMods["mp_weapon_semipistol"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "burn_mod_semipistol" ]
	file.carePackageWeaponMods["mp_weapon_smart_pistol"] <- [] 
	file.carePackageWeaponMods["mp_weapon_wingman"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "burn_mod_wingman" ]
	file.carePackageWeaponMods["mp_weapon_wingman_n"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", ]
	file.carePackageWeaponMods["mp_weapon_shotgun_pistol"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", ] 

	// sniper
	file.carePackageWeaponMods["mp_weapon_doubletake"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_fast_swap", "ricochet" ]
	file.carePackageWeaponMods["mp_weapon_sniper"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "ricochet", "pas_fast_swap", "burn_mod_sniper" ]
	file.carePackageWeaponMods["mp_weapon_dmr"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads" ] 
	
	// rifle
	file.carePackageWeaponMods["mp_weapon_vinson"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "hcog" ] 
	file.carePackageWeaponMods["mp_weapon_rspn101"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "hcog" ] 
	file.carePackageWeaponMods["mp_weapon_rspn101_og"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "hcog" ] 
	file.carePackageWeaponMods["mp_weapon_g2"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "hcog" ] 
	file.carePackageWeaponMods["mp_weapon_hemlok"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "hcog" ] 

	// smg
	file.carePackageWeaponMods["mp_weapon_car"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "holosight" ] 
	file.carePackageWeaponMods["mp_weapon_alternator_smg"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "holosight" ] 
	file.carePackageWeaponMods["mp_weapon_hemlok_smg"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "holosight" ] 
	file.carePackageWeaponMods["mp_weapon_r97"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "pas_fast_swap", "holosight" ] 

	// launcher
	file.carePackageWeaponMods["mp_weapon_epg"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun" ] 
	file.carePackageWeaponMods["mp_weapon_softball"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun" ] 
	file.carePackageWeaponMods["mp_weapon_smr"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun", "burn_mod_smr" ] 
	file.carePackageWeaponMods["mp_weapon_pulse_lmg"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun" ] 

	// lmg
	file.carePackageWeaponMods["mp_weapon_lmg"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_ads", "pas_run_and_gun", "redline_sight" ] 
	file.carePackageWeaponMods["mp_weapon_lstar"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun", "redline_sight", "reloadanimtest" ] // will have a halfed reload animation! 
	file.carePackageWeaponMods["mp_weapon_esaw"] <- [ "pas_fast_reload", "extended_ammo", "pas_fast_swap", "pas_run_and_gun", "redline_sight" ] 
}

void function KilledNPCPilotScoreEvent( entity pilot, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( !IsValid( attacker ) )
		return
	if( !attacker.IsPlayer() )
		return
	AddPlayerScore( attacker, "EliminatePilot", pilot )
}

void function ExtraSpawner_SetPilotWeapons( array<string> weapons )
{
	file.pilotMainWeapons = weapons
}

void function ExtraSpawner_SetCarePackageWeapons( array<string> weapons )
{
	file.carePackageWeapons = weapons
}

// this can only set a single weapon's mod
void function ExtraSpawner_SetCarePackageWeaponMods( string weaponName, array<string> weaponMods )
{
	if ( !( weaponName in file.carePackageWeaponMods ) )
		file.carePackageWeaponMods[weaponName] <- weaponMods
	else
		file.carePackageWeaponMods[weaponName] = weaponMods
}

// this will reset the whole table
void function ExtraSpawner_SetCarePackageWeaponModsMultiple( table< string, array<string> > weaponModsTable )
{
	file.carePackageWeaponMods = weaponModsTable
}

//------------------------------------------------------

bool function ClientCommand_SpawnPilotCanEmbark( entity player, array<string> args )
{   
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false
    Point dropPoint = GetTitanReplacementPoint( player )
	int team
	if( IsFFAGame() )
		team = GetCurrentPlaylistVarInt( "max_teams", 2 ) + 2 // so this ai won't have any teammates
    else
		team = GetOtherTeam( player.GetTeam() )
	if( args.len() > 0 )
	{
		if( args[0] == "sameteam" ) // spawn as teammate
			team = player.GetTeam()
	}
	//thread ExtraSpawner_SpawnPilotCanEmbark( dropPoint.origin, dropPoint.angles, team )
	thread ExtraSpawner_SpawnBTWithCooper( dropPoint.origin, dropPoint.angles, team )
    return true
}

bool function ClientCommand_SpawnReaperCanLaunchTicks( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false
	Point dropPoint = GetTitanReplacementPoint( player )
	int team
	if( IsFFAGame() )
		team = GetCurrentPlaylistVarInt( "max_teams", 2 ) + 2 // so this ai won't have any teammates
    else
		team = GetOtherTeam( player.GetTeam() )
    if( args.len() > 0 )
	{
		if( args[0] == "sameteam" ) // spawn as teammate
			team = player.GetTeam()
	}
    thread ExtraSpawner_SpawnReaperCanLaunchTicks( dropPoint.origin, dropPoint.angles, GetOtherTeam( player.GetTeam() ) )
    return true
}

bool function ClientCommand_SpawnGunShip( entity player, array<string> args )
{
	if( !BATTERY_SPAWNERS.contains( player.GetUID() ) )
		return false
	Point dropPoint = GetTitanReplacementPoint( player )
    thread ExtraSpawner_SpawnGunShip( dropPoint.origin + < 0,0,100 >, dropPoint.angles, GetOtherTeam( player.GetTeam() ) )
    return true
}

// copied from cl_replacement_titan_hud.gnut
void function Reaper_Spawnpoint( vector origin, int team, float impactTime, bool hasFriendlyWarning = false )
{
	array<entity> targetEffects = []
	vector surfaceNormal = < 0, 0, 1 >

	int index = GetParticleSystemIndex( $"P_ar_titan_droppoint" )

	if( hasFriendlyWarning || IsFriendlyFireOn() ) // also warn friendly players, if we enabled friendly fire...
	{
		entity effectFriendly = StartParticleEffectInWorld_ReturnEntity( index, origin, surfaceNormal )
		SetTeam( effectFriendly, team )
		EffectSetControlPointVector( effectFriendly, 1, < 128,188,255 > )
		effectFriendly.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
		effectFriendly.DisableHibernation()
		targetEffects.append( effectFriendly )
	}

	entity effectEnemy = StartParticleEffectInWorld_ReturnEntity( index, origin, surfaceNormal )
	SetTeam( effectEnemy, team )
	EffectSetControlPointVector( effectEnemy, 1, < 255,99,0 > )
	effectEnemy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY
	effectEnemy.DisableHibernation()
	targetEffects.append( effectEnemy )

	wait impactTime

	foreach( entity targetEffect in targetEffects )
	{
		if ( IsValid( targetEffect ) )
			EffectStop( targetEffect )
	}
}

// entity.ReplaceActiveWeapon gave grunts archers sometimes, this is my replacement for it
void function ReplaceWeapon( entity guy, string weapon, array<string> mods )
{
	guy.TakeActiveWeapon()
	guy.GiveWeapon( weapon, mods )
	guy.SetActiveWeaponByName( weapon )
}

// utilities end

entity function ExtraSpawner_SpawnTitanRandom( vector pos, vector rot, int team, bool standUp = true, void functionref( entity titan ) titanHandler = null )
{
	int randomindex = RandomInt( 9 ) // should always keep up with max titans, best way is to use a array
	string setfile = ""
	string aiset = ""
	string executionRef = "" // funny with MeleeSyncedNPC
	string moddedTitanName = ""
	switch( randomindex ) //randomindex, sometimes changed for test
	{
		case 0:
			setfile = "titan_atlas_stickybomb"
			aiset = "npc_titan_atlas_stickybomb"
			executionRef = "execution_ion" // was "execution_random_0", but ion's prime execution is bugged( maybe because using laser core will trigger a scripted animation? try to fix but not work )
			break
		case 1:
			setfile = "titan_ogre_meteor"
			aiset = "npc_titan_ogre_meteor"
			executionRef = "execution_scorch" // was "execution_random_1", now prime execution are splited for modded titans
			break
		case 2:
			setfile = "titan_stryder_sniper"
			aiset = "npc_titan_stryder_sniper"
			executionRef = "execution_northstar" // was "execution_random_2", now prime execution are splited for modded titans
			break
		case 3:
			setfile = "titan_stryder_leadwall"
			aiset = "npc_titan_stryder_leadwall"
			executionRef = "execution_ronin" // was "execution_random_3", now prime execution are splited for modded titans
			break
		case 4:
			setfile = "titan_atlas_tracker"
			aiset = "npc_titan_atlas_tracker"
			executionRef = "execution_tone" // was "execution_random_4", now prime execution are splited for modded titans
			break
		case 5:
			setfile = "titan_ogre_minigun"
			aiset = "npc_titan_ogre_minigun"
			executionRef = "execution_legion" // was "execution_random_5", now prime execution are splited for modded titans
			break
		case 6:
			setfile = "titan_atlas_vanguard"
			aiset = "npc_titan_atlas_vanguard"
			executionRef = "execution_vanguard_kit"
			break
		// modded titans, should avoid them being able to be robbed
		case 7:
			setfile = "titan_atlas_stickybomb"
			aiset = "npc_titan_auto_atlas_ion_prime"
			executionRef = "execution_ion" // ion's prime execution is bugged( maybe because using laser core will trigger a scripted animation? try to fix but not work )
			moddedTitanName = "archon" // hardcoded for now, should split into file.randomTitanList
			break
		case 8:
			setfile = "titan_stryder_sniper"
			aiset = "npc_titan_auto_stryder_northstar_prime"
			executionRef = "execution_northstar_prime"
			moddedTitanName = "brute4" // hardcoded for now
			break
	} 
	foreach ( entity player in GetPlayerArrayOfTeam( team ) )
	{
	    Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + 5 )
	}
	thread Reaper_Spawnpoint( pos, team, 5.0 )

	entity titan = CreateNPC( "npc_titan", team, pos, rot )
	SetSpawnOption_AISettings( titan, aiset )
    titan.ai.titanSpawnLoadout.setFile = setfile
    OverwriteLoadoutWithDefaultsForSetFile( titan.ai.titanSpawnLoadout )

	DispatchSpawn( titan )

	// titan won't have a soul until they DispatchSpawn()
	titan.GetTitanSoul().soul.titanLoadout.titanExecution = executionRef //"execution_vanguard_kit" // handle in melee_synced_titan to use random execution
	if ( moddedTitanName != "" ) // modded titan!!
		BecomeModdedNPCTitan( titan, moddedTitanName )
	thread NPCTitanHotdrops( titan, standUp )

	if ( titanHandler != null )
		thread titanHandler( titan )

	return titan
}

// hardcoded for now, should split into struct
/*
struct RandomTitanStruct
{
	string setFile
	string aiSettings
	string executionRef = ""
	void functionref( entity ) loadoutFunction = null
}
*/
void function BecomeModdedNPCTitan( entity titan, string moddedTitanName )
{
	switch( moddedTitanName )
	{
		case "archon":
			TakeAllWeapons( titan )
			//Defence
			titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield", OFFHAND_SPECIAL, ["slow_recovery_vortex", "shock_shield"] )
			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_laser_trip", OFFHAND_ANTIRODEO, ["tesla_node"] )
			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_stun_laser", OFFHAND_ORDNANCE, ["charge_ball"] )
			//Weapon
			titan.GiveWeapon ("mp_titanweapon_sniper", ["arc_cannon", "archon_arc_cannon", "archon_arc_cannon_charge_sound"])
			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT, ["storm_core"] )
			//Melee
			titan.GiveOffhandWeapon( "melee_titan_punch_ion", OFFHAND_MELEE )
			break
		case "brute4":
			TakeAllWeapons( titan )
			//Defence
			titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL, ["brute4_bubble_shield"] )
			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_rocketeer_ammo_swap", OFFHAND_ANTIRODEO )
			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE, ["grenade_launcher"] )
			//Weapon
			titan.GiveWeapon ("mp_titanweapon_rocketeer_rocketstream", ["brute4_rocket_launcher"])
			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT, ["barrage_core"] )
			//Melee
			titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE )
			break
	}
}

void function ExtraSpawner_SpawnTitanBT( vector pos, vector rot, int team, void functionref( entity titan ) titanHandler = null )
{
	foreach ( entity player in GetPlayerArray() )
	{
	    Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + 5 )
	}
	string squadName = MakeSquadName( team, UniqueString( "ZiplineTable" ) )
	entity titan = CreateNPC( "npc_titan", team, pos, rot )
	SetSpawnOption_AISettings( titan, "npc_titan_buddy")
	SetSpawnOption_Titanfall( titan )
	SetSpawnOption_Warpfall( titan )
	SetSpawnOption_NPCTitan( titan, TITAN_HENCH )
    titan.ai.titanSpawnLoadout.setFile = "titan_buddy"
    OverwriteLoadoutWithDefaultsForSetFile( titan.ai.titanSpawnLoadout )
	DispatchSpawn( titan )
	titan.SetSkin(1)
	SetSquad( titan, squadName )

	if ( titanHandler != null )
		thread titanHandler( titan )
}

entity function ExtraSpawner_SpawnBTWithCooper( vector pos, vector rot, int team )
{
	string setfile = "titan_buddy"
	string aiset = "npc_titan_buddy"
	string executionRef = "execution_bt" // funny with MeleeSyncedNPC

	foreach ( entity player in GetPlayerArrayOfTeam( team ) )
	{
	    Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + 5 )
	}
	thread Reaper_Spawnpoint( pos, team, 5.0 )

	entity titan = CreateNPC( "npc_titan", team, pos, rot )
	SetSpawnOption_AISettings( titan, aiset )
    titan.ai.titanSpawnLoadout.setFile = setfile
    OverwriteLoadoutWithDefaultsForSetFile( titan.ai.titanSpawnLoadout )

	DispatchSpawn( titan )

	titan.TakeWeaponNow( "mp_titanweapon_xo16_shorty" ) // don't use a one-shot killing xo16!
	titan.GiveWeapon( "mp_titanweapon_xo16_vanguard", ["arc_rounds"] ) // use the arc-rounds monarch xo16

	// titan won't have a soul until they DispatchSpawn()
	entity titanSoul = titan.GetTitanSoul()
	titanSoul.soul.titanLoadout.titanExecution = executionRef // "execution_bt" now handle in melee_synced_titan to use random execution
	// bt require a "squad" to spawn
	string squadName = MakeSquadName( titan.GetTeam(), UniqueString( "ZiplineTable" ) )
	SetSquad( titan, squadName )
	Rodeo_SetTitanRodeoSequenceEnabled( titan, false ) // so bt won't be able to remove battery

	thread NPCTitanHotdrops( titan, true )

	// jack cooper settings!
	titanSoul.soul.seatedNpcPilot.isValid				= true

	titanSoul.soul.seatedNpcPilot.team 					= team

	NPCPilotWeaponStruct weaponStruct
	weaponStruct.weaponName = file.pilotMainWeapons[ RandomInt( file.pilotMainWeapons.len() ) ]
	weaponStruct.weaponMods = []
	titanSoul.soul.seatedNpcPilot.weapons.append( weaponStruct )

	titanSoul.soul.seatedNpcPilot.modelAsset 			= $"models/humans/heroes/mlt_hero_jack.mdl"
	titanSoul.soul.seatedNpcPilot.title 				= "傑克庫伯"

	titanSoul.soul.seatedNpcPilot.isInvulnerable		= false

	titanSoul.soul.seatedNpcPilot.health				= 1500

	titan.SetTitle( "BT-7274" )
	thread ExtraSpawner_TitanHandler( titan )

	return titan
}

void function ExtraSpawner_SpawnNPC( vector pos, vector rot, int team, string content )
{
	entity pod = CreateDropPod( pos, <0,0,0> )

    entity spawnNpc = CreateNPC( content, team, pos, rot )
	spawnNpc.EndSignal( "OnDestroy" )
    SetSpawnOption_AISettings( spawnNpc, content )
	DispatchSpawn( spawnNpc ) // never delayed dispatchSpawn()

    InitFireteamDropPod( pod ) 
	spawnNpc.SetParent( pod, "ATTACH", true )
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	// dissolve the pod right after landing( DropPodActiveThink() has been modified ), since it this kind of pod spawning is hacky( not spawning through pod function but set parented ) and unable to dissolve itself.
    thread DropPodActiveThink( pod, 0.5 )
	spawnNpc.ClearParent()
}

void function ExtraSpawner_SpawnGunShip( vector pos, vector rot, int team )
{
	entity gunship = CreateNPC("npc_gunship", team, pos, rot )
	HideName( gunship ) // won't make it's info target( or health bar ) teleport into battle
	DispatchSpawn( gunship )
	thread PlayAnim( gunship , "st_AngelCity_IMC_Win_ComeIn")
    WaittillAnimDone( gunship )
	ShowName( gunship ) // show info target again
	vector spawnpoint = gunship.GetOrigin()
	vector spawnang = gunship.GetAngles()
	if ( IsValid( gunship ) )
		gunship.Destroy()
	entity gunship2 = CreateNPC("npc_gunship", team, spawnpoint, spawnang )
	Highlight_SetEnemyHighlight( gunship2, "enemy_titan" )
	DispatchSpawn( gunship2 )
	if ( CoinFlip() )
	{
		gunship2.TakeWeaponNow( "mp_weapon_gunship_missile" )
		gunship2.GiveWeapon( "mp_weapon_gunship_turret", [ "npc_elite_weapon" ] ) //
		gunship2.SetActiveWeaponByName( "mp_weapon_gunship_turret" )
	}
	else
	{
		gunship2.TakeWeaponNow( "mp_weapon_gunship_missile" )
		gunship2.GiveWeapon( "mp_weapon_gunship_missile", [ "npc_elite_weapon" ] ) //
		gunship2.SetActiveWeaponByName( "mp_weapon_gunship_missile" )
	}

}

void function ExtraSpawner_SpawnPilotCanEmbark( vector pos, vector rot, int team )
{
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	entity pod = CreateDropPod( pos, rot )

	entity pilot = CreateNPC( "npc_pilot_elite", team, pos, rot )//CreateNPC( "npc_soldier", team, pos, rot )
	pilot.EndSignal( "OnDeath" )
	pilot.EndSignal( "OnDestroy" )
	pilot.s.petTitan <- null // initializing
	pilot.s.nextTitanRespawnAvailable <- null
	DispatchSpawn( pilot ) // don't delayed dispatchSpawn()

	// many things below should have a reference in _ai_pilots.gnut, for npc pilots ejecting
	asset modelAsset = NPC_PILOT_ALLOWED_MODELS[ RandomInt(NPC_PILOT_ALLOWED_MODELS.len()) ]
	//print( modelAsset ) // testing...
	pilot.SetModel( modelAsset )//
	pilot.SetMaxHealth( 1000 )
	pilot.SetHealth( 1000 )
	pilot.SetTitle( "鐵馭" ) // "#NPC_PILOT", using a localized string will cause auto-titan's title to be wrong

	ReplaceWeapon( pilot, file.pilotMainWeapons[ RandomInt( file.pilotMainWeapons.len() ) ], [] ) //["npc_elite_weapon"]
	// unused, pilots don't switch weapons
	//pilot.GiveWeapon( file.pilotAntiTitanWeapons[ RandomInt( file.pilotAntiTitanWeapons.len() ) ] ) // maybe don't do this?
	
	// want pilots move faster to their titans
	//pilot.EnableNPCMoveFlag( NPCMF_IGNORE_CLUSTER_DANGER_TIME | NPCMF_PREFER_SPRINT )
	//pilot.DisableNPCMoveFlag( NPCMF_FOLLOW_SAFE_PATHS | NPCMF_INDOOR_ACTIVITY_OVERRIDE )

	pilot.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_FLEE ) // hardcoded!
	pilot.EnableNPCFlag( NPC_IGNORE_ALL ) // so they will mostly try to embark, clean it up later
	pilot.SetNPCMoveSpeedScale( 1.25 ) // want pilots move faster
	//pilot.SetEnemyChangeCallback( OnEnemyChanged_NPCPilotTrySwitchWeapon ) // in _ai_pilots.gnut, not a good idea since pilot models don't have "ACT_SWITCH_WEAPON"

	pilot.SetParent( pod, "ATTACH", true )
	InitFireteamDropPod( pod, eDropPodFlag.DISSOLVE_AFTER_DISEMBARKS ) // for fast dissolve
	thread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )
	wait 3
	entity titan = ExtraSpawner_SpawnTitanForPilot( pilot, pos, rot ) // send titan a little bit later
	titan.EndSignal( "OnDeath" )
	titan.EndSignal( "OnDestroy" )
	thread ForceStartTitan( titan, pilot, 10 ) // to fit ownerLifeTimeCheck(), if pilot died instantly we stand the titan
	wait 2
	
	ActivateFireteamDropPod( pod, [ pilot ] )
	thread PilotSpawnProtection( pilot, titan, 20 ) // at least don't let players kill pilots while their titans're not landing
	AddEntityCallback_OnDamaged( pilot, NPCPilotDamageAdjustments ) // don't let stepping on easily kill them
	Highlight_SetEnemyHighlight( pilot, "enemy_player" )

	//if( team == TEAM_MILITIA )
	//	pilot.SetModel( $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	//if( team == TEAM_IMC )
	//	pilot.SetModel( $"models/humans/pilots/sp_medium_stalker_m.mdl" )

	OnThreadEnd( 
		function(): ( pilot, titan )
		{
			if( !IsAlive( titan ) )
				return
			if( !IsAlive( pilot ) )
			{
				thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
				return
			}
		}
	)

	NpcPilotSetPetTitan( pilot, titan )
	titan.SetTitle( pilot.GetTitle() + " 的自動泰坦" )
	titan.WaitSignal( "TitanHotDropComplete" )
	
	thread NpcPilotRunsToEmbarkTitan( pilot, titan )
	pilot.SetNPCMoveSpeedScale( 1.8 ) // want this pilot run to titan's start point faster
	wait 2.0
	
	waitthread NpcPilotRunsToEmbarkTitan( pilot, titan )
	
	thread NpcPilotEmbarksTitan( pilot, titan )
	
		
	/*
	while( true ) // keep making npc pilot run to embark till we success
	{
		wait 2.0
		if( !IsAlive( titan ) )
			return
		if( titan.GetTitanSoul().soul.seatedNpcPilot.isValid )
			return
		if( !IsAlive( pilot ) )
		{
			thread PlayAnimGravity( titan, "at_hotdrop_quickstand" ) // stand up and fight itself
			return
		}
		if( fabs( Distance2D( pilot.GetOrigin(), titan.GetOrigin() ) ) >= 300 || fabs( pilot.GetOrigin().z - titan.GetOrigin().z ) >= 50 ) // too far for embarking
			thread NpcPilotRunsToEmbarkTitan( pilot, titan )
		else
		{
			waitthread NpcPilotRunsToEmbarkTitan( pilot, titan )
			if( !IsAlive( titan ) )
				return
			if( titan.GetTitanSoul().soul.seatedNpcPilot.isValid )
				return
			if( !IsAlive( pilot ) )
			{
				thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
				return
			}
			if( !titan.GetTitanSoul().soul.seatedNpcPilot.isValid )
				thread NpcPilotEmbarksTitan( pilot, titan )
			else
				return
		}
	}
	*/
}

void function PilotSpawnProtection( entity pilot, entity titan, float duration )
{
	pilot.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDestroy" ) // pilot's titan has been robbed?

	pilot.SetInvulnerable()
	OnThreadEnd(
		function(): ( pilot )
		{
			if( IsAlive( pilot ) )
				pilot.ClearInvulnerable()
		}
	)

	wait duration
	//pilot.ClearInvulnerable() // fixed: if pilots're killed before titan lands their titan will stuck in the sky!
}

void function ForceStartTitan( entity titan, entity pilot, float delay )
{
	pilot.EndSignal( "OnDeath" )
	pilot.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function():( titan, pilot )
		{
			if( IsAlive( pilot ) )
			{
				if( IsAlive( titan ) )
				{
					titan.SetOwner( pilot )
					NPCFollowsNPC( titan, pilot )
					// shared signals in _ai_pilots.gnut
					pilot.Signal( "StopRunsToEmbark" )
					if( titan.ContextAction_IsBusy() ) // embarking?
						return
					thread ExtraSpawner_PilotHandler( pilot ) // titan will follow the pilot
					thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
					titan.ClearInvulnerable()
					pilot.SetNPCMoveSpeedScale( 1.25 ) // reset move speed
					// want pilots move faster to their titans
					//pilot.EnableNPCMoveFlag( NPCMF_FOLLOW_SAFE_PATHS | NPCMF_INDOOR_ACTIVITY_OVERRIDE ) 
					//pilot.DisableNPCMoveFlag( NPCMF_IGNORE_CLUSTER_DANGER_TIME | NPCMF_PREFER_SPRINT )
					pilot.DisableNPCFlag( NPC_IGNORE_ALL ) // pilot also start scan around
				}
			}
			else
			{
				if( IsAlive( titan ) )
				{
					if( titan.GetTitanSoul().soul.seatedNpcPilot.isValid )
						return
					thread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
					titan.ClearInvulnerable()
					thread ExtraSpawner_TitanHandler( titan )
				}
			}
		}
	)

	titan.WaitSignal( "TitanHotDropComplete" )
	wait delay

	/* // moving into OnThreadEnd()
	if( IsAlive( pilot ) )
	{
		if( IsAlive( titan ) )
		{
			titan.SetOwner( pilot )
			NPCFollowsNPC( titan, pilot )
			pilot.Signal( "ForceStartMove" ) // the signal as been deleted
			if( titan.ContextAction_IsBusy() ) // embarking?
				return
			thread ExtraSpawner_PilotHandler( pilot )
			waitthread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
			if( IsAlive( titan ) )
				titan.ClearInvulnerable()
			if( IsAlive( pilot ) )
				pilot.DisableNPCFlag( NPC_IGNORE_ALL ) // pilot also start scan around
		}
	}
	else
	{
		if( IsAlive( titan ) )
		{
			if( titan.GetTitanSoul().soul.seatedNpcPilot.isValid )
				return
			waitthread PlayAnimGravity( titan, "at_hotdrop_quickstand" )
			if( !IsAlive( titan ) )
				return
			titan.ClearInvulnerable()
			thread ExtraSpawner_TitanHandler( titan )
		}
	}
	*/
}

entity function ExtraSpawner_SpawnTitanForPilot( entity pilot, vector pos, vector rot )
{
	// reworked to use an existing function
	entity titan = ExtraSpawner_SpawnTitanRandom( pos, rot, pilot.GetTeam(), false ) // the titan will wait
	NpcPilotSetPetTitan( pilot, titan )

	//thread NPCTitanHotdrops( titan, false )
	thread PetTitanOwnerLifeTimeCheck( titan, pilot ) // avoid titan being stuck in the sky! this happens if pilot died while titan dropping

	return titan
}

void function PetTitanOwnerLifeTimeCheck( entity titan, entity owner )
{
	owner.EndSignal( "OnDeath" )
	owner.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDestroy" )

	table data = {}
	data.dropSuccess <- false

	OnThreadEnd(
		function(): ( titan, data )
		{
			if( data.dropSuccess ) // successfully dropped to ground, maybe it can stand up after owner died
				return
			if( IsValid( titan ) ) 
				titan.Destroy() // ded.
		}
	)

	titan.WaitSignal( "TitanHotDropComplete" )
	data.dropSuccess = true
}

/* // these are abandoned
void function ExtraSpawner_SpawnPilotCanEmbark( vector pos, vector rot,entity titan, int team, void functionref( entity titan ) titanHandler = null )
{
	entity pod = CreateDropPod( pos, <0,0,0> )
	entity pilot = CreateNPC("npc_soldier", team, pos, rot )
	//array<entity> titans = GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 )
	//entity titan = titans[RandomInt( titans.len() )]

	InitFireteamDropPod( pod )
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	DispatchSpawn( pilot )
	if( team == TEAM_MILITIA )
		pilot.SetModel( $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	if( team == TEAM_IMC )
		pilot.SetModel( $"models/humans/pilots/sp_medium_stalker_m.mdl" )
	pilot.SetTitle( "鉄馭" )
	pilot.SetMaxHealth( 500 )
	pilot.SetHealth( 500 )

	ReplaceWeapon( pilot, file.pilotWeapons[ RandomInt( file.pilotWeapons.len() ) ], [] )
	//pilot.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
	
	thread DropPodActiveThink( pod )

	//pilot.WaitSignal( "npc_deployed" )

	if ( titanHandler != null )
		thread titanHandler( pilot )

	//thread CaptainThink( pilot )

	NpcPilotSetPetTitan( pilot, titan )
	wait 5
	//TeleportPilotToTitan( pilot, titan )
	thread NpcPilotRunsToEmbarkTitan( pilot, titan )
	
	while(true)
	{
		wait 5

		if( IsValid( pilot ) && IsValid( titan ) )
		{
			thread NpcPilotRunsToEmbarkTitan( pilot, titan )
		}

		if( !IsValid( pilot ) || !IsValid( titan ) )
			break
	}
}

void function TeleportPilotToTitan( entity pilot , entity titan )
{
	vector origin = titan.GetOrigin();
	vector angles = titan.GetAngles();

	pilot.SetOrigin(origin)
	pilot.SetAngles(angles)
}
*/

// not using right now, just saving it
/*
void function ExtraSpawner_SpawnPilotWithTitan( vector pos, vector rot, int team, void functionref( entity titan ) titanHandler = null )
{
	entity pod = CreateDropPod( pos, <0,0,0> )
	entity pilot = CreateNPC("npc_soldier", team, pos, rot )
	array<entity> pilots = [ pilot ]

	InitFireteamDropPod( pod )
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	DispatchSpawn( pilot )
	if( team == TEAM_MILITIA )
		pilot.SetModel( $"models/humans/pilots/sp_medium_reaper_m.mdl" )
	if( team == TEAM_IMC )
		pilot.SetModel( $"models/humans/pilots/sp_medium_stalker_m.mdl" )
	pilot.SetTitle( "Pilot" )
	pilot.SetMaxHealth( 1000 )
	pilot.SetHealth( 1000 )
	Highlight_SetEnemyHighlight( pilot, "enemy_player" )

	foreach ( pilot in pilots )
	{
		ReplaceWeapon( pilot, file.pilotWeapons[ RandomInt( file.pilotWeapons.len() ) ], ["npc_elite_weapon"] )
		pilot.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
	}
	
	ActivateFireteamDropPod( pod, pilots )

	pilots[ pilots.len() - 1 ].WaitSignal( "npc_deployed" )

	if ( titanHandler != null )
		thread titanHandler( pilot )

	waitthread CaptainThink( pilot )
	WaitFrame()
	//thread NpcPilotCallsInAndEmbarksTitan(pilot, pilot.GetOrigin() + Vector(RandomFloatRange(-100,100),RandomFloatRange(-100,100),0), <0,0,0> )
	entity titan = NpcPilotCallsInTitan(pilot, pilot.GetOrigin(), <0,0,0> )

	wait 5
	if( IsValid( pilot ) && IsValid( titan ) )
	{
		thread NpcPilotRunsToEmbarkTitan( pilot, titan )
		if ( titanHandler != null )
			thread titanHandler( titan )
	}

}
*/

function OnNpcPilotBecomesTitan( pilot, titan )
{
	expect entity( pilot )
	expect entity( titan )

	titan.SetBehaviorSelector( "behavior_mp_auto_titan_enhanced" ) // become smarter, since pilot has control of it
	Highlight_SetEnemyHighlight( titan, "enemy_titan" )
	// kinda annoying to have a info target all around them.
	//titan.SetAISettings( titan.GetAISettingsName() + "_bounty" ) // so they will show up a health bar, letting players know they're npc pilot controled
	//Highlight_ClearEnemyHighlight( titan ) // this resets highlights in modified sh_highlights
	thread DelayedTitanHandler( titan )
}

void function DelayedTitanHandler( entity titan )
{
	wait 1
	if( IsAlive( titan ) )
	{
		thread ExtraSpawner_TitanHandler( titan )
	}
}

function OnNpcTitanBecomesPilot( pilot, titan )
{
	expect entity( pilot )
	expect entity( titan )
	pilot.SetInvulnerable()
	pilot.SetNPCMoveSpeedScale( 1.25 ) // want pilots move faster
	AddEntityCallback_OnDamaged( pilot, NPCPilotDamageAdjustments ) // don't let stepping on easily kill them
	//pilot.SetEnemyChangeCallback( OnEnemyChanged_NPCPilotTrySwitchWeapon ) // not a good idea since pilot models don't have "ACT_SWITCH_WEAPON"
	thread DelayedPilotHandler( pilot )

	if ( IsValid( titan ) ) // disembarking, unfortunatelly this is not featured
	{
		entity titanSoul = titan.GetTitanSoul()
		if( !IsValid( titanSoul ) ) // defensive fix for titan.Destroy() situations
			return
		bool isEjecting = titanSoul.IsEjecting()
		if( isEjecting )
			thread NPCPilotEjectingAnimation( pilot )
		else
			titan.SetBehaviorSelector( "behavior_mp_auto_titan" ) // not ejecting, reset to normal behavior
		Highlight_SetEnemyHighlight( titan, "enemy_titan" )

		// kinda annoying to have a info target all around them.
		//string aiSetFile = titan.GetAISettingsName()
		//titan.SetAISettings( aiSetFile.slice( 0, aiSetFile.len() - 7 ) ) // not ejecting, back to normal health bar
		//Highlight_ClearEnemyHighlight( titan ) // this resets highlights in modified sh_highlights
	}
	/*
	if( pilot.GetTeam()  == TEAM_MILITIA )
	{
		pilot.SetModel( $"models/humans/pilots/sp_medium_reaper_m.mdl" )
		
		pilot.SetTitle( "鉄馭" )
		pilot.SetMaxHealth( 1000 )
		pilot.SetHealth( 1000 )
		thread CaptainThink( pilot )
	}
	if( pilot.GetTeam()  == TEAM_IMC )
	{
		pilot.SetModel( $"models/humans/pilots/sp_medium_stalker_m.mdl" )

		pilot.SetTitle( "鉄馭" )
		pilot.SetMaxHealth( 1000 )
		pilot.SetHealth( 1000 )
		thread CaptainThink( pilot )
	}
	*/
}

void function NPCPilotEjectingAnimation( entity pilot )
{
	pilot.EndSignal( "OnDestroy" )
	
	//pilot.Anim_Play( "ACT_FALL" )
	pilot.Anim_ScriptedPlayActivityByName( "ACT_FALL", true, 0.2 )
	while( true )
	{
		if( pilot.IsOnGround() )
			break

		// version2: only play anim while dropping
		//if( pilot.GetVelocity().z <= -100 ) // fast dropping!
		//	break
		//if( pilot.IsOnGround() )
		//	return // touched ground!

		WaitFrame()
	}
	// version2: only play anim while dropping
	//pilot.Anim_ScriptedPlayActivityByName( "ACT_FALL", true, 0.2 )
	
	pilot.Anim_Stop()
}

// modified things
//////////////////////////////////////////////////////////
// re-adjust damages for npc pilots!
const int PLAYER_TITAN_MELEE_DAMAGE_NPC_PILOT = 100
// why eDamageSourceId. can't be in arrays?
const array<int> PLAYER_TITAN_DAMAGESOURCEIDS = [ /* eDamageSourceId.melee_titan_punch, // basically save for redirecting damage 
												  eDamageSourceId.melee_titan_punch_ion, 
												  eDamageSourceId.melee_titan_punch_tone, 
												  eDamageSourceId.melee_titan_punch_northstar, 
												  eDamageSourceId.melee_titan_punch_scorch, 
												  eDamageSourceId.melee_titan_punch_legion, 
												  eDamageSourceId.melee_titan_punch_vanguard */ ]
const int NPC_TITAN_MELEE_DAMAGE_NPC_PILOT = 300
const int TITAN_SOWRD_DAMAGE_NPC_PILOT = 250
const int TITAN_STEPPING_ON_DAMAGE_NPC_PILOT = 250
void function NPCPilotDamageAdjustments( entity pilot, var damageInfo )
{
	int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	// titan step
	if( damageSourceID == damagedef_titan_step ) 
		DamageInfo_SetDamage( damageInfo, TITAN_STEPPING_ON_DAMAGE_NPC_PILOT )

	// player's titan melee, can't use a array
	if( damageSourceID == eDamageSourceId.melee_titan_punch ||
		damageSourceID == eDamageSourceId.melee_titan_punch_ion ||
		damageSourceID == eDamageSourceId.melee_titan_punch_tone ||
		damageSourceID == eDamageSourceId.melee_titan_punch_northstar ||
		damageSourceID == eDamageSourceId.melee_titan_punch_scorch ||
		damageSourceID == eDamageSourceId.melee_titan_punch_legion ||
		damageSourceID == eDamageSourceId.melee_titan_punch_vanguard )
		DamageInfo_SetDamage( damageInfo, PLAYER_TITAN_MELEE_DAMAGE_NPC_PILOT )

	// npc's titan melee
	if( damageSourceID == eDamageSourceId.auto_titan_melee ) 
		DamageInfo_SetDamage( damageInfo, NPC_TITAN_MELEE_DAMAGE_NPC_PILOT )

	// ronin sword
	if( damageSourceID == eDamageSourceId.melee_titan_sword ) 
		DamageInfo_SetDamage( damageInfo, TITAN_SOWRD_DAMAGE_NPC_PILOT )
}

void function ApplyNormalMeleeIdToNPCTitan( entity victim, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
    if( !IsValid( attacker ) )
        return
	if( !attacker.IsNPC() )
		return
    if( !attacker.IsTitan() )
        return
	if( !TitanHasNpcPilot( attacker ) )
		return

	DamageInfo_SetDamageSourceIdentifier( damageInfo, eDamageSourceId.melee_titan_punch )
}

void function OnEnemyChanged_NPCPilotTrySwitchWeapon( entity pilot )
{
	entity enemy = pilot.GetEnemy()
	if ( !IsAlive( enemy ) )
		return

	array<entity> weapons = pilot.GetMainWeapons()

	// do we have a weapon to switch to?
	if ( weapons.len() < 2 )
		return

	entity activeWeapon = pilot.GetActiveWeapon()
	bool isHeavyArmorTarget = enemy.GetArmorType() == ARMOR_TYPE_HEAVY

	if( isHeavyArmorTarget )
	{
		// first try to find an appropriate weapon
		foreach ( entity weapon in weapons )
		{
			bool isAntiTitan = weapon.GetWeaponType() == WT_ANTITITAN
			if( isAntiTitan )
			{
				// found a weapon to use
				pilot.SetActiveWeaponByName( weapon.GetWeaponClassName() )
				break
			}
		}
	}
	else // light unit, switch off anti-titans
	{
		foreach ( entity weapon in weapons )
		{
			bool isPrimary = weapon.GetWeaponType() != WT_ANTITITAN && weapon.GetWeaponType() != WT_SIDEARM
			if( isPrimary )
			{
				// found a weapon to use
				pilot.SetActiveWeaponByName( weapon.GetWeaponClassName() )
				break
			}
		}
	}
}

void function DelayedPilotHandler( entity pilot )
{
	wait 1
	if( IsAlive( pilot ) )
	{
		pilot.ClearInvulnerable()
		thread ExtraSpawner_PilotHandler( pilot )
	}
}

void function ExtraSpawner_PilotHandler( entity pilot )
{	
	// Setup AI, no need for now
	//pilot.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
	
	// First AssaultPoint
	array< entity > points = GetNPCArrayOfEnemies( pilot.GetTeam() )
	vector point
	
	if ( points.len() > 0 )
	{
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		pilot.AssaultPoint( point )
		pilot.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
	}
	
	array<entity> players = GetPlayerArrayOfEnemies( pilot.GetTeam() )
	// show on enemy radar
	foreach ( player in players )
		pilot.Minimap_AlwaysShow( 0, player )
	
	//thread AITdm_CleanupBoredNPCThread( guy )
	
	// Every 5 - 15 secs change AssaultPoint
	while ( true )
	{	
		wait RandomFloatRange(5.0,15.0) // do wait first
		
		// Check if alive
		if ( !IsAlive( pilot ) )
			return
		
		// Get point and send guy to it
		points = GetNPCArrayOfEnemies( pilot.GetTeam() )
		if ( points.len() == 0 )
			continue
			
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		
		pilot.AssaultPoint( point )
	}

}

void function ExtraSpawner_TitanHandler( entity titan )
{
	// First AssaultPoint
	array< entity > points = GetNPCArrayOfEnemies( titan.GetTeam() )
	vector point
	
	if ( points.len() > 0 )
	{
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		titan.AssaultPoint( point )
		titan.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
	}
	
	array<entity> players = GetPlayerArrayOfEnemies( titan.GetTeam() )
	// show on enemy radar
	foreach ( player in players )
		titan.Minimap_AlwaysShow( 0, player )
	
	//thread AITdm_CleanupBoredNPCThread( guy )
	
	// Every 5 - 15 secs change AssaultPoint
	while ( true )
	{	
		wait RandomFloatRange(5.0,15.0) // wait first!
	
		// Check if alive
		if ( !IsAlive( titan ) )
			return
		
		// Get point and send guy to it
		points = GetNPCArrayOfEnemies( titan.GetTeam() )
		if ( points.len() == 0 )
			continue
			
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		
		titan.AssaultPoint( point )
	}
}

const float CARE_PACKAGE_LIFETIME = 30
const float CARE_PACKAGE_WAITTIME = 5
void function ExtraSpawner_SpawnCarePackageToGetWeapons( vector pos, vector rot, float lifeTime = CARE_PACKAGE_LIFETIME, float waitTime = CARE_PACKAGE_WAITTIME )
{
	//thread DropWeaponAlert( pos, 500, 200 )
	thread CarePackage_SpawnPoint( pos, 10 )
	thread ExtraSpawner_SpawnCarePackageToGetWeapons_Threaded( pos, rot, lifeTime, waitTime )
}

void function ExtraSpawner_SpawnCarePackageToGetWeapons_Threaded( vector pos, vector rot, float lifeTime, float waitTime )
{
	file.usedplayer.clear()
	wait waitTime
	entity pod = CreateDropPod( pos, <0,0,0> )
	pod.EndSignal( "OnDestroy" )
	Highlight_SetOwnedHighlight( pod, "friendly_ai" )

	//InitFireteamDropPod( pod )

	// it takes 5s to drop
	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	pod.SetUsable()
	pod.SetUsableByGroup( "pilot" )
	pod.SetUsePrompts( "按住 %use% 以獲取武器", "按下 %use% 獲取武器" )
	AddCallback_OnUseEntity( pod , GiveAirDropWeapon )

	HighlightDropPod( pod )
	pod.SetModel( CAREPACKAGE_MODEL )
    
    wait lifeTime

	//pod.Destroy()
	pod.UnsetUsable() // don't let dissolving pod able to be used
	pod.NotSolid() // clear collision
	DisableDropPodHighlight( pod )
	pod.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 )
}

// copied from cl_replacement_titan_hud.gnut
void function CarePackage_SpawnPoint( vector origin, float impactTime )
{
	array<entity> targetEffects = []
	vector surfaceNormal = < 0, 0, 1 >

	int index = GetParticleSystemIndex( $"P_ar_titan_droppoint" )

	entity targetEffect = StartParticleEffectInWorld_ReturnEntity( index, origin, surfaceNormal )
	EffectSetControlPointVector( targetEffect, 1, < 0,190,0 > ) // green
	targetEffect.DisableHibernation()

	wait impactTime

	if ( IsValid( targetEffect ) )
		EffectStop( targetEffect )
}

function GiveAirDropWeapon( pod , player )
{
	expect entity( player )
	vector pos = player.GetOrigin()

	if( file.usedplayer.contains( player ) )
	{
		//SendHudMessage(player, "Once Robbed Weapon from Care Package\nPlease Wait for Next Delivery",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
		SendHudMessage( player, "已獲取本次補給艙\n請等待下一輪",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1 )
		return
	}
    //DropModdedWeapons( WEAPONS, pos, MODS )
	if( player.GetMainWeapons().len() == 3 )
		player.DropWeapon( player.GetMainWeapons()[2] ) // was [1], for the newest version, drop the grenadier!
	//GiveModdedWeapons( player, WEAPONS, MODS )
	GiveModdedWeapons( player, file.carePackageWeapons )
	RestorePlayerAmmo( player )
    //SendHudMessage(player, "Got Weapon from Care Package",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1)
    SendHudMessage( player, "已從補給艙補充彈藥",  -1, 0.3, 255, 255, 0, 255, 0.15, 3, 1 )
	file.usedplayer.append( player )
	player.Signal( "PlayerUsedCarePackage" )
}

// not using right now, just saving them
/*
void function ExtraSpawner_SpawnDropPodWithWeapons( vector pos, vector rot, array<string> weapons, array<string> mods, int amount = 4, float destructionTime = 60 )
{
	thread DropWeaponAlert( pos, 500, 200 )
	thread ExtraSpawner_SpawnDropPodWithWeapons_Threaded( pos, rot, weapons, mods, amount )
}

void function ExtraSpawner_SpawnDropPodWithWeapons_Threaded( vector pos, vector rot, array<string> weapons, array<string> mods, int amount = 4 )
{
	//foreach ( entity player in GetPlayerArray() )
	//{
	//    Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + 4 )
	//}
	wait 10
	entity pod = CreateDropPod( pos, <0,0,0> )

	InitFireteamDropPod( pod )

	waitthread LaunchAnimDropPod( pod, "pod_testpath", pos, rot )

	thread DropPodActiveThink( pod, 60 )

	wait 1.5
	for( int i = 0; i < amount; i++ )
    {
        //string weaponName = weapons[ RandomInt(weapons.len()) ]

        DropModdedWeapons( weapons, pos, mods )
    }
}

void function ExtraSpawner_SpawnReaperDorpsWeapons( vector pos, vector rot, array<string> weapons, array<string> mods )
{
	thread DropWeaponAlert( pos, 500, 200 )
    thread ExtraSpawner_SpawnReaperDorpsWeapons_Threaded( pos, rot, weapons, mods )
}

void function ExtraSpawner_SpawnReaperDorpsWeapons_Threaded( vector pos, vector rot, array<string> weapons, array<string> mods )
{
    wait(10)
    entity reaper = CreateSuperSpectre( TEAM_UNASSIGNED, pos, rot )
    SetSpawnOption_AISettings( reaper, "npc_super_spectre_aitdm" )
    DispatchSpawn( reaper )
    thread SuperSpectre_WarpFall( reaper )

    wait(1)
    reaper.Destroy()
    for( int i = 0; i <= 4; i++ )
    {
        //string weaponName = weapons[ RandomInt(weapons.len()) ]
        DropModdedWeapons( weapons, pos, mods )
    }
}

void function DropWeaponAlert( vector pos, int radius = 300, int times = 999 )
{
	for( int i = 0; i <= times; i++ )
    {
		foreach ( entity player in GetPlayerArray() )
	    {
    		if( IsValid(player) && GetGameState() == eGameState.Playing )
    		{
	        	Remote_CallFunction_Replay( player, "ServerCallback_SonarPulseFromPosition", pos.x, pos.y, pos.z, radius, 1.0, true )
	        }
    	}
    	WaitFrame()
    }
    //foreach ( entity player in GetPlayerArray() )
    //{
	//	if( IsValid(player) )
	//	{
    //    	Remote_CallFunction_Replay( player, "ServerCallback_IncomingAirDrop", pos.x, pos.y, pos.z, Time() + 10 )
    //  }
	//}
}

void function DropModdedWeapons( array<string> weapons, vector droppoint, array<string> mods )
{
	string weaponName = weapons[ RandomInt(weapons.len()) ]
    entity weapon = CreateWeaponEntityByNameWithPhysics( weaponName, droppoint + Vector(0,0,20), <0,0,0> )
    if( weaponName in ANTITITANS )
    	mods = ANTITAN_MODS
    if( weaponName in DEFENDER )
    	mods = DEFENDER_MODS
    if( weaponName in PISTOLS )
    	mods = PISTOL_MODS
    if( weaponName in SNIPERS )
        mods = SNIPER_MODS
    if( weaponName in LAUNCHERS )
    	mods = LAUNCHER_MODS
    weapon.SetMods( mods )
    HighlightWeaponAmped( weapon )
}

void function GiveModdedWeapons( entity player, array<string> weapons, array<string> mods )
{
	string weaponName = weapons[ RandomInt(weapons.len()) ]
    if( weaponName in ANTITITANS )
    	mods = ANTITAN_MODS
    if( weaponName in DEFENDER )
    	mods = DEFENDER_MODS
    if( weaponName in PISTOLS )
    	mods = PISTOL_MODS
    if( weaponName in SNIPERS )
        mods = SNIPER_MODS
    if( weaponName in LAUNCHERS )
    	mods = LAUNCHER_MODS
    player.GiveWeapon( weaponName, mods )
	player.SetActiveWeaponByName( weaponName )
}
*/

// now allowing every weapon to have a custom mod
void function GiveModdedWeapons( entity player, array<string> weapons )
{
	string weaponName = weapons[ RandomInt(weapons.len()) ]
	array<string> mods = []
	if ( weaponName in file.carePackageWeaponMods )
		mods = file.carePackageWeaponMods[weaponName]
	player.GiveWeapon( weaponName, mods )
	player.SetActiveWeaponByName( weaponName )
}

void function RestorePlayerAmmo( entity player )
{
	foreach( entity mainWeapon in player.GetMainWeapons() )
	{
		// this will restore anti-titan's ammo
		try // should do a try-catch for safely adding other classes
		{
			// seriously?! GetWeaponPrimaryAmmoCountMax() only exists on ClientVM
			// use weapon.GetWeaponSettingInt( eWeaponVar.ammo_stockpile_max ) also works!!
			// current restore 3 mags
			//mainWeapon.SetWeaponPrimaryAmmoCount( mainWeapon.GetWeaponPrimaryAmmoCount() + mainWeapon.GetWeaponPrimaryClipCountMax() * 3 )
			// updated, restore all ammo
			mainWeapon.SetWeaponPrimaryAmmoCount( 9999 )
		}
		catch(ex){}
	}
	foreach( entity offhand in player.GetOffhandWeapons() )
	{
		// this will restore ordnances
		try // should do a try-catch for safely adding other classes
		{
			offhand.SetWeaponPrimaryClipCount( offhand.GetWeaponPrimaryClipCountMax() )
		}
		catch(ex){}
	}
}

void function HighlightWeaponAmped( entity weapon )
{
	if ( weapon.IsLoadoutPickup() )
	{
		Highlight_SetOwnedHighlight( weapon, "sp_loadout_pickup" )
		Highlight_SetNeutralHighlight( weapon, "sp_loadout_pickup" )
	}
	else
	{
		Highlight_SetOwnedHighlight( weapon, "enemy_boss_bounty" )
		Highlight_SetNeutralHighlight( weapon, "enemy_boss_bounty" )
	}
}

void function HighlightDropPod( entity pod )
{
	Highlight_SetOwnedHighlight( pod, "enemy_boss_bounty" )
	Highlight_SetNeutralHighlight( pod, "enemy_boss_bounty" )
}

void function DisableDropPodHighlight( entity pod )
{
	Highlight_ClearOwnedHighlight( pod )
	Highlight_ClearNeutralHighlight( pod )
}

void function ExtraSpawner_SpawnReaperCanLaunchTicks( vector pos, vector rot, int team, string reaperSettings = "npc_super_spectre_aitdm", string tickSettings = "npc_frag_drone" )
{
	// nessie fix
	thread Reaper_Spawnpoint( pos, team, 6.2 ) 

	wait 5
	entity reaper = CreateSuperSpectre( team, pos, rot )
	// reaper highlight
	Highlight_SetFriendlyHighlight( reaper, "sp_enemy_pilot" )
	reaper.Highlight_SetParam( 1, 0, < 1,1,1 > )
	Highlight_SetEnemyHighlight( reaper, "enemy_titan" )

	SetSpawnOption_Titanfall( reaper )
	SetSpawnOption_Warpfall( reaper )
	
	SetSpawnOption_AISettings( reaper, reaperSettings )
	
	DispatchSpawn( reaper )
	// this has been modified, but northstar don't support stational point for now, write my own one
	//thread ReaperMinionLauncherThink( reaper, tickSettings ) 
	thread ExtraSpawner_ReaperTickLaunchThink( reaper, tickSettings )
	
	thread ExtraSpawner_ReaperHandler( reaper )
}

void function ExtraSpawner_ReaperTickLaunchThink( entity reaper, string tickType )
{
	reaper.EndSignal( "OnDeath" )

	wait 10 // startup time
	while ( true )
	{
		wait RandomFloatRange( 25.0, 40.0 ) // every 25 - 40 secs try to do a tickLaunch, simple right?
		//WaitFrame() // wasn't good! reapers won't launch if they can see their enemies, should keep letting them launch!

		//printt( reaper,"REAPER TICK LAUNCH:", reaper.GetOrigin() )
		waitthread Reaper_LaunchFragDrone_Think( reaper, tickType )
		//printt( reaper,"REAPER END TICK LAUNCH:", reaper.GetOrigin() )
		while ( GetScriptManagedEntArrayLen( reaper.ai.activeMinionEntArrayID ) > 2 )
			WaitFrame()
	}
}

// Same as SquadHandler, just for reapers
void function ExtraSpawner_ReaperHandler( entity reaper )
{
	array<entity> players = GetPlayerArrayOfEnemies( reaper.GetTeam() )
	foreach ( player in players )
		reaper.Minimap_AlwaysShow( 0, player )
	
	reaper.AssaultSetGoalRadius( 500 )
	
	// Every 10 - 20 secs get a player and go to him
	// Definetly not annoying or anything :)
	while( IsAlive( reaper ) )
	{
		players = GetPlayerArrayOfEnemies( reaper.GetTeam() )
		if ( players.len() != 0 )
		{
			entity player = GetClosest2D( players, reaper.GetOrigin() )
			reaper.AssaultPoint( player.GetOrigin() )
		}
		wait RandomFloatRange( 10.0, 20.0 )
	}
	// thread AITdm_CleanupBoredNPCThread( reaper )
}