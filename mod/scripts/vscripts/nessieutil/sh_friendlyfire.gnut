// this file goes here, for we need client to predict friendly fire conditions
global function Sh_FriendlyFire_Init

global function FriendlyFire_SetEnabled
global function FriendlyFire_IsEnabled
// monarch specifics
global function FriendlyFire_EnableMonarchForcedHeal
global function FriendlyFire_IsMonarchForcedHealthEnabled
// tripwires
global function FriendlyFire_TripWIreSearchForFriendly
global function FriendlyFIre_ShouldTripWireSearchForFriendly

struct
{
    bool friendlyFireOn = false // modified
	bool monarchForcedHeal = false
	bool tripWireSearchFriendly = false
} file

void function Sh_FriendlyFire_Init()
{
    
}

// unused, was in _base_gametype
bool function NotProtectedFromFriendlyFire( entity attacker, entity ent, var damageInfo )
{
	// no any protection

	return false
}

void function FriendlyFire_SetEnabled( bool enable )
{
	file.friendlyFireOn = enable
}

bool function FriendlyFire_IsEnabled()
{
	return file.friendlyFireOn
}

// monarch specifics
void function FriendlyFire_EnableMonarchForcedHeal( bool enable )
{
	file.monarchForcedHeal = enable
}

bool function FriendlyFire_IsMonarchForcedHealthEnabled()
{
	return file.monarchForcedHeal
}

// tripwires
void function FriendlyFire_TripWIreSearchForFriendly( bool search )
{
	file.tripWireSearchFriendly = search
}

bool function FriendlyFIre_ShouldTripWireSearchForFriendly()
{
	return file.tripWireSearchFriendly
}