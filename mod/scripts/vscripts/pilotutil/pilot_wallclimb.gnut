global function Pilot_WallClimb_Init

const float GRUNT_WALLCLIMB_ANGLE_LIMIT = 45.0 // other than this will consider as not facing a wall
const float RAVENANT_WALLCLIMB_ANGLE_LIMIT = 30.0


void function Pilot_WallClimb_Init()
{
    // I can't handle "PilotStartWallClimb" now
    //RegisterSignal( "PilotStartWallClimb" )
    //RegisterSignal( "PilotStopWallClimb" )

    AddCallback_OnPlayerRespawned( OnPlayerRespawned )
}


//////////////////////////////
///// CALLBACK FUNCTIONS /////
//////////////////////////////

void function OnPlayerRespawned( entity player )
{
    thread PilotWallClimbThink( player )
}

//////////////////////////////////
///// CALLBACK FUNCTIONS END /////
//////////////////////////////////



/////////////////////////////
///// UTILITY FUNCTIONS /////
/////////////////////////////

void function PilotWallClimbThink( entity player )
{
	player.EndSignal( "OnDestroy" )

	while( true )
	{
		WaitFrame() // always wait first

		if ( !IsAlive( player ) )
			continue // wait for player alive

		// check wallclimb mod, for later if we add wallrun class?
		bool hasWallClimb = false
        float angleLimit
		array<string> classMods = player.GetPlayerSettingsMods()
        // grunt mode climber
		if ( classMods.contains( "only_wallclimb" ) ) 
        {
			hasWallClimb = true
            angleLimit = GRUNT_WALLCLIMB_ANGLE_LIMIT
        }
        // ravenant climber
        if ( classMods.contains( "wallclimber" ) )
        {
			hasWallClimb = true
            angleLimit = RAVENANT_WALLCLIMB_ANGLE_LIMIT
        }

		if ( !hasWallClimb )
			continue

		// main mechanic: kick player off wall if they're not facing it, only wall climbing!
		if ( player.IsWallRunning() )
		{
			/* // don't check for this, "CHESTFOCUS" is far from player's camera and hard to control
			vector startPos = player.EyePosition()
			int attachID = player.LookupAttachment( "CHESTFOCUS" )
			if ( attachID > 0 )
				startPos = player.GetAttachmentOrigin( attachID )
			*/

			/* // this kind of trace is not enough
			TraceResults traceResult = TraceLine( 
													player.EyePosition(), 
													player.EyePosition() + player.GetViewVector() * 25, // consider this means player facing a wall
													player,
													(TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), 
													TRACE_COLLISION_GROUP_NONE 
												)

			if ( !IsValid( traceResult.hitEnt ) ) // not facing a wall?
				waitthread KickPlayerOffWall( player ) // kick them off
			*/

			vector startPos = player.EyePosition()
			int attachID = player.LookupAttachment( "CHESTFOCUS" )
			if ( attachID > 0 )
				startPos = player.GetAttachmentOrigin( attachID )

			// comparing yaw is enough
			vector viewVec = player.GetViewVector()
			viewVec = AnglesToForward( < 0, VectorToAngles( viewVec ).y, 0 > ) * 50
			vector endPos = startPos + viewVec // get player's viewing wall

			TraceResults traceResult = TraceLine( 
													startPos, 
													endPos,
													player,
													(TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), 
													TRACE_COLLISION_GROUP_NONE 
												)

			if ( !IsValid( traceResult.hitEnt ) ) // can't trace anything
			{
				waitthread KickPlayerOffWall( player ) // knock player off
				continue
			}

			// try to move on the wall( can't handle controller for now )
			if ( player.IsInputCommandHeld( IN_MOVELEFT ) || player.IsInputCommandHeld( IN_MOVERIGHT ) )
			{
				waitthread KickPlayerOffWall( player ) // knock player off
				continue
			}

			// get the wall's normal
			vector normal = traceResult.surfaceNormal
			// get the wall's angle
			vector wallAngles = VectorToAngles( normal )
			// comparing yaw is enough
			float wallAnglesYaw = wallAngles.y

			// get player's viewing angle, comparing yaw is enough
			//float eyeAnglesYaw = player.EyeAngles().y // reverse the angle
			float eyeAnglesYaw = VectorToAngles( viewVec ).y

			float angDiffer = fabs( fabs( wallAnglesYaw - eyeAnglesYaw ) - 180 )

			//print( "Wall Angle: " + string( wallAnglesYaw ) )
			//print( "Player Angle: " + string( eyeAnglesYaw ) )
			//print( "Angle difference: " + string( angDiffer ) )
	
			if ( angDiffer > angleLimit ) // the angle diffrence is bigger than limit?
				waitthread KickPlayerOffWall( player )
		}
	}
}


void function KickPlayerOffWall( entity player )
{
	player.ForceCrouch() // best way to do it
	WaitFrame() // wait is needed if you want to make them able to stand again
	player.UnforceCrouch() // restore stand
	player.ForceStand() // make player stand up for fight, no need to manually cancel crouch
	WaitFrame()
	player.UnforceStand() // restore crouch
}

/////////////////////////////////
///// UTILITY FUNCTIONS END /////
/////////////////////////////////
