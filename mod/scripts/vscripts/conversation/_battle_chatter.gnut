global function BattleChatter_Init
global function PlayBattleChatterLine
global function TryPlayWeaponBattleChatterLine

// northstar modified check
global function SetBattleChatterEnabled_Northstar

// funny modified checks!
global function SetBattleChatterEnableToSelf
global function SetBattleChatterEnableToAll

struct
{
	bool battleChatterEnabled = true
	bool chatterEnableToSelf = false // this will toggle chatter to it's sender can hear( in vanilla you can't hear your own chatters )
	bool chatterEnableToAll = false // this will toggle chatter to all players can hear
} file

void function BattleChatter_Init()
{
	AddCallback_OnPlayerGetsNewPilotLoadout( UpdatePlayerVoiceIndex )
}

// northstar modified check
void function SetBattleChatterEnabled_Northstar( bool enabled )
{
	file.battleChatterEnabled = enabled
}

// funny modified checks!
void function SetBattleChatterEnableToSelf( bool enabled )
{
	file.chatterEnableToSelf = enabled
}

void function SetBattleChatterEnableToAll( bool enabled )
{
	file.chatterEnableToAll = enabled
}

void function PlayBattleChatterLine( entity player, string conversationType )
{
	// northstar modified check
	if ( !file.battleChatterEnabled )
		return
		
	int conversationIndex = GetConversationIndex( conversationType )

	array<entity> chatterTargets
	
	if ( file.chatterEnableToAll )
		chatterTargets = GetPlayerArray() // all players can hear the chatter!
	else
		chatterTargets = GetPlayerArrayOfTeam( player.GetTeam() )

	foreach( entity otherPlayer in chatterTargets )
	{
		bool shouldPlayChatter = false
		if ( file.chatterEnableToSelf )
		{
			if ( ShouldPlayBattleChatter( conversationType, otherPlayer, player ) ) // in order to make player himself can hear his battlechatter
				shouldPlayChatter = true
		}
		else 
		{
			if ( ShouldPlayBattleChatter( conversationType, otherPlayer, player ) && player != otherPlayer )
				shouldPlayChatter = true
		}

		if ( shouldPlayChatter )
			Remote_CallFunction_Replay( otherPlayer, "ServerCallback_PlayBattleChatter", conversationIndex, player.GetEncodedEHandle() )
	}

	/* // vanilla chatter think
	foreach( entity otherPlayer in GetPlayerArrayOfTeam( player.GetTeam() ) )
	{
		//if ( ShouldPlayBattleChatter( conversationType, otherPlayer, player ) && player != otherPlayer )
			Remote_CallFunction_Replay( otherPlayer, "ServerCallback_PlayBattleChatter", conversationIndex, player.GetEncodedEHandle() )
	}
	*/
}

void function TryPlayWeaponBattleChatterLine( entity player, entity weapon )
{
	var chatterEvent = weapon.GetWeaponInfoFileKeyField( "battle_chatter_event" )
	if ( chatterEvent == null )
		return
		
	expect string( chatterEvent )
	PlayBattleChatterLine( player, chatterEvent )
}

void function UpdatePlayerVoiceIndex( entity player, PilotLoadoutDef voiceIndex )
{
	if ( IsPlayerFemale( player ) )
	{
		if ( player.IsMechanical() )
			player.SetPlayerNetInt( "battleChatterVoiceIndex", SelectRandomAndroidFemaleBattleChatterVoice() )
		else
			player.SetPlayerNetInt( "battleChatterVoiceIndex", SelectRandomFemaleBattleChatterVoice() )
	}
	else
	{
		if ( player.IsMechanical() )
			player.SetPlayerNetInt( "battleChatterVoiceIndex", SelectRandomAndroidMaleBattleChatterVoice() )
		else
			player.SetPlayerNetInt( "battleChatterVoiceIndex", SelectRandomMaleBattleChatterVoice() )
	}
}