// 11.27: Changed all settings to "titan_soul" entity instead of player
untyped // I really don't like this thing but .SetPlayerSettings() need it...

global function TitanReplace_Enabled_Init // for enabling in loadedinits_after
global function TitanReplace_Init

global function GetTitanPassiveType
global function RemoveUnmatchedPassive
global function IsCoreActive // abandoned function, using IsTitanCoreFiring() now

///// acrossFile utilities
global function TitanReplace_SetTitanLoadoutReplace
global function TitanReplace_InitEntitySettings
global function TitanReplace_ResetEntitySettings
global function TitanReplace_ApplySettingsAcrossEntity

///// titanType utilities
global function BecomeIon
global function BecomeTone
global function BecomeAtlas
global function BecomeRonin
global function BecomeNorthstar
global function BecomeStryder
global function BecomeScorch
global function BecomeLegion
global function BecomeOgre
global function BecomeBison
global function BecomeMonarch
global function BecomeBrute4
global function BecomeArchon


const array<string> moddedPlayers = 
[ 
	"1007270968017", 	// VoyageDB
	"1003302185211", 	// DZ
	"2311706887", 		// mite
	"1011338569992", 	// G41
	"1007340426216", 	// Jerry_Wang#8123
	"1010087865132", 	// chillyue#5400
	"1007606851794", 	// 军团#7939
	"1000374987953", 	// RCtd#0852
	"1006403284636", 	// wodemaya#0028
	"1007932882179", 	// 抑郁寡欢Z骡子#1903
	"1011146305825", 	// H_A#3930
	"1006393068081", 	// 一位屑中屑的屑铁驭屑铁驭#3838
	"1011667472349", 	// COOPER#7592
	"1007468387616", 	// LOGIC0214( logic#0886 )
	"1003338759893", 	// R9390X#1342
	"1008061878974", 	// yogre416#1123
	"1013455793584", 	// 114514#1281
	"1006799764479"		// ILoveSteam#6158
]

struct
{
	bool defaultReplaceEnabled = false
} file

void function TitanReplace_Enabled_Init()
{
	file.defaultReplaceEnabled = true
}

void function TitanReplace_Init() 
{
	AddSpawnCallback( "npc_titan", OnTitanSpawned )
	AddCallback_OnPilotBecomesTitan( SetPlayerTitanTitle )

	/* // all replaced by the usage of "titanSoul"
	AddCallback_OnPlayerKilled( OnTitanKilled ) // clean up settings on players, no need since we now using titanSouls
	AddCallback_OnNPCKilled( OnTitanKilled ) // clean up settings on players, no need since we now using titanSouls
	AddCallback_OnTitanBecomesPilot( SetOffhandSmokeStat ) // in sv_earn_meter.gnut it's now using "titanSoul.s.disableOffhandSmoke"
	AddCallback_GameStateEnter( eGameState.Prematch, TitanSettingsFix ) // reset every prematch, no need since we now using titanSouls
	
	// init for players, no need since we now using titanSouls
	// register things for ingame script
	if( GetGameState() >= eGameState.Prematch )
	{
		foreach( entity player in GetPlayerArray() )
			InitPlayerStat( player )
	}
	AddCallback_OnClientConnected( TitanReplace_InitEntitySettings )
	*/
}

void function TitanReplace_SetEnabled( bool enabled )
{
	file.defaultReplaceEnabled = enabled
}

void function OnTitanSpawned( entity titan )
{
	TitanReplace_SetTitanLoadoutReplace( titan )
}

void function TitanReplace_SetTitanLoadoutReplace( entity titan )
{
	// always init everything
	entity titanSoul = titan.GetTitanSoul()
	if( !IsValid( titanSoul ) ) // soul not spawned yet, mostly because disembarking, no worries
		return
	TitanReplace_InitEntitySettings( titanSoul ) // init! robbed monarch from npc pilots won't upgrade your weapons( shield regen only ), which means it's no need to setting a "titanSoul.s.disableTitanPick" for them. perfect
	titanSoul.s.titanPassiveType = GetTitanPassiveType( titan ) // for checking player's passiveType

	// following are player titans( pet titans )
	entity player = GetPetTitanOwner( titan )
	if( !IsValid( player ) )
		return
	// check if player has a titan dropping, if not it means player disembarked and created their pet titans, don't give loadouts if so.
	//bool isTitanDropping = expect bool( player.s.replacementDropInProgress )
	//if( !isTitanDropping )
	//	return
	if ( "spawnWithoutSoul" in titan.s )
	{
		// this is defined in CreateAutoTitanForPlayer_ForTitanBecomesPilot(), mark the titan as "disembarked" not "hotdropping"
		if ( expect bool ( titan.s.spawnWithoutSoul ) )
			return
	}
	if( !file.defaultReplaceEnabled ) // init done, following things won't run if settings disabled
		return

	if( titan.GetModelName() == $"models/titans/medium/titan_medium_vanguard.mdl" ||
		titan.GetModelName() == $"models/titans/buddy/titan_buddy.mdl" )
	{
		titanSoul.s.disableTitanPick = true // setting players unable to replace weapons from ground
	}
	if( titan.GetModelName() == $"models/titans/medium/titan_medium_tone_prime.mdl" )
	{
		SendHudMessage(player, "已启用天图泰坦装备，取消至尊泰坦以使用原版强力",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1)
		BecomeAtlas( titan, false, true )
	}
	if( titan.GetModelName() == $"models/titans/heavy/titan_heavy_legion_prime.mdl" )
	{
		SendHudMessage(player, "已启用巨妖泰坦装备，取消至尊泰坦以使用原版军团",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1);
		BecomeOgre( titan, false, true )
	}
	if( titan.GetModelName() == $"models/titans/light/titan_light_ronin_prime.mdl" )
	{
		SendHudMessage(player, "已启用游侠泰坦装备，取消至尊泰坦以使用原版浪人",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1);
		BecomeStryder( titan, false, true )
	}
	if( titan.GetModelName() == $"models/titans/heavy/titan_heavy_scorch_prime.mdl" )
	{
		SendHudMessage(player, "已启用野牛泰坦装备，取消至尊泰坦以使用原版烈焰",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1);
		titanSoul.s.disableTitanPick = true // setting players unable to replace weapons from ground
		BecomeBison( titan, false, true )
	}
	//temp fix
	if( !moddedPlayers.contains( player.GetUID() ) )
		return
	if( titan.GetModelName() == $"models/titans/medium/titan_medium_ion_prime.mdl" )
	{
		SendHudMessage(player, "已启用执政官泰坦装备，取消至尊泰坦以使用原版离子",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1);
		titanSoul.s.disableTitanPick = true // setting players unable to replace weapons from ground
		BecomeArchon( titan, false, true )
	}
	if( titan.GetModelName() == $"models/titans/light/titan_light_northstar_prime.mdl" )
	{
		SendHudMessage(player, "已启用野兽四号泰坦装备，取消至尊泰坦以使用原版北极星",  -1, 0.3, 200, 200, 225, 255, 0.15, 5, 1);
		titanSoul.s.disableTitanPick = true // setting players unable to replace weapons from ground
		BecomeBrute4( titan, false, true )
	}
}

void function SetPlayerTitanTitle( entity player, entity titan )
{
	thread SetPlayerTitanTitle_Threaded( player ) // needs thread, to make soul valid
}

void function SetPlayerTitanTitle_Threaded( entity player )
{
	WaitFrame()

	entity titanSoul = player.GetTitanSoul()
	if( !IsValid( titanSoul ) )
		return
	if( titanSoul.s.titanTitle != "" )
	{
		if( IsAlive( player ) )
			player.SetTitle( titanSoul.s.titanTitle )
	}
}

/*
void function OnTitanKilled( entity victim, entity attacker,var damageInfo )
{
	if( !victim.IsTitan() )
		return
	// Clean up settings!
	if( victim.IsPlayer() )
	{
		TitanReplace_ResetEntitySettings( victim )
	}
	else if( IsPetTitan( victim ) )
	{
		entity owner = GetPetTitanOwner( victim )
		if( !IsValid( owner ) )
			return
		if( owner.IsPlayer() )
		{
			TitanReplace_ResetEntitySettings( owner )
		}
	}
}
*/

/* // in sv_earn_meter.gnut it's now using "titanSoul.s.disableOffhandSmoke"
void function SetOffhandSmokeStat( entity player, entity titan )
{
	titan.s.disableOffhandSmoke <- player.s.disableOffhandSmoke
}
*/

/*
void function TitanSettingsFix()
{
	foreach( entity player in GetPlayerArray() )
	{
		TitanReplace_ResetEntitySettings( player )
	}
}
*/

///// settings functions!
void function TitanReplace_InitEntitySettings( entity ent ) // both using for players and titanSouls
{
	ent.s.titanTitle <- "" 				// string
	ent.s.shouldFPEmbark <- false 		// bool
	ent.s.disableOffhandSmoke <- false 	// bool
	ent.s.classicExecution <- false 	// bool
	ent.s.titanPassiveType <- ""		// string
	ent.s.disableTitanPick <- false		// bool
}

void function TitanReplace_ResetEntitySettings( entity ent )
{
	ent.s.titanTitle = ""
	ent.s.shouldFPEmbark = false
	ent.s.disableOffhandSmoke = false
	ent.s.classicExecution = false
	ent.s.titanPassiveType = ""
	ent.s.disableTitanPick = false
}

void function TitanReplace_ApplySettingsAcrossEntity( entity baseEnt, entity targetEnt )
{
	targetEnt.s.titanTitle = baseEnt.s.titanTitle
	targetEnt.s.shouldFPEmbark = baseEnt.s.shouldFPEmbark
	targetEnt.s.disableOffhandSmoke = baseEnt.s.shouldFPEmbark
	targetEnt.s.classicExecution = baseEnt.s.shouldFPEmbark
	targetEnt.s.titanPassiveType = baseEnt.s.shouldFPEmbark
	targetEnt.s.disableTitanPick = baseEnt.s.shouldFPEmbark
}
///////////

void function BecomeIon( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 离子 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
				player.SetTitle( "離子" )
			}
			soul.s.titanTitle = "離子"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false
			
			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			if( passiveType == "Defence" )
			{
				titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield_ion", OFFHAND_SPECIAL, ["pas_ion_vortex"] )
				GivePassive( titan, ePassives.PAS_ION_VORTEX )
			}
			else
				titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield_ion", OFFHAND_SPECIAL)

			//Tactical
			if( passiveType == "Tactical" )
			{
				titan.GiveOffhandWeapon("mp_titanability_laser_trip", OFFHAND_ANTIRODEO, ["pas_ion_tripwire"] )
				GivePassive( titan, ePassives.PAS_ION_TRIPWIRE )
			}
			else
				titan.GiveOffhandWeapon("mp_titanability_laser_trip", OFFHAND_ANTIRODEO )

			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_laser_lite", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
                {
                    titan.GiveWeapon ("mp_titanweapon_particle_accelerator", ["pas_ion_weapon"])
                    GivePassive( titan, ePassives.PAS_ION_WEAPON )
                }
                else if( passiveType == "Offence" )
				{
                    titan.GiveWeapon ("mp_titanweapon_particle_accelerator", ["pas_ion_weapon_ads"])
					GivePassive( titan, ePassives.PAS_ION_WEAPON_ADS )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_particle_accelerator")
            }

			//Titan Core
			if( passiveType == "Core" )
			{
				titan.GiveOffhandWeapon( "mp_titancore_laser_cannon", OFFHAND_EQUIPMENT, ["pas_ion_lasercannon"] )
				GivePassive( titan, ePassives.PAS_ION_LASERCANNON )
			}
			else
				titan.GiveOffhandWeapon( "mp_titancore_laser_cannon", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_ion", OFFHAND_MELEE )
			
			
        }
	}
}

void function BecomeTone( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 强力 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
				player.SetTitle( "強力" )
			}
			soul.s.titanTitle = "強力"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			if( passiveType == "Defence" )
            {
				titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL, ["pas_tone_wall"] )
                GivePassive( titan, ePassives.PAS_TONE_WALL )
            }
            else
				titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL)

			//Tactical
			if( passiveType == "Tactical" )
			{
				titan.GiveOffhandWeapon("mp_titanability_sonar_pulse", OFFHAND_ANTIRODEO, ["pas_tone_sonar"] )
				GivePassive( titan, ePassives.PAS_TONE_SONAR )
			}
			else
				titan.GiveOffhandWeapon("mp_titanability_sonar_pulse", OFFHAND_ANTIRODEO )

			//Offence
            if( passiveType == "Offence" )
			{
				titan.GiveOffhandWeapon("mp_titanweapon_tracker_rockets", OFFHAND_ORDNANCE, ["pas_tone_rockets"] )
				GivePassive( titan, ePassives.PAS_TONE_ROCKETS )
			}
			else
                titan.GiveOffhandWeapon("mp_titanweapon_tracker_rockets", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
				{
                    titan.GiveWeapon ("mp_titanweapon_sticky_40mm", ["pas_tone_weapon"])
					GivePassive( titan, ePassives.PAS_TONE_WEAPON )
				}
				else if( passiveType == "Core" )
				{
                    titan.GiveWeapon ("mp_titanweapon_sticky_40mm", ["pas_tone_burst"])
					GivePassive( titan, ePassives.PAS_TONE_BURST )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_sticky_40mm")
            }

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_salvo_core", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_tone", OFFHAND_MELEE )
        }
	}
}

void function BecomeAtlas( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 天图 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "天圖" )
			}
			soul.s.titanTitle = "天圖"
			soul.s.shouldFPEmbark = true
			soul.s.disableOffhandSmoke = true
			soul.s.classicExecution = true

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield", OFFHAND_SPECIAL, ["slow_recovery_vortex", "atlas_vortex"] )

			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_smoke", OFFHAND_ANTIRODEO, ["fast_warmup"] )

			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_shoulder_rockets", OFFHAND_ORDNANCE, ["upgradeCore_Vanguard", "atlas_rockets"] )

			//Weapon
            if( !isPickup )
			{
                titan.GiveWeapon ("mp_titanweapon_sticky_40mm", ["atlas_40mm"])
            }

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_amp_core", OFFHAND_EQUIPMENT, ["damage_core"] )
		
            //Melee
            //titan.GiveOffhandWeapon( "melee_titan_punch_ion", OFFHAND_MELEE, ["berserker", "dash_punch"] )
			titan.GiveOffhandWeapon( "melee_titan_punch_ion", OFFHAND_MELEE )
        }
	}
}

void function BecomeRonin( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
           		SendHudMessage( player, "更换至 浪人 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "浪人" )
			}
			soul.s.titanTitle = "浪人"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
            titan.GiveOffhandWeapon("mp_titanability_basic_block", OFFHAND_SPECIAL )

			//Tactical
			if( passiveType == "Defence" )
            {
				titan.GiveOffhandWeapon("mp_titanability_phase_dash", OFFHAND_ANTIRODEO, ["pas_ronin_autoshift"] )
                GivePassive( titan, ePassives.PAS_RONIN_AUTOSHIFT )
            }
            else if( passiveType == "Tactical" )
			{
                titan.GiveOffhandWeapon("mp_titanability_phase_dash", OFFHAND_ANTIRODEO, ["pas_ronin_phase"] )
				GivePassive( titan, ePassives.PAS_RONIN_PHASE )
			}
			else
				titan.GiveOffhandWeapon("mp_titanability_phase_dash", OFFHAND_ANTIRODEO)

			//Offence
            if( passiveType == "Offence" )
			{
				titan.GiveOffhandWeapon("mp_titanweapon_arc_wave", OFFHAND_ORDNANCE, ["pas_ronin_arcwave"] )
				GivePassive( titan, ePassives.PAS_RONIN_ARCWAVE )
			}
			else
                titan.GiveOffhandWeapon("mp_titanweapon_arc_wave", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
				{
                    titan.GiveWeapon ("mp_titanweapon_leadwall", ["pas_ronin_weapon"])
					GivePassive( titan, ePassives.PAS_RONIN_WEAPON )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_leadwall")
            }

			//Titan Core
            if( passiveType == "Core" )
			{
				titan.GiveOffhandWeapon( "mp_titancore_shift_core", OFFHAND_EQUIPMENT, ["pas_ronin_swordcore"] )
				GivePassive( titan, ePassives.PAS_RONIN_SWORDCORE )
			}
			else
				titan.GiveOffhandWeapon( "mp_titancore_shift_core", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_sword", OFFHAND_MELEE )
        }
	}
}

void function BecomeNorthstar( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 北极星 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "北極星" )
			}
			soul.s.titanTitle = "北極星"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
            if( passiveType == "Defence" )
			{
                titan.GiveOffhandWeapon("mp_titanability_tether_trap", OFFHAND_SPECIAL, ["pas_northstar_trap"] )
				GivePassive( titan, ePassives.PAS_NORTHSTAR_TRAP )
			}
			else
                titan.GiveOffhandWeapon("mp_titanability_tether_trap", OFFHAND_SPECIAL )

			//Tacticals, northstar is a bit special
			if( passiveType == "Core" )
                titan.GiveOffhandWeapon("mp_titanability_hover", OFFHAND_ANTIRODEO, ["pas_northstar_flightcore"] )
			else
				titan.GiveOffhandWeapon("mp_titanability_hover", OFFHAND_ANTIRODEO)

			//Offence
            if( passiveType == "Offence" )
			{
				titan.GiveOffhandWeapon("mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE, ["pas_northstar_cluster"] )
				GivePassive( titan, ePassives.PAS_NORTHSTAR_CLUSTER )
			}
			else
                titan.GiveOffhandWeapon("mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
				{
                    titan.GiveWeapon ("mp_titanweapon_sniper", ["pas_northstar_weapon"])
					GivePassive( titan, ePassives.PAS_NORTHSTAR_WEAPON )
				}
				else if( passiveType == "Tactical" )
				{
					titan.GiveWeapon ("mp_titanweapon_sniper", ["pas_northstar_optics"])
					GivePassive( titan, ePassives.PAS_NORTHSTAR_OPTICS )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_sniper")
            }

			//Titan Core
            if( passiveType == "Core" )
            {
				titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT, ["pas_northstar_flightcore"] )
                GivePassive( titan, ePassives.PAS_NORTHSTAR_FLIGHTCORE )
            }
            else
				titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE )
        }
	}
}

void function BecomeStryder( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 游侠 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "游俠" )
			}
			soul.s.titanTitle = "游俠"
			soul.s.shouldFPEmbark = true
			soul.s.disableOffhandSmoke = true
			soul.s.classicExecution = true

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			titan.GiveOffhandWeapon("mp_titanweapon_stun_laser", OFFHAND_SPECIAL, ["pas_vanguard_shield", "stryder_laser"] ) // was["energy_field", "stryder_laser"]

			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_hover", OFFHAND_ANTIRODEO )

			//Offence
			//titan.GiveOffhandWeapon("mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE )
			titan.GiveOffhandWeapon( "mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE, ["stryder_rockets"] )

			//Weapon
            if( !isPickup )
			{
                titan.GiveWeapon ("mp_titanweapon_rocketeer_rocketstream")
            }

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_shift_core", OFFHAND_EQUIPMENT, ["dash_core"] )
			// testing tesla core
			//titan.GiveOffhandWeapon( "mp_titancore_laser_cannon", OFFHAND_EQUIPMENT, ["tesla_core"] )

            //Melee
            //titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE, ["berserker", "dash_punch"] )
			titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE )
		}
	}
}

void function BecomeScorch( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 烈焰 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "烈焰" )
			}
			soul.s.titanTitle = "烈焰"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
            if( passiveType == "Defence" )
			{
                titan.GiveOffhandWeapon("mp_titanweapon_heat_shield", OFFHAND_SPECIAL, ["pas_scorch_shield"] )
				GivePassive( titan, ePassives.PAS_SCORCH_SHIELD )
			}
			else
                titan.GiveOffhandWeapon("mp_titanweapon_heat_shield", OFFHAND_SPECIAL )

			//Tacticals, scorch is a bit special
			if( passiveType == "Tactical" )
                GivePassive( titan, ePassives.PAS_SCORCH_SELFDMG )
            titan.GiveOffhandWeapon("mp_titanability_slow_trap", OFFHAND_ANTIRODEO )

			//Offence
            if( passiveType == "Offence" )
			{
				titan.GiveOffhandWeapon("mp_titanweapon_flame_wall", OFFHAND_ORDNANCE, ["pas_scorch_firewall"] )
				GivePassive( titan, ePassives.PAS_SCORCH_FIREWALL )
			}
			else
                titan.GiveOffhandWeapon("mp_titanweapon_flame_wall", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
				{
                    titan.GiveWeapon ("mp_titanweapon_meteor", ["pas_scorch_weapon"])
					GivePassive( titan, ePassives.PAS_SCORCH_WEAPON )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_meteor")
            }

			//Titan Core
            if( passiveType == "Core" )
			{
				titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT, ["pas_scorch_flamecore"] )
				GivePassive( titan, ePassives.PAS_SCORCH_FLAMECORE )
			}
			else
				titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_scorch", OFFHAND_MELEE )
        }
	}
}

void function BecomeLegion( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 军团 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "軍團" )
			}
			soul.s.titanTitle = "軍團"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
            if( passiveType == "Defence" )
            {
                titan.GiveOffhandWeapon("mp_titanability_gun_shield", OFFHAND_SPECIAL, ["pas_legion_gunshield"] )
                GivePassive( titan, ePassives.PAS_LEGION_GUNSHIELD )
            }
            else
                titan.GiveOffhandWeapon("mp_titanability_gun_shield", OFFHAND_SPECIAL )

			//Tacticals
            titan.GiveOffhandWeapon("mp_titanability_ammo_swap", OFFHAND_ANTIRODEO )

			//Offence
            if( passiveType == "Offence" )
			{
				titan.GiveOffhandWeapon("mp_titanability_power_shot", OFFHAND_ORDNANCE, ["pas_legion_chargeshot"] )
				GivePassive( titan, ePassives.PAS_LEGION_CHARGESHOT )
			}
			else
                titan.GiveOffhandWeapon("mp_titanability_power_shot", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                if( passiveType == "Weapon" )
				{
                    titan.GiveWeapon ("mp_titanweapon_predator_cannon", ["pas_legion_weapon"])
					GivePassive( titan, ePassives.PAS_LEGION_WEAPON)
				}
				if( passiveType == "Tactical" )
				{
                    titan.GiveWeapon ("mp_titanweapon_predator_cannon", ["pas_legion_spinup"])
					GivePassive( titan, ePassives.PAS_LEGION_SPINUP )
				}
				else
                    titan.GiveWeapon ("mp_titanweapon_predator_cannon")
            }

			//Titan Core
            if( passiveType == "Core" )
			{
				titan.GiveOffhandWeapon( "mp_titancore_siege_mode", OFFHAND_EQUIPMENT, ["pas_legion_smartcore"] )
				GivePassive( titan, ePassives.PAS_LEGION_SMARTCORE )
			}
			else
				titan.GiveOffhandWeapon( "mp_titancore_siege_mode", OFFHAND_EQUIPMENT )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_legion", OFFHAND_MELEE )
        }
	}
}

void function BecomeOgre( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 巨妖 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "巨妖" )
			}
			soul.s.titanTitle = "巨妖"
			soul.s.shouldFPEmbark = true
			soul.s.disableOffhandSmoke = true
			soul.s.classicExecution = true

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			titan.GiveOffhandWeapon("mp_titanweapon_heat_shield", OFFHAND_SPECIAL, ["ogre_shield"] )

			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_sonar_pulse", OFFHAND_ANTIRODEO ) //["ogre_sonar"]

			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_homing_rockets", OFFHAND_ORDNANCE, ["ogre_rockets"] )

			//Weapon
            if( !isPickup )
			{
                titan.GiveWeapon ("mp_titanweapon_triplethreat", ["ogre_triplethreat"])
            }

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_upgrade", OFFHAND_EQUIPMENT, ["shield_core"] )
            soul.SetTitanSoulNetInt( "upgradeCount", 3 )
            //soul.SetShieldHealthMax( 3500 )
		
            //Melee
            //titan.GiveOffhandWeapon( "melee_titan_punch_legion", OFFHAND_MELEE, ["berserker", "dash_punch"] )
			titan.GiveOffhandWeapon( "melee_titan_punch_legion", OFFHAND_MELEE )
		}
	}
}

void function BecomeBison( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				//Bison have damage reduction
				soul.SetPreventCrits( true )
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 野牛 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "野牛" )
			}
			soul.s.titanTitle = "野牛"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL, ["brute4_bubble_shield", "molting_dome", "bison_dome"] )

			//Tactical
			titan.GiveOffhandWeapon("mp_ability_grapple", OFFHAND_ANTIRODEO, ["bison_grapple"] )

			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_dumbfire_rockets", OFFHAND_ORDNANCE, ["pas_northstar_cluster", "fd_twin_cluster"] )
			//titan.GiveOffhandWeapon("mp_titanweapon_flame_wall", OFFHAND_ORDNANCE, ["wrecking_ball"] )

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT, ["ground_slam"] )
		
            //Melee
            //titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE, ["berserker", "dash_punch"] )
			titan.GiveOffhandWeapon( "melee_titan_punch_fighter", OFFHAND_MELEE, ["berserker", "allow_as_primary", "dash_punch", "bison_punch"] )
			titan.SetActiveWeaponByName( "melee_titan_punch_fighter" )
		}
	}
}

void function BecomeMonarch( entity titan, bool isPickup = false, bool isSpawning = false )
{
    if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
            if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
            	SendHudMessage( player, "更换至 帝王 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
            	player.SetTitle( "帝王" )
			}
			soul.s.titanTitle = "帝王"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )

			//Defence
			titan.GiveOffhandWeapon("mp_titanweapon_stun_laser", OFFHAND_SPECIAL )

			//Tactical
			titan.GiveOffhandWeapon("mp_titanability_rearm", OFFHAND_ANTIRODEO )

			//Offence
			titan.GiveOffhandWeapon("mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE )

			//Weapon
            if( !isPickup )
			{
                titan.GiveWeapon ("mp_titanweapon_xo16_vanguard")
            }

			//Titan Core
			titan.GiveOffhandWeapon( "mp_titancore_upgrade", OFFHAND_EQUIPMENT )
            soul.SetTitanSoulNetInt( "upgradeCount", 3 )
		
            //Melee
            titan.GiveOffhandWeapon( "melee_titan_punch_vanguard", OFFHAND_MELEE )
        }
	}
}

void function BecomeBrute4( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
			if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
				SendHudMessage( player, "更换至 野兽四号 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
				player.SetTitle( "野獸四號" )
			}
			soul.s.titanTitle = "野獸四號"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )
			
			//Defence
			if( passiveType == "Defence" )
				titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL, ["brute4_bubble_shield", "molting_dome"] )
			else
				titan.GiveOffhandWeapon("mp_titanability_particle_wall", OFFHAND_SPECIAL, ["brute4_bubble_shield"] )

			//Tactical
			if( passiveType == "Tactical" )
				titan.GiveOffhandWeapon("mp_titanability_rocketeer_ammo_swap", OFFHAND_ANTIRODEO, ["explosive_reserves"] )
			else
				titan.GiveOffhandWeapon("mp_titanability_rocketeer_ammo_swap", OFFHAND_ANTIRODEO )

			//Offence
			if( passiveType == "Offence" )
				titan.GiveOffhandWeapon("mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE, ["grenade_launcher", "magnetic_rollers"] )
			else
				titan.GiveOffhandWeapon("mp_titanweapon_salvo_rockets", OFFHAND_ORDNANCE, ["grenade_launcher"] )

			//Weapon
			if( !isPickup )
			{
				if( passiveType == "Weapon" )
					titan.GiveWeapon ("mp_titanweapon_rocketeer_rocketstream", ["brute4_rocket_launcher", "straight_shot"])
				else
					titan.GiveWeapon ("mp_titanweapon_rocketeer_rocketstream", ["brute4_rocket_launcher"])
			}

			//Titan Core
			if( passiveType == "Core" )
				titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT, ["barrage_core", "rapid_detonator"] )
			else
				titan.GiveOffhandWeapon( "mp_titancore_flight_core", OFFHAND_EQUIPMENT, ["barrage_core"] )

			//Melee
			titan.GiveOffhandWeapon( "melee_titan_punch_northstar", OFFHAND_MELEE )
		}
	}
}

void function BecomeArchon( entity titan, bool isPickup = false, bool isSpawning = false )
{
	if( !titan.IsTitan() )
		return
	if (IsValid( titan )) 
	{
		entity soul = titan.GetTitanSoul()
		entity player = titan
		if( !titan.IsPlayer() )
		{
			player = GetPetTitanOwner( titan )
		}
		if (IsValid( soul ) && IsValid( player ))
		{
			if( IsTitanCoreFiring( player ) )
            {
                SendHudMessage( player, "核心启动期间不可以更换装备", -1, 0.3, 255, 255, 0, 0, 0, 3, 0 )
                return
            }
			if( !isPickup )
			{
				foreach( entity weapon in titan.GetMainWeapons() )
					titan.TakeWeaponNow( weapon.GetWeaponClassName() )
			}
            foreach( entity offhand in titan.GetOffhandWeapons() )
                titan.TakeWeaponNow( offhand.GetWeaponClassName() )
			if( !isSpawning )
			{
				SendHudMessage( player, "更换至 执政官 泰坦技能组", -1, 0.3, 255, 255, 0, 0, 0.15, 6, 0.15 )
				player.SetTitle( "執政官" )
			}
			soul.s.titanTitle = "執政官"
			soul.s.shouldFPEmbark = false
			soul.s.disableOffhandSmoke = false
			soul.s.classicExecution = false

			string passiveType = expect string( soul.s.titanPassiveType )
			RemoveUnmatchedPassive( titan )
			
			//Defence
			if( passiveType == "Defence" )
				titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield", OFFHAND_SPECIAL, ["slow_recovery_vortex", "shock_shield", "immobilizer_shield"] )
			else
				titan.GiveOffhandWeapon("mp_titanweapon_vortex_shield", OFFHAND_SPECIAL, ["slow_recovery_vortex", "shock_shield"] )
				
			//Tactical
			//if(SoulHasPassive( soul, ePassives.PAS_ION_LASERCANNON ))
			//	titan.GiveOffhandWeapon("mp_titanability_laser_trip", OFFHAND_ANTIRODEO, ["tesla_node", "dual_nodes"] )
			//else
				titan.GiveOffhandWeapon("mp_titanability_laser_trip", OFFHAND_ANTIRODEO, ["tesla_node"] )

			//Offence
			if( passiveType == "Offence" )
				titan.GiveOffhandWeapon("mp_titanweapon_stun_laser", OFFHAND_ORDNANCE, ["charge_ball", "thylord_module"] )
			else
				titan.GiveOffhandWeapon("mp_titanweapon_stun_laser", OFFHAND_ORDNANCE, ["charge_ball"] )

			//Weapon
			if( !isPickup )
			{
				if( passiveType == "Tactical" )
					titan.GiveWeapon ("mp_titanweapon_sniper", ["arc_cannon", "archon_arc_cannon", "archon_arc_cannon_charge_sound", "chain_reaction"])
				else if( passiveType == "Weapon" )
					titan.GiveWeapon ("mp_titanweapon_sniper", ["arc_cannon", "archon_arc_cannon", "archon_arc_cannon_charge_sound", "generator_mod"])
				else
					titan.GiveWeapon ("mp_titanweapon_sniper", ["arc_cannon", "archon_arc_cannon", "archon_arc_cannon_charge_sound"])
			}

			//Titan Core
			if( passiveType == "Core" )
				titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT, ["storm_core", "bring_the_thunder"] )
			else
				titan.GiveOffhandWeapon( "mp_titancore_flame_wave", OFFHAND_EQUIPMENT, ["storm_core"] )

			//Melee
			titan.GiveOffhandWeapon( "melee_titan_punch_ion", OFFHAND_MELEE )
		}
	}
}

string function GetTitanPassiveType( entity titan )
{
    entity soul = titan.GetTitanSoul()

	if(
		SoulHasPassive( soul, ePassives.PAS_ION_WEAPON ) ||
		SoulHasPassive( soul, ePassives.PAS_TONE_WEAPON ) ||
		SoulHasPassive( soul, ePassives.PAS_SCORCH_WEAPON ) ||
		SoulHasPassive( soul, ePassives.PAS_LEGION_WEAPON ) ||
		SoulHasPassive( soul, ePassives.PAS_RONIN_WEAPON ) ||
		SoulHasPassive( soul, ePassives.PAS_NORTHSTAR_WEAPON )
	)
		return "Weapon"
	if(
		SoulHasPassive( soul, ePassives.PAS_ION_TRIPWIRE ) ||
		SoulHasPassive( soul, ePassives.PAS_TONE_SONAR ) ||
		SoulHasPassive( soul, ePassives.PAS_SCORCH_SELFDMG ) ||
		SoulHasPassive( soul, ePassives.PAS_LEGION_SPINUP ) ||
		SoulHasPassive( soul, ePassives.PAS_RONIN_PHASE ) ||
		SoulHasPassive( soul, ePassives.PAS_NORTHSTAR_OPTICS )
	)
		return "Tactical"
	if(
		SoulHasPassive( soul, ePassives.PAS_ION_WEAPON_ADS ) ||
		SoulHasPassive( soul, ePassives.PAS_TONE_ROCKETS ) ||
		SoulHasPassive( soul, ePassives.PAS_SCORCH_FIREWALL ) ||
		SoulHasPassive( soul, ePassives.PAS_LEGION_CHARGESHOT ) ||
		SoulHasPassive( soul, ePassives.PAS_RONIN_ARCWAVE ) ||
		SoulHasPassive( soul, ePassives.PAS_NORTHSTAR_CLUSTER )
	)
		return "Offence"
	if(
		SoulHasPassive( soul, ePassives.PAS_ION_VORTEX ) ||
		SoulHasPassive( soul, ePassives.PAS_TONE_WALL ) ||
		SoulHasPassive( soul, ePassives.PAS_SCORCH_SHIELD ) ||
		SoulHasPassive( soul, ePassives.PAS_LEGION_GUNSHIELD ) ||
		SoulHasPassive( soul, ePassives.PAS_RONIN_AUTOSHIFT ) ||
		SoulHasPassive( soul, ePassives.PAS_NORTHSTAR_TRAP )
	)
		return "Defence"
	if(
		SoulHasPassive( soul, ePassives.PAS_ION_LASERCANNON ) ||
		SoulHasPassive( soul, ePassives.PAS_TONE_BURST ) ||
		SoulHasPassive( soul, ePassives.PAS_SCORCH_FLAMECORE ) ||
		SoulHasPassive( soul, ePassives.PAS_LEGION_SMARTCORE ) ||
		SoulHasPassive( soul, ePassives.PAS_RONIN_SWORDCORE ) ||
		SoulHasPassive( soul, ePassives.PAS_NORTHSTAR_FLIGHTCORE )
	)
		return "Core"

	return "Monarch"
}

void function RemoveUnmatchedPassive( entity titan )
{
    if( !titan.IsTitan() )
		return
	if( !titan.IsPlayer() )
		return

	entity soul = titan.GetTitanSoul()
	/*
    float shieldMultiplier = float( soul.GetShieldHealthMax() / 2500 )
    soul.SetShieldHealth( int( titan.GetShieldHealth() / shieldMultiplier ) )
    soul.SetShieldHealthMax( 2500 )
	*/
	string setFile

	if ( titan.IsPlayer() )
	{
		setFile = titan.GetPlayerSettings()
	}
	else
	{
		string aiSettingsFile = titan.GetAISettingsName()
		setFile = expect string( Dev_GetAISettingByKeyField_Global( aiSettingsFile, "npc_titan_player_settings" ) )
	}

    if(
        setFile != "titan_atlas_stickybomb" ||
        setFile != "titan_atlas_ion_prime"
    )
	{
		TakePassive( titan, ePassives.PAS_ION_TRIPWIRE )
		TakePassive( titan, ePassives.PAS_ION_VORTEX )
		TakePassive( titan, ePassives.PAS_ION_LASERCANNON )
		TakePassive( titan, ePassives.PAS_ION_WEAPON )
		TakePassive( titan, ePassives.PAS_ION_WEAPON_ADS )
	}

    if(
        setFile != "titan_atlas_tracker" ||
        setFile != "titan_atlas_tone_prime"
    )
	{
        TakePassive( titan, ePassives.PAS_TONE_BURST )
		TakePassive( titan, ePassives.PAS_TONE_ROCKETS )
		TakePassive( titan, ePassives.PAS_TONE_SONAR )
		TakePassive( titan, ePassives.PAS_TONE_WALL )
		TakePassive( titan, ePassives.PAS_TONE_WEAPON )
	}

    if(
        setFile != "titan_stryder_leadwall" ||
        setFile != "titan_stryder_ronin_prime"
    )
	{
        TakePassive( titan, ePassives.PAS_RONIN_ARCWAVE )
		TakePassive( titan, ePassives.PAS_RONIN_AUTOSHIFT )
		TakePassive( titan, ePassives.PAS_RONIN_PHASE )
		TakePassive( titan, ePassives.PAS_RONIN_SWORDCORE )
		TakePassive( titan, ePassives.PAS_RONIN_WEAPON )
	}

    if(
        setFile != "titan_stryder_sniper" ||
        setFile != "titan_stryder_northstar_prime"
    )
	{
        TakePassive( titan, ePassives.PAS_NORTHSTAR_CLUSTER )
		TakePassive( titan, ePassives.PAS_NORTHSTAR_FLIGHTCORE )
		TakePassive( titan, ePassives.PAS_NORTHSTAR_OPTICS )
		TakePassive( titan, ePassives.PAS_NORTHSTAR_TRAP )
		TakePassive( titan, ePassives.PAS_NORTHSTAR_WEAPON )
	}

    if(
        setFile != "titan_ogre_meteor" ||
        setFile != "titan_ogre_scorch_prime"
    )
	{
        TakePassive( titan, ePassives.PAS_SCORCH_FIREWALL )
		TakePassive( titan, ePassives.PAS_SCORCH_FLAMECORE )
		TakePassive( titan, ePassives.PAS_SCORCH_SELFDMG )
		TakePassive( titan, ePassives.PAS_SCORCH_SHIELD )
		TakePassive( titan, ePassives.PAS_SCORCH_WEAPON )
	}

    if(
        setFile != "titan_ogre_minigun" ||
        setFile != "titan_ogre_legion_prime"
    )
	{
        TakePassive( titan, ePassives.PAS_LEGION_CHARGESHOT )
		TakePassive( titan, ePassives.PAS_LEGION_GUNSHIELD )
		TakePassive( titan, ePassives.PAS_LEGION_SMARTCORE )
		TakePassive( titan, ePassives.PAS_LEGION_SPINUP )
		TakePassive( titan, ePassives.PAS_LEGION_WEAPON )
	}

}

// abandoned, respawn has IsTitanCoreFiring() which is better
bool function IsCoreActive( entity titan )
{
	if( !titan.IsPlayer() )
		return false
	//if( TitanCore_IsPlayerCoreActivating( titan ) ) // this function has been removed
	if( IsTitanCoreFiring( titan ) )
		return true
	return false
	
	/* // stupid hardcoded checks
    entity weapon = titan.GetActiveWeapon()

    string classname = weapon.GetWeaponClassName()
    array<string> mods = weapon.GetMods()
    if( 
        classname == "mp_titancore_laser_cannon" ||
        classname == "mp_titancore_salvo_core" ||
        classname == "mp_titancore_amp_core" ||
        classname == "mp_titancore_flame_wave" ||
        classname == "mp_titanweapon_flightcore_rockets"
    )
        return true

    if(
        mods.contains( "Smart_Core" ) ||
        mods.contains( "super_charged" )
    )
        return true

    return false
	*/
}