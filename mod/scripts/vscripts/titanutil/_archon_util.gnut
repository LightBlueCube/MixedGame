// this one is different from sh_archon_util, it's a serverside variant archon

global function ArchonUtil_Init

struct PlayerSharedEnergy
{
    float regenRate
    float regenDelay
}

struct
{
    table<entity, bool> playerEmbarkedArchonTable
    table<entity, PlayerSharedEnergy> archonOwnerSharedEnergyTable
}

void function ArchonUtil_Init()
{
    AddCallback_OnClientConnected( OnClientConnected )

    AddCallback_OnPilotBecomesTitan( OnPlayerBecomeArchon )
    AddCallback_OnTitanBecomesPilot( OnArchonBecomePilot )
}

void function OnClientConnected( entity player )
{
    // init
    file.playerEmbarkedArchonTable[ player ] <- false
    PlayerSharedEnergy emptyStruct
    file.archonOwnerSharedEnergyTable[ player ] <- emptyStruct
}

void function OnPlayerBecomeArchon( entity player, entity titan )
{
    if ( !IsArchon( titan ) ) // titan is not archon...
        return
    file.playerEmbarkedArchonTable[ player ] = true // player has become archon
    print( "player becomes archon!" )
}

void function OnArchonBecomePilot( entity player, entity titan )
{
    if ( !file.playerEmbarkedArchonTable[ player ] ) // player wasn't a archon
    {
        player.SetSharedEnergyRegenDelay( 0. )
    }
}


bool function IsArchon( entity titan )
{
    entity soul = titan.GetTitanSoul()
    if ( !IsValid( soul ) )
        return false
    if ( soul.IsEjecting() )
        return false

    entity shieldWeapon
    foreach ( entity weapon in player.GetOffhandWeapons() )
    {
        if ( !weapon.HasMod( "archon_vortex" ) )
            shieldWeapon = 
    }
    if ( !IsValid( shieldWeapon ) )
        return
    
        return
}