untyped
global function NessieDebug_Init
global function DebugParticle

global function SpawnHoloPulseAtPosition
global function SpawnWeaponEntity_CountLifeTime
//global function PlayAnimGestureFromScript
global function CreateViewEntityForPlayer


array<string> nessieDebugger = ["1007270968017"]
table< string, int > playerAttackCountTable

const asset DEBUGGING_PARTICLE = $"P_plasma_exp_LG" // to control

const asset SCREENFX_WARPJUMP                      = $"P_warpjump_FP"
const asset SCREENFX_WARPJUMPDLIGHT                = $"warpjump_CH_dlight"
const asset FX_KILLSHOT_BLOODSPRAY                 = $"P_deathfx_human"
const asset FX_BLOODSPRAY_DECAL_SML                = $"P_deathfx_human_decal_SML"
const asset FX_BLOODSPRAY_DECAL_MED                = $"P_deathfx_human_decal_MED"
const asset FX_BLOODSPRAY_DECAL_LRG                = $"P_deathfx_human_decal_LRG"

void function NessieDebug_Init()
{
	// new test things
	// these has been turn to unused
	//MeleeSyncedHuman_EnableRandomExecutions( true ) 
	//MeleeSyncedHuman_AlwaysDoAiExecutions( true )
	//MeleeSyncedTitan_EnableRandomExecutions( true )
	//MeleeSyncedTitan_AlwaysDoAiExecutions( true )
	NPCUseNormalSyncedMelee( true )

    PrecacheParticleSystem( $"env_thaw_interior_tank_pollen" )
	PrecacheParticleSystem( $"P_ar_holopulse_CP" )
	PrecacheParticleSystem( $"overhead_icon_ai_friendly" )
	PrecacheParticleSystem( $"TDP_wave" )
	PrecacheParticleSystem( $"P_holo_screespace" )

	// blood
	PrecacheParticleSystem( $"death_pinkmist_LG" )
	PrecacheParticleSystem( $"death_pinkmist_LG_nochunk" ) // ideal for knock players down

	PrecacheParticleSystem( $"P_ar_impact_pilot" )
	PrecacheParticleSystem( $"P_ar_impact_pilot_headshot" )
	PrecacheParticleSystem( $"P_ar_impact_pilot_kill" )
	PrecacheParticleSystem( $"xo_spark_bolt" )

	PrecacheParticleSystem( $"xo_damage_exp_1" )
	PrecacheParticleSystem( $"xo_damage_exp_2" ) // ideal for knock players down
	PrecacheParticleSystem( $"xo_exp_death" )

	PrecacheParticleSystem( $"impact_flesh" )
	PrecacheParticleSystem( $"P_impact_metal_spectre" )

	// blood fog?
	PrecacheParticleSystem( $"P_impact_flesh_attacker" )
	PrecacheParticleSystem( $"P_impact_flesh_victim" )

	// lstar elec
	PrecacheParticleSystem( $"P_impact_lstar_victim" )
	
	// hitting decoy
	PrecacheParticleSystem( $"P_holohit_impact" )

	// doubletake flash
	PrecacheParticleSystem( $"P_impact_flesh_victim_elec" )

	// emp airblast
	PrecacheParticleSystem( $"P_impact_exp_emp_med_air" )

	// plasma impact
	PrecacheParticleSystem( $"P_plasma_exp_LG" )
	//

	PrecacheParticleSystem( SCREENFX_WARPJUMP )
	PrecacheParticleSystem( SCREENFX_WARPJUMPDLIGHT )
	PrecacheParticleSystem( FX_KILLSHOT_BLOODSPRAY )
	PrecacheParticleSystem( FX_BLOODSPRAY_DECAL_SML )
	PrecacheParticleSystem( FX_BLOODSPRAY_DECAL_MED )
	PrecacheParticleSystem( FX_BLOODSPRAY_DECAL_LRG )

	//Riff_ForceTitanAvailability( eTitanAvailability.Never )
	//Riff_ForceBoostAvailability( eBoostAvailability.Disabled )
	//AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	//AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerGetsNewPilotLoadout )
	// register things for ingame script
	if( GetGameState() >= eGameState.Prematch )
	{
		foreach( entity player in GetPlayerArray() )
			OnClientConnected( player )
	}
	AddCallback_OnClientConnected( OnClientConnected )
	//HoldingUp_Props_Init()
}

void function SpawnHoloPulseAtPosition( vector origin, float radius, float lifeTime, float pulseSpeed )
{
	entity fxHandle = PlayFX( $"P_ar_holopulse_CP", origin, <0,0,0> )
	vector controlPoint = <lifeTime, pulseSpeed, 0.0> // controlPoint1: lifetime, controlPoint2: speed
	EffectSetControlPointVector( fxHandle, 1, controlPoint )
}

void function OnPlayerRespawned( entity player )
{
	thread PlayerAttackCounter( player )
}

void function PlayerAttackCounter( entity player )
{
	string uid = player.GetUID()
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	OnThreadEnd(
		function(): ( uid )
		{
			print( playerAttackCountTable[ uid ] )
		}
	)

	while( true )
	{
		player.WaitSignal( "OnPrimaryAttack" )
		playerAttackCountTable[ uid ] += 1
	}
}

void function OnPlayerGetsNewPilotLoadout( entity player, PilotLoadoutDef p )
{
	foreach( entity weapon in player.GetMainWeapons() )
		player.TakeWeaponNow( weapon.GetWeaponClassName() )
	player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_SPECIAL ).GetWeaponClassName() )
	player.TakeWeaponNow( player.GetOffhandWeapon( OFFHAND_ORDNANCE ).GetWeaponClassName() )
	player.GiveWeapon( "mp_weapon_softball", ["northstar_softball", "grenadier_low_damage"] ) //["northstar_softball", "extended_ammo", "pas_fast_reload", "reload_repeat"]
	player.GiveWeapon( "mp_weapon_semipistol", ["gibber_pistol", "silencer", "pas_fast_reload", "extended_ammo"] )
	player.GiveWeapon( "mp_weapon_rocket_launcher", ["guided_missile", "at_unlimited_ammo"] )
	player.GiveOffhandWeapon( "mp_weapon_grenade_gravity", OFFHAND_SPECIAL )
	player.GiveOffhandWeapon( "mp_weapon_grenade_electric_smoke", OFFHAND_ORDNANCE, ["creeping_bombardment"] )
}

entity function GetPlayerAntiTitanWeapon( entity player )
{
	entity tempweapon
	foreach( entity weapon in player.GetMainWeapons() )
	{
		if( weapon.GetWeaponClassName() == "mp_weapon_defender" ||
			weapon.GetWeaponClassName() == "mp_weapon_mgl" ||
			weapon.GetWeaponClassName() == "mp_weapon_rocket_launcher" ||
			weapon.GetWeaponClassName() == "mp_weapon_arc_launcher"
		)
			tempweapon = weapon
	}
	return tempweapon
}

void function OnClientConnected( entity player )
{
	//AddPlayerHeldButtonEventCallback( player, IN_USE, CallbackFuncCornerUs, 0.3 )
	//AddPlayerHeldButtonEventCallback( player, IN_USE_AND_RELOAD, CallbackFuncCornerUs, 0.7 )
	//AddButtonPressedPlayerInputCallback( player, IN_USE, ShowEntityStats )
	//AddButtonPressedPlayerInputCallback( player, IN_DUCK, ShowEntityStats )
	//AddButtonPressedPlayerInputCallback( player, IN_USE, TEMP_PlayAnimGestureFromScript )
	//AddButtonPressedPlayerInputCallback( player, IN_USE, DebugParticle )
	//playerAttackCountTable[ player.GetUID() ] <- 0
}

void function CallbackFuncCornerUs( entity player )
{
	EmitSoundOnEntity( player, "diag_sp_intro_WD104_24_01_mcor_grunt1" )
}

void function ShowEntityStats( entity player )
{
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * 1000, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		Chat_ServerPrivateMessage( player, "hitEnd Invalid", false )
		return
	}
	Chat_ServerPrivateMessage( player, "hitEnt is " + traceResult.hitEnt.GetClassName(), false )
	asset modelName = traceResult.hitEnt.GetModelName()
	string tempString = string( modelName )
    string modelString = tempString.slice( 2, tempString.len() - 1 )
	if( modelName != $"" )
		Chat_ServerPrivateMessage( player, "hitEnt's modelname is " + modelString, false )
}

entity function CreateEnvBeam( entity owner, entity startEnt, entity endEnt )
{
	entity env_laser = CreateEntity( "env_laser" )
	env_laser.kv.LaserTarget = endEnt.GetTargetName()
	env_laser.kv.rendercolor = "150 100 15"
	env_laser.kv.rendercolorFriendly = "15 100 150"
	env_laser.kv.renderamt = 255
	env_laser.kv.width = 2
	env_laser.SetValueForTextureKey( $"sprites/laserbeam.spr" )
	env_laser.kv.TextureScroll = 35
	env_laser.kv.damage = "0"
	env_laser.kv.dissolvetype = -1//-1 to 2 - none, energy, heavy elec, light elec
	env_laser.kv.spawnflags = 1// 32 end sparks
	env_laser.SetOrigin( startEnt.GetOrigin() )
	env_laser.SetAngles( startEnt.GetAngles() )
	env_laser.SetParent( startEnt )
	env_laser.s.parents <- [startEnt, endEnt]

	SetTeam( env_laser, owner.GetTeam() )

	DispatchSpawn( env_laser )

	return env_laser
}

void function SpawnWeaponEntity_CountLifeTime( entity player, string weaponName )
{
	vector origin = GetPlayerCrosshairOrigin( player ) + < 0,0,10 >
	vector angles = Vector( 0, 0, 0 )
	entity weapon = CreateWeaponEntityByNameWithPhysics( weaponName, origin, angles )
	float startTime = Time()
	weapon.WaitSignal( "OnDestroy" )
	float toalTime = Time() - startTime
	print( "This weapon lasted: " + string( toalTime ) )
}

void function DebugParticle( entity player )
{
    vector origin = GetPlayerCrosshairOrigin( player )

    array<entity> fx = []
	array<entity> cp = []

    entity cpRadius = CreateEntity( "info_placement_helper" )
	SetTargetName( cpRadius, UniqueString( "cloakBeacon_cpRadius" ) )
	cpRadius.SetOrigin( Vector(500,0,0) )
	DispatchSpawn( cpRadius )
	cp.append( cpRadius )
	
	// friendly fx
	entity cpColorF = CreateEntity( "info_placement_helper" )
	SetTargetName( cpColorF, UniqueString( "cloakBeacon_cpColorF" ) )
	cpColorF.SetOrigin( ENEMY_COLOR_FX )
	DispatchSpawn( cpColorF )
	cp.append( cpColorF )

    /*
	entity fxIdF1 = PlayFXWithControlPoint( DEPLOYABLE_CLOAKFIELD_FX_ALL, tower.GetOrigin() + Vector(0,0,3), cpColorF )
	SetTeam( fxIdF1, tower.GetTeam() )
	fxIdF1.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	fx.append( fxIdF1 )
	entity fxIdF2 = PlayFXWithControlPoint( DEPLOYABLE_CLOAKFIELD_FX_ALL2, tower.GetOrigin() + Vector(0,0,3), cpColorF )
	SetTeam( fxIdF2, tower.GetTeam() )
	fxIdF2.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	fx.append( fxIdF2 )
    */

	int particleIndex = GetParticleSystemIndex( DEBUGGING_PARTICLE )
	int attachmentIndex = player.LookupAttachment( "CHESTFOCUS" )
	StartParticleEffectOnEntity( player, particleIndex, FX_PATTACH_POINT_FOLLOW, attachmentIndex )
	entity fxIdF3 = CreateEntity( "info_particle_system" )
	fxIdF3.kv.start_active = 1
	fxIdF3.SetValueForEffectNameKey( DEBUGGING_PARTICLE )
	SetTeam( fxIdF3, player.GetTeam() )
	fxIdF3.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	SetTargetName( fxIdF3, UniqueString() )
	//fxIdF3.kv.cpoint1 = cpColorF.GetTargetName()
	//fxIdF3.kv.cpoint5 = cpRadius.GetTargetName()
	fxIdF3.SetOrigin( origin + Vector(0,0,10) )
	fx.append( fxIdF3 )

    DispatchSpawn( fxIdF3 )
}

void function PlayAnimGestureFromScript( entity ent, string activity, float fadein, float fadeout, float blendTime )
{
	ent.Anim_PlayGesture( activity, fadein, fadeout, blendTime )
}

void function TEMP_PlayAnimGestureFromScript( entity ent )
{
	print( "Try to Anim_PlayGesture()" )
	ent.SetPredictionEnabled( false )
	ent.Anim_PlayGesture( "ACT_MP_MELEE_KNIFE_FIRST", 2.0, 0.0, -1.0 )
}

void function CreateViewEntityForPlayer( entity player )
{
	entity viewControl = CreateEntity( "point_viewcontrol" )
	viewControl.kv.spawnflags = 56 // infinite hold time, snap to goal angles, make player non-soli
	
	vector eyeAngle = player.EyeAngles()
	vector evePos = player.EyePosition()
	vector offset = AnglesToForward( < 0, eyeAngle.y, 0 > ) * -150 + < 0,0,50 >
	vector angles = < 0, eyeAngle.y, 0 >
	viewControl.SetParent( player, "ORIGIN" )
	//viewControl.SetOrigin( evePos + offset )
	viewControl.SetOrigin( < -150, 0, 100 > )
	//viewControl.SetAngles( angles )
	DispatchSpawn( viewControl )
	
	player.SetViewEntity( viewControl, true )
	entity fpProxy = player.GetFirstPersonProxy()
	if ( IsValid( fpProxy )  )
		fpProxy.HideFirstPersonProxy()

	OnThreadEnd(
		function() : ( player, viewControl )
		{
			if( IsValid( player ) )
			{
				entity fpProxy = player.GetFirstPersonProxy()
				if( IsValid( fpProxy ) )
	            	fpProxy.ShowFirstPersonProxy()
				player.ClearViewEntity()
				RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
			}
			if( IsValid( viewControl ) )
				viewControl.Destroy()
		}
	)

	//wait 1
	//player.Die() // die here
	player.WaitSignal( "OnRespawned" )
}