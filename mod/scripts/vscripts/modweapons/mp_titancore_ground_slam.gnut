global function OnWeaponActivate_titancore_ground_slam
global function MpTitanWeaponGoundSlam_Init

global function OnAbilityCharge_GoundSlam
global function OnAbilityChargeEnd_GoundSlam

global function OnWeaponPrimaryAttack_titancore_ground_slam

const int TITAN_GROUND_SLAM_DAMAGE = 500
const int TITAN_GROUND_SLAM_DAMAGE_HEAVYARMOR = 4000
const float TITAN_GROUND_SLAM_INNER_RADIUS = 450
const float TITAN_GROUND_SLAM_RADIUS = 525

const float TITAN_HOVER_SLAM_VERTICAL_VEL = 750

void function MpTitanWeaponGoundSlam_Init()
{
	#if SERVER
        RegisterSignal( "GroundSlamChargeBegin" )

		AddDamageCallbackSourceID( eDamageSourceId.mp_ability_ground_slam, GroundSlam_DamagedPlayerOrNPC )
	#endif
}

void function OnWeaponActivate_titancore_ground_slam( entity weapon )
{
    if ( weapon.HasMod( "hover_slam" ) )
        thread HoverSlamThink( weapon )
    else
        thread GroundSlamThink( weapon )
}

void function GroundSlamThink( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !owner.IsPlayer() )
        return

#if SERVER
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "TitanEjectionStarted" )

    owner.SetTitanDisembarkEnabled( false )
    owner.Signal( "KillBruteShield" )
    
    array<entity> fx

	OnThreadEnd(
		function () : ( owner, fx )
		{
			foreach ( effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				effect.ClearParent()
				effect.Destroy()
			}
		}
	)

	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_small", owner, "thrust" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_left" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_right" ) )

    PlayImpactFXTable( owner.GetOrigin(), owner, "droppod_impact" )
    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_liftoff_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_liftoff_3p" )
    vector baseVelocity = owner.GetViewVector() * BERSERKER_DASH_VELOCITY
    owner.SetVelocity( baseVelocity ) // dash to target pos
    wait BERSERKER_DASH_TIME
    owner.SetVelocity( < 0, 0, 0 > ) // stop player
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "GroundSlamChargeBegin" )
    //weapon.EmitWeaponSound_1p3p( "flamewave_start_1p", "flamewave_start_3p" )
	OnAbilityCharge_TitanCore( weapon )
#endif
}

// WIP: jump and indicate to a certain location
void function HoverSlamThink( entity weapon )
{
    entity owner = weapon.GetWeaponOwner()
    if( !owner.IsPlayer() )
        return

#if SERVER
    thread TryFixHoverSlamClientSFX( weapon, owner )
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "TitanEjectionStarted" )

    owner.SetTitanDisembarkEnabled( false )
    owner.SetPredictionEnabled( false )
    HolsterAndDisableWeapons( owner )
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "KillBruteShield" )
    
    array<entity> fx

	OnThreadEnd(
		function () : ( owner, fx )
		{
            if( IsValid( owner ) )
            {
                DeployAndEnableWeapons( owner )
                owner.SetPredictionEnabled( true ) // defensive fix
            }
			foreach ( effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				effect.ClearParent()
				effect.Destroy()
			}
		}
	)

	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_small", owner, "thrust" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_left" ) )
	fx.append( PlayFXOnEntity( $"P_xo_jet_fly_large", owner, "vent_right" ) )

    PlayImpactFXTable( owner.GetOrigin(), owner, "droppod_impact" )
    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_liftoff_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_liftoff_3p" )
    vector baseVelocity = owner.GetViewVector() * BERSERKER_DASH_VELOCITY
    baseVelocity.z = TITAN_HOVER_SLAM_VERTICAL_VEL
    owner.SetVelocity( baseVelocity )
    wait BERSERKER_DASH_TIME
    owner.SetVelocity( < 0, 0, -170 > ) // drop player down to slam
    while( true ) // wait until player is close to ground
    {
        WaitFrame()
        // keep hostering weapon until owner is near the ground( ~300hu ),
        TraceResults traceresult = TraceLine( owner.GetOrigin(), owner.GetOrigin() - < 0, 0, 300 >, owner, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
        if( IsValid( traceresult.hitEnt ) )
            break
    }
    //StopSoundOnEntity( weapon, "flamewave_start_1p" ) // client fix
    owner.Signal( "GroundSlamChargeBegin" )
    EmitSoundOnEntityOnlyToPlayer( owner, owner, "titan_flight_descent_1p" )
    EmitSoundOnEntityExceptToPlayer( owner, owner, "titan_flight_descent_3p" )
    weapon.EmitWeaponSound_1p3p( "flamewave_start_1p", "flamewave_start_3p" )
    owner.SetActiveWeaponByName( "mp_titancore_flame_wave" )
    owner.SetPredictionEnabled( true )
	OnAbilityCharge_TitanCore( weapon )
#endif
}

bool function OnAbilityCharge_GoundSlam( entity weapon )
{
#if SERVER
    entity owner = weapon.GetWeaponOwner()
    float chargeTime = weapon.GetWeaponSettingFloat( eWeaponVar.charge_time )
    entity soul = owner.GetTitanSoul()
    if ( soul == null )
        soul = owner
    StatusEffect_AddTimed( soul, eStatusEffect.damageAmpFXOnly, 1.0, chargeTime, 0 )
    StatusEffect_AddTimed( soul, eStatusEffect.damage_reduction, BERSERKER_INCOMING_DAMAGE_DAMPEN, chargeTime, 0 )
#endif

	return true
}

void function OnAbilityChargeEnd_GoundSlam( entity weapon )
{
	#if SERVER
		entity owner = weapon.GetWeaponOwner()
		if ( owner.IsPlayer() )
			owner.SetTitanDisembarkEnabled( true )
		OnAbilityChargeEnd_TitanCore( weapon )
	#endif // #if SERVER
}

var function OnWeaponPrimaryAttack_titancore_ground_slam( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	OnAbilityStart_TitanCore( weapon )

	#if SERVER
    entity weaponOwner = weapon.GetWeaponOwner()
    entity groundEntity = weaponOwner.GetGroundEntity()
    vector damageOrigin = weaponOwner.GetOrigin()
	if ( groundEntity != null && groundEntity.HasPusherRootParent() )
        damageOrigin = groundEntity.GetOrigin()
    PlayImpactFXTable( damageOrigin, weaponOwner, "titan_exp_ground" )
    PlayFX( FLIGHT_CORE_IMPACT_FX, weaponOwner.GetOrigin() )
    PlayFX( TURBO_WARP_FX, damageOrigin, <0,90,0> )
    CreateShake( damageOrigin, 16, 150, 2, 1500 )
    CreatePhysExplosion( damageOrigin + < 0,0,10 >, 512, PHYS_EXPLOSION_LARGE, 15 )
    //PlayHotdropImpactFX( weaponOwner ) // this one also trigger a titanfall damagedef????
    EmitDifferentSoundsAtPositionForPlayerAndWorld( "core_ability_land_1p", "core_ability_land_3p", damageOrigin, weaponOwner, weaponOwner.GetTeam())
    for( int i = 0; i < 3; i ++ ) // really large sound!
	    EmitDifferentSoundsAtPositionForPlayerAndWorld( "Titan_1P_Warpfall_WarpToLanding_fast", "Titan_3P_Warpfall_WarpToLanding_fast", damageOrigin, weaponOwner, weaponOwner.GetTeam())
    RadiusDamage(
        damageOrigin + < 0,0,10 >,						    // center
        weaponOwner,		                                // attacker
        weaponOwner,									    // inflictor
        TITAN_GROUND_SLAM_DAMAGE,		                    // damage
        TITAN_GROUND_SLAM_DAMAGE_HEAVYARMOR,			    // damageHeavyArmor
        TITAN_GROUND_SLAM_INNER_RADIUS,		                // innerRadius
        TITAN_GROUND_SLAM_RADIUS,				            // outerRadius
        0,			                                        // flags
        0,										            // distanceFromAttacker
        30000,				                                // explosionForce
        DF_GIB | DF_BYPASS_SHIELD | DF_NO_SELF_DAMAGE,      // scriptDamageFlags
        eDamageSourceId.mp_ability_ground_slam )            //damageSourceID

	OnAbilityEnd_TitanCore( weapon )
	#endif

	return 1
}

#if SERVER
// keep trying stopping SFXs to avoid client receiving too much noise
void function TryFixHoverSlamClientSFX( entity weapon, entity owner )
{
    weapon.EndSignal( "OnDestroy" )
    owner.EndSignal( "OnDeath" )
    owner.EndSignal( "OnDestroy" )
    owner.EndSignal( "GroundSlamChargeBegin" ) // real sound begins

    while( true )
    {
        StopSoundOnEntity( weapon, "flamewave_start_1p" )
        StopSoundOnEntity( owner, "flamewave_start_1p" )
        WaitFrame()
    }
}

void function GroundSlam_DamagedPlayerOrNPC( entity ent, var damageInfo )
{
	if ( !IsValid( ent ) )
		return
	
    VanguardEnergySiphon_DamagedPlayerOrNPC( ent, damageInfo )
}
#endif