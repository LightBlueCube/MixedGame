global function MpAbilityGunShield_Init

global function OnWeaponPrimaryAttack_pilot_gun_shield

#if SERVER
// redirect damage: vortexSphere.Signal( "Script_OnDamaged", result ) will return a table that contains damage amount, be sure to use it
global function CreateHumanSizedGunShield // shared with mp_titanability_gun_shield
#endif

void function MpAbilityGunShield_Init()
{
#if SERVER
    PrecacheParticleSystem( FX_TITAN_GUN_SHIELD_WALL_PILOT )
#endif
}

var function OnWeaponPrimaryAttack_pilot_gun_shield( entity weapon, WeaponPrimaryAttackParams attackParams )
{
    entity weaponOwner = weapon.GetWeaponOwner()

	Assert( IsValid( weaponOwner ), "weapon owner is not valid at the start of on weapon primary attack" )
	Assert( IsAlive( weaponOwner ), "weapon owner is not alive at the start of on weapon primary attack" )
	array<entity> weapons = GetPrimaryWeapons( weaponOwner )
	Assert( weapons.len() > 0 )
	if ( weapons.len() == 0 )
		return 0

	entity primaryWeapon = weapons[0]
	if ( !IsValid( primaryWeapon ) )
		return 0

	if ( weaponOwner.ContextAction_IsActive() )
		return 0

	float duration = weapon.GetWeaponSettingFloat( eWeaponVar.fire_duration )
	if ( weaponOwner.IsPlayer() )
		PlayerUsedOffhand( weaponOwner, weapon )

#if SERVER
    thread CreateHumanSizedGunShield( weaponOwner, duration ) // defined in mp_ability_gun_shield
#endif

    return 1 // mark as succeeded
}

#if SERVER
// pilot gunshield
// these should fit rotated fx!
const int PILOT_GUN_SHIELD_RADIUS = 35
const int PILOT_GUN_SHIELD_HEIGHT = 60
const int PILOT_GUN_SHIELD_FOV = 75
const int PILOT_GUN_SHIELD_HEALTH = 200

const asset FX_TITAN_GUN_SHIELD_WALL_PILOT  = $"P_anti_titan_shield_3P"
const string PILOT_GUN_SHIELD_ATTACHMENT	= "PROPGUN"
const vector PILOT_GUN_SHIELD_OFFSET		= < 0, 0, -23 > // add a bit offset to cover player
const vector PILOT_GUN_SHIELD_FX_ANGLES		= < 20, 0, 94 >
const vector PILOT_GUN_SHIELD_FX_ORIGIN		= < 31, 0, 32 >

void function CreateHumanSizedGunShield( entity player, float duration = 6.0 )
{
	vector angles = VectorToAngles( player.EyeAngles() )
	entity vortexSphere = CreateShieldWithSettings( player.GetOrigin(), angles, PILOT_GUN_SHIELD_RADIUS, PILOT_GUN_SHIELD_HEIGHT, PILOT_GUN_SHIELD_FOV, duration, PILOT_GUN_SHIELD_HEALTH, FX_TITAN_GUN_SHIELD_WALL_PILOT )
	thread DrainHealthOverTime( vortexSphere, vortexSphere.e.shieldWallFX, duration )

	vortexSphere.SetOwner( player )
	vortexSphere.SetBlocksRadiusDamage( true )
	SetTeam( vortexSphere, player.GetTeam() )
	vortexSphere.SetParent( player, PILOT_GUN_SHIELD_ATTACHMENT )
	vortexSphere.SetOrigin( PILOT_GUN_SHIELD_OFFSET )

	entity shieldFX = vortexSphere.e.shieldWallFX
	shieldFX.DisableHibernation() // prevent fx from fading out
	// rotate the shield fx
	shieldFX.SetAngles( PILOT_GUN_SHIELD_FX_ANGLES )
	shieldFX.SetOrigin( PILOT_GUN_SHIELD_FX_ORIGIN )
	// don't show to owner
	shieldFX.SetOwner( player )
	//shieldFX.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY 

	entity fpShieldFX = CreateFirstPersonGunShieldFX( player, vortexSphere )
	thread ShieldADSThink( player, vortexSphere, fpShieldFX, duration )
}

void function ShieldADSThink( entity player, entity vortexSphere, entity fpShieldFX, float duration )
{
    player.EndSignal( "ContextAction_SetBusy" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )

    vortexSphere.EndSignal( "OnDestroy" )

    OnThreadEnd(
		function(): ( player, vortexSphere, fpShieldFX )
		{
            // clean up
			if( IsValid( vortexSphere ) )
				vortexSphere.Destroy()

			if( IsValid( player ) )
			{
				foreach( entity weapon in player.GetMainWeapons() )
				{
					if( IsValid( weapon ) )
					{
						while( weapon.GetForcedADS() )
							weapon.ClearForcedADS()
					}
				}
			}
		}
	)

    float endTIme = Time() + duration
	bool vortexShown = true
    bool firstLoop = true

	while( Time() < endTIme )
	{
        if ( !firstLoop )
            WaitFrame()

		entity weapon = player.GetActiveWeapon()
		if ( !IsValid( weapon ) )
            continue

		weapon.SetForcedADS()
        
        if ( !weapon.IsWeaponInAds() ) // switching weapon or reloading? disable the shield for a while
        {
            //print( "weapon not in ads!" )
            if ( vortexShown )
            {
                HideGunShieldVortexSphere( vortexSphere )
                vortexShown = false
            }
        }
        else // safe adsing
        {
            //print( "weapon in ads!" )
            if ( !vortexShown )
            {
                ShowGunShieldVortexSphere( vortexSphere, player )
                vortexShown = true
            }
        }

        firstLoop = false
	}
}

void function ShowGunShieldVortexSphere( entity vortexSphere, entity player )
{
	// this is not very nice!
	vortexSphere.SetParent( player, PILOT_GUN_SHIELD_ATTACHMENT )
	vortexSphere.SetOrigin( PILOT_GUN_SHIELD_OFFSET )
	// re-enable shieldWallFx
	EntFireByHandle( vortexSphere.e.shieldWallFX, "Start", "", 0, null, null )
}

// this is basically not letting any player shoot the vortex, really dumb
void function HideGunShieldVortexSphere( entity vortexSphere )
{
	// stop shieldWallFx for a while
	EntFireByHandle( vortexSphere.e.shieldWallFX, "Stop", "", 0, null, null )
	vortexSphere.ClearParent()
	vortexSphere.SetOrigin( < -9999, -9999, -9999 > ) // so player can never hit it
}

// fp fx
entity function CreateFirstPersonGunShieldFX( entity player, entity vortexSphere )
{

}
#endif