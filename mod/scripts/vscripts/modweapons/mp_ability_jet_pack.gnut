global function MpAbilityJetPack_Init

#if SERVER
global function SignalJetPackStart
global function JetPackThink
#endif

const string JET_PACK_WEAPON = "mp_titanability_hover" // button callback handle in weapon's script
global const string JET_PACK_MOD = "jet_pack"
const float JET_PACK_BURST_VELOCITY_VERTICAL = 300 // shouldn't set this very high
const float JET_PACK_BURST_VELOCITY_HORIZAL = 320 // this can be bit higher
const float JET_PACK_BURST_TO_LIFT_DELAY = 0.4 // basically no need to change this
const float JET_PACK_LIFT_SPEED_VERTICAL = 250
const float JET_PACK_LIFT_SPEED_HORIZAL = 250 // actual behaviors not this high, so set higher.
const float JET_PACK_GLIDE_GRAVITY_SCALE = 0.6
const float JET_PACK_GLIDE_DURATION = 0.5

const float HOVER_SOUND_DURATION = 2.2 // should relap a sound if ends, no need to change

const int JET_PACK_AMMO_REDUCE_PER_BURST = 25
const int JET_PACK_AMMO_REDUCE_PER_TICK = 3

// for passive_jetpack! less effective since you still have tacticals normally
const int JET_PACK_AMMO_REDUCE_PER_BURST_PASSIVE = 55
const int JET_PACK_AMMO_REDUCE_PER_TICK_PASSIVE = 8

// hardcoded cooldown think! no need to use
const int JET_PACK_AMMO_CLIPSIZE = 200 // no need, use ammo_clip_size in settings
const float JET_PACK_RECHARGE_DELAY = 8 // SetWeaponPrimaryClipCountAbsolute() also triggers regen_delay, so don't need this
const float JET_PACK_RECHARGE_RATE = 8 // no need, just use regen_ammo_refill_rate

// not using things below
const float JET_PACK_BURST_HORIZAL_VELOCITY_MULTIPILER = 1.5 // this will make player able to stack velocity, should use a speed number
const float JET_PACK_LIFT_ACCELERATION_HORIZAL = 50 // acceleration per tick( 0.1s ), hard to control though
const float JET_PACK_LIFT_SPEED_HORIZAL_MAX = 200 // max velocity in air


// use this function to add callback to movements
// AddPlayerMovementEventCallback( entity player, int playerMovementEvent, void functionref( entity player ) callbackFunc )

struct
{
    table< entity, bool > playerJumpUsedTable // for "disable_doublejump" conditions
    table< entity, bool > playerDoubleJumpUsedTable // for activating jet packs
} file

void function MpAbilityJetPack_Init()
{
#if SERVER
    RegisterSignal( "ActivateJetPack" )
    RegisterSignal( "JetPackThinkStart" )
    RegisterSignal( "JetPackThinkEnd" )
    RegisterSignal( "JetPackBurst" )
    RegisterSignal( "JetPackLift" )
    RegisterSignal( "StartGlideThink" )
    RegisterSignal( "StartFreeFallSound" )
    RegisterSignal( "ConsumeJetPackAmmo" ) // this should signal a table, but it requires file to be untyped
    /* jet pack ammo table:
        table
        {
            float ammoReduce
        }
    */
    AddCallback_OnClientConnected( OnClientConnected )
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPilotGetLoadout )
#endif
}

#if SERVER
void function OnClientConnected( entity player )
{
    // using OnWeaponOwnerChanged() now, add this after player get the jet pack weapon
    //AddButtonPressedPlayerInputCallback( player, IN_JUMP, SignalJetPackStart )
    //AddPlayerMovementEventCallback( entity player, int playerMovementEvent, void functionref( entity player ) callbackFunc )

    // init
    file.playerJumpUsedTable[ player ] <- false
    file.playerDoubleJumpUsedTable[ player ] <- false
}

bool function PlayerCanDoubleJump( entity player )
{
    return !player.GetPlayerSettingsMods().contains( "disable_doublejump" )
}

void function PlayerJumpUsed( entity player )
{
    if ( PlayerCanDoubleJump( player ) )
        return
    thread PlayerJumpUsed_Threaded( player )
}

void function PlayerJumpUsed_Threaded( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    WaitFrame() // do a wait!
    if( !player.IsOnGround() ) // still not touch ground
        file.playerJumpUsedTable[ player ] = true // consider double jump used, not supporting multiple jumps unfortunately
}

void function PlayerDoubleJumpUsed( entity player )
{
    thread PlayerDoubleJumpUsed_Threaded( player )
}

void function PlayerDoubleJumpUsed_Threaded( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    WaitFrame() // do a wait!
    if( !player.IsOnGround() ) // still not touch ground
        file.playerDoubleJumpUsedTable[ player ] = true // consider double jump used, not supporting multiple jumps unfortunately
}

void function PlayerJumpRestored( entity player )
{
    file.playerJumpUsedTable[ player ] = false
    file.playerDoubleJumpUsedTable[ player ] = false // consider double jump restored, not supporting multiple jumps unfortunately
}

void function SignalJetPackStart( entity player )
{
    // leave checks here, valkery uses passives but I don't have that
    //print( "Player tried to signal jetpack!" )

    // for better control
    //if( !player.IsInputCommandHeld( IN_SPEED ) ) // for better control, use a combo to activate 
    //    return
    bool shouldStartJetPack = true
    if( !file.playerDoubleJumpUsedTable[ player ] && PlayerCanDoubleJump( player ) ) // double jump not used yet!
        shouldStartJetPack = false
    if( !file.playerJumpUsedTable[ player ] && !PlayerCanDoubleJump( player ) ) // no doublejump, but player haven't used their jump!
        shouldStartJetPack = false
    // normal checks
    if ( player.IsPhaseShifted() ||
         player.IsWallHanging() ||
         player.IsZiplining() ||
         player.GetParent() != null )
        shouldStartJetPack = false

    if ( !shouldStartJetPack )
        return

    player.Signal( "ActivateJetPack" )
}

void function OnPilotGetLoadout( entity player, PilotLoadoutDef p )
{
    // using OnWeaponOwnerChanged() now, check this after player get the jet pack weapon
    //thread DelayedCheckJetPackAvailable( player )
}

void function JetPackThink( entity player, entity weapon )
{
    if( !player.IsPlayer() )
        return
    player.Signal( "JetPackThinkStart" )
    player.EndSignal( "OnDestroy" )
    player.EndSignal( "OnDeath" )
    player.EndSignal( "JetPackThinkStart" )
    player.EndSignal( "JetPackThinkEnd" )
    weapon.EndSignal( "OnDestroy" )
    
    file.playerDoubleJumpUsedTable[ player ] = false // always reset this
    AddPlayerMovementEventCallback( player, ePlayerMovementEvents.JUMP, PlayerJumpUsed )
    AddPlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, PlayerDoubleJumpUsed )
    AddPlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, PlayerJumpRestored )
    AddButtonPressedPlayerInputCallback( player, IN_JUMP, SignalJetPackStart )
    OnThreadEnd(
        function():( player )
        {
            if( IsValid( player ) )
            {
                RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.JUMP, PlayerJumpUsed )
                RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, PlayerDoubleJumpUsed )
                RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, PlayerJumpRestored )
                RemoveButtonPressedPlayerInputCallback( player, IN_JUMP, SignalJetPackStart )
            }    
        }
    )

    thread JetPackAmmoThink( weapon )
    while( true )
    {
        player.WaitSignal( "ActivateJetPack" )
        waitthread JetPackActivateThink( player, weapon )
    }
}

void function JetPackActivateThink( entity player, entity weapon )
{
    int currentAmmo = weapon.GetWeaponPrimaryClipCount() // don't run anything if no enough ammo
    
    if( currentAmmo <= 1 )
    {
        EmitSoundOnEntityOnlyToPlayer( player, player, "titan_dryfire" )
        return
    }

    player.Signal( "OnPrimaryAttack" ) // should signal this to end loadout grace period
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    weapon.EndSignal( "OnDestroy" )

    player.HolsterWeapon() // defensive fix
    
    array<entity> fx

	OnThreadEnd(
		function () : ( player, fx )
		{
            if( IsValid( player ) )
            {
                StopSoundOnEntity( player, "Boost_Hover_Body_1P" )
                StopSoundOnEntity( player, "Boost_Hover_Body_3P" )
                EmitSoundOnEntityOnlyToPlayer( player, player, "Boost_Hover_End_1P" )
                EmitSoundOnEntityExceptToPlayer( player, player, "Boost_Hover_End_3P" )

                player.kv.gravity = 0.0 // defensive fix
                player.DeployWeapon() // defensive fix
                player.Server_TurnOffhandWeaponsDisabledOff() // this can turn on offhand weapons
                thread JetPackGlideThink( player ) // do need a glide, or player will fall very fast
                // annoying sound, no need to play
                //thread JumpJetFreeFallSound( player )
            }
			foreach ( effect in fx )
			{
				if ( !IsValid( effect ) )
					continue

				effect.ClearParent()
				effect.Destroy()
			}
		}
	)

    if( player.LookupAttachment( "vent_center" ) > 0 )
    {
        entity fxSmokeCenter = PlayFXOnEntity( $"Rocket_Smoke_Large", player, "vent_center" )
        //fxSmokeCenter.SetOwner( player )
        //fxSmokeCenter.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
        fx.append( fxSmokeCenter )
    }

    if( player.LookupAttachment( "vent_left_out" ) > 0 ) // was vent_left_back, this is better
    {
        // $"P_team_jet_hover_HLD" is good enough for both team players and owner themself
        entity fxJetLeft = PlayFXOnEntity( $"P_team_jet_hover_HLD", player, "vent_left_out" )
        fx.append( fxJetLeft )
    }

    if( player.LookupAttachment( "vent_right_out" ) > 0 ) // was vent_right_back, this is better
    {
        entity fxJetRight = PlayFXOnEntity( $"P_team_jet_hover_HLD", player, "vent_right_out" )
        fx.append( fxJetRight )
    }
        
    //entity fxJetLeftFriendly = PlayFXOnEntity( $"P_team_jet_hover_HLD", player, "vent_left_back" )
    //SetTeam( fxJetLeftFriendly, player.GetTeam() )
    //fxJetLeftFriendly.SetOwner( player )
    //fxJetLeftFriendly.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
    //fx.append( fxJetLeftFriendly )

    //entity fxJetRightFriendly = PlayFXOnEntity( $"P_team_jet_hover_HLD", player, "vent_right_back" )
    //SetTeam( fxJetRightFriendly, player.GetTeam() )
    //fxJetRightFriendly.SetOwner( player )
    //fxJetRightFriendly.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
    //fx.append( fxJetRightFriendly )

    //entity fxJetLeftEnemy = PlayFXOnEntity( $"P_enemy_jet_hover_HLD", player, "vent_left_back" )
    //SetTeam( fxJetLeftEnemy, player.GetTeam() )
    //fxJetLeftEnemy.SetOwner( player )
    //fxJetLeftEnemy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY
    //fx.append( fxJetLeftEnemy )

    //entity fxJetRightEnemy = PlayFXOnEntity( $"P_enemy_jet_hover_HLD", player, "vent_right_back" )
    //SetTeam( fxJetRightEnemy, player.GetTeam() )
    //fxJetRightEnemy.SetOwner( player )
    //fxJetRightEnemy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY
    //fx.append( fxJetRightEnemy )

    // using normal pilot ones
    //entity fxJetCenter = PlayFXOnEntity( $"P_xo_jet_fly_small", player, "vent_center_out" )
    //fxJetCenter.SetOwner( player )
    //fxJetCenter.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY // not owner only
    //fx.append( fxJetCenter )

    // these fxs are too big for a pilot
    //entity fxJetLeft = PlayFXOnEntity( $"P_xo_jet_fly_small", player, "vent_left_back" )
    //fxJetLeft.SetOwner( player )
    //fxJetLeft.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
    //fx.append( fxJetLeft )
    //entity fxJetRight = PlayFXOnEntity( $"P_xo_jet_fly_small", player, "vent_right_back" )
    //fxJetRight.SetOwner( player )
    //fxJetRight.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY | ENTITY_VISIBLE_TO_ENEMY
    //fx.append( fxJetRight )

    EmitSoundOnEntityOnlyToPlayer( player, player, "Boost_Hover_Start_1P" )
    EmitSoundOnEntityExceptToPlayer( player, player, "Boost_Hover_Start_3P" )
    EmitSoundOnEntityOnlyToPlayer( player, player, "Boost_Hover_Body_1P" )
    EmitSoundOnEntityExceptToPlayer( player, player, "Boost_Hover_Body_3P" )

    player.kv.gravity = 0.0001
    vector burstVector = GetVectorFromInput( player ) * JET_PACK_BURST_VELOCITY_HORIZAL
    burstVector.z = JET_PACK_BURST_VELOCITY_VERTICAL
    player.SetVelocity( burstVector )

    //table burstAmmoReduce // untyped is required
    //{
    //    ammoReduce = JET_PACK_AMMO_REDUCE_PER_BURST
    //}
    //weapon.Signal( "ConsumeJetPackAmmo", burstAmmoReduce )
    Signal( weapon, "JetPackBurst" )

    /* // hard to control
    vector targetVelocity = player.GetVelocity()
    targetVelocity.x *= JET_PACK_BURST_HORIZAL_VELOCITY_MULTIPILER
    targetVelocity.y *= JET_PACK_BURST_HORIZAL_VELOCITY_MULTIPILER
    targetVelocity.z = JET_PACK_BURST_VELOCITY_VERTICAL
    player.SetVelocity( targetVelocity )
    */

    float startTime = Time()
    int soundRelapCount = 1
    wait JET_PACK_BURST_TO_LIFT_DELAY - 0.1 // minus a tick
    while( true )
    {
        if( !player.IsInputCommandHeld( IN_JUMP ) ) // if player released jump button, stop this
            break
        currentAmmo = weapon.GetWeaponPrimaryClipCount()
        if( currentAmmo <= 1 )
        {
            EmitSoundOnEntityOnlyToPlayer( player, player, "titan_dryfire" )
            break
        }

        if( startTime + HOVER_SOUND_DURATION * soundRelapCount < Time() )
        {
            soundRelapCount += 1
            EmitSoundOnEntityOnlyToPlayer( player, player, "Boost_Hover_Body_1P" )
            EmitSoundOnEntityExceptToPlayer( player, player, "Boost_Hover_Body_3P" )
        }
        WaitFrame() // wait before triggers "continue"

        if( player.IsPhaseShifted() ||
            player.IsWallHanging() ||
            player.IsZiplining() ||
            player.GetParent() != null ) // wait till player stop these behavior
            continue
        player.HolsterWeapon() // defensive fix
        player.Server_TurnOffhandWeaponsDisabledOn() // this can turn off offhand weapons
        player.kv.gravity = 0.0001 // defensive fix
        vector liftVector = GetVectorFromInput( player ) * JET_PACK_LIFT_SPEED_HORIZAL
        // hovering, more like valk's jecpack
        if( player.IsInputCommandHeld( IN_ZOOM ) || player.IsInputCommandHeld( IN_ZOOM_TOGGLE ) )
            liftVector.z = JET_PACK_BURST_VELOCITY_VERTICAL * 0.5 // small amount to regret gravity
        else
            liftVector.z = JET_PACK_BURST_VELOCITY_VERTICAL
        player.SetVelocity( liftVector )

        //table liftAmmoReduce // untyped is required
        //{
        //    ammoReduce = JET_PACK_AMMO_REDUCE_PER_TICK
        //}
        //weapon.Signal( "ConsumeJetPackAmmo", liftAmmoReduce )
        Signal( weapon, "JetPackLift" )

        /* // hard to control
        vector purVelocity = player.GetVelocity() + moveVector * JET_PACK_LIFT_ACCELERATION_HORIZAL
        if( purVelocity.x < -JET_PACK_LIFT_SPEED_HORIZAL_MAX || purVelocity.x > JET_PACK_LIFT_SPEED_HORIZAL_MAX )
            purVelocity.x = JET_PACK_LIFT_SPEED_HORIZAL_MAX
        if( purVelocity.y < -JET_PACK_LIFT_SPEED_HORIZAL_MAX || purVelocity.y > JET_PACK_LIFT_SPEED_HORIZAL_MAX )
            purVelocity.y = JET_PACK_LIFT_SPEED_HORIZAL_MAX
        purVelocity.z = JET_PACK_LIFT_SPEED_VERTICAL

        player.SetVelocity( purVelocity )
        */
    }
}

void function JetPackGlideThink( entity player )
{
    player.Signal( "StartGlideThink" )
    player.EndSignal( "StartGlideThink" )
    
    float startTime = Time()
    player.kv.gravity = JET_PACK_GLIDE_GRAVITY_SCALE
    while( true )
    {
        if( player.IsOnGround() )
            break
        if( startTime + JET_PACK_GLIDE_DURATION < Time() )
            break
        player.kv.gravity = JET_PACK_GLIDE_GRAVITY_SCALE // defensive fix

        WaitFrame()
    }
    if( IsValid( player ) ) // don't reset gravity if triggered another "StartGlideThink"
        player.kv.gravity = 0.0
}

void function JumpJetFreeFallSound( entity player )
{
    player.Signal( "StartFreeFallSound" )
    player.EndSignal( "StartFreeFallSound" )
    StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
    EmitSoundOnEntityOnlyToPlayer( player, player, "jumpjet_freefall_body_1p" )
    while( true )
    {
        if( player.IsOnGround() )
            break

        WaitFrame()
    }
    if( IsValid( player ) )
        StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
}

void function JetPackAmmoThink( entity weapon )
{
    weapon.EndSignal( "OnDestroy" )
    while( true )
    {
        //table result = WaitSignal( weapon, "ConsumeJetPackAmmo" )
        //float ammoReduce = expect float( result.ammoReduce )
        table result = WaitSignal( weapon, "JetPackBurst", "JetPackLift" )
        //print( "Got a signal!" )

        int ammoReduce // = result.signal == "JetPackBurst" ? JET_PACK_AMMO_REDUCE_PER_BURST : JET_PACK_AMMO_REDUCE_PER_TICK
        bool isPassiveJet = weapon.HasMod( "passive_jet_pack" ) // nerfed one!
        bool isJetBurst = result.signal == "JetPackBurst"
        if( isJetBurst )
        {
            if( isPassiveJet )
                ammoReduce = JET_PACK_AMMO_REDUCE_PER_BURST_PASSIVE
            else
                ammoReduce = JET_PACK_AMMO_REDUCE_PER_BURST
        }
        else
        {
            if( isPassiveJet )
                ammoReduce = JET_PACK_AMMO_REDUCE_PER_TICK_PASSIVE
            else
                ammoReduce = JET_PACK_AMMO_REDUCE_PER_TICK
        }

        int currentAmmo = weapon.GetWeaponPrimaryClipCount()
        weapon.SetWeaponPrimaryClipCountAbsolute( max( 0, currentAmmo - ammoReduce ) )
    }
}

vector function GetVectorFromInput( entity player )
{
	vector angles = player.EyeAngles()
	float xAxis = player.GetInputAxisRight()
	float yAxis = player.GetInputAxisForward()
	vector directionForward = GetDirectionFromInput( angles, xAxis, yAxis )

	return directionForward
}

vector function GetDirectionFromInput( vector playerAngles, float xAxis, float yAxis )
{
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}

void function DelayedCheckJetPackAvailable( entity player )
{
    entity jetPackWeapon = GetPlayerJetPackWeapon( player )
    if( IsValid( jetPackWeapon ) )
        thread JetPackThink( player, jetPackWeapon )
}

entity function GetPlayerJetPackWeapon( entity player )
{
    foreach( entity offhand in player.GetOffhandWeapons() )
    {
        if( offhand.GetWeaponClassName() == JET_PACK_WEAPON )
        {
            if( offhand.HasMod( JET_PACK_MOD ) )
                return offhand
        }
    }
    return null
}
#endif