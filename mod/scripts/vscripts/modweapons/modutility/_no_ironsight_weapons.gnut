global function No_Iron_Sight_Weapons_Init

const array<string> DISABLED_WEAPONS = ["mp_weapon_epg", 
                                        "mp_weapon_smr", 
                                        "mp_weapon_softball", 
                                        "mp_weapon_pulse_lmg",
                                        "mp_weapon_doubletake", 
                                        "mp_weapon_semipistol", 
                                        "mp_weapon_wingman",
                                        "mp_weapon_wingman_n",
                                        "mp_weapon_defender",
                                        "mp_weapon_arc_launcher",
                                        "mp_weapon_rocket_launcher",
                                        "mp_weapon_mgl"] // weapons that don't have replacement scopes

const array<string> STABILIZER_WEAPONS = ["mp_weapon_sniper", 
                                          "mp_weapon_dmr"] // weapons that use "stabilizer" to disable scope

const array<string> DISABLED_MODS = ["hcog",
                                     "redline_sight",
                                     "holosight",
                                     "aog",
                                     "threat_scope",
                                     "scope_4x",
                                     "stabilizer",
                                     "no_ironsight_weapon",
                                     "fake_stabilizer",
                                     "fake_threat_scope"] // weapons that already have a optic, cannot use together

void function No_Iron_Sight_Weapons_Init()
{
    AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerGetsLoadout )
}

void function OnPlayerGetsLoadout( entity player, PilotLoadoutDef p )
{
    array<entity> weapons = player.GetMainWeapons()
    foreach( int index, entity weapon in weapons )
    {
        //print( "checking weapon!" )
        if( IsWeaponAbleToRemoveSight( weapon ) )
        {
            string classname = weapon.GetWeaponClassName()
            //print( classname )
            array<string> mods = weapon.GetMods()
            if( ShouldWeaponUseStabilizer( weapon ) )
                mods.append( "stabilizer" )
            else
                mods.append( "no_ironsight_weapon" )
            int skin = weapon.GetSkin()
            int camo = weapon.GetCamo()
            entity curWeapon = player.GiveWeapon( classname, mods )
            if( IsValid( curWeapon ) )
            {
                curWeapon.SetSkin( skin )
                curWeapon.SetCamo( camo )
            }
        }
    }
}

bool function IsWeaponAbleToRemoveSight( entity weapon )
{
    if( !IsValid( weapon ) )
        return false

    string classname = weapon.GetWeaponClassName()
    if( DISABLED_WEAPONS.contains( classname ) )
    {
        //print( "returning false because weapon in blacklist" )
        return false
    }

    array<string> mods = weapon.GetMods()
    foreach( string mod in mods )
    {
        if( DISABLED_MODS.contains( mod ) )
        {
            //print( "returning false because mod in blacklist" )
            return false
        }
    }

    return true
}

bool function ShouldWeaponUseStabilizer( entity weapon )
{
    if( !IsValid( weapon ) )
        return false

    string classname = weapon.GetWeaponClassName()
    if( STABILIZER_WEAPONS.contains( classname ) )
    {
        //print( "returning false because weapon in blacklist" )
        return false
    }

    return true
}