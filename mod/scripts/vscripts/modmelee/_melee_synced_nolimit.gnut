// if player not having a melee weapon, this helps them to execute any valid target
global function MeleeSyncedNoLimit_Init

// functions moved to sh_melee.gnut, for my client!
//global function SetSyncedMeleeNoLimit
//global function IsSyncedMeleeNoLimit

// functions for _melee_synced_human.gnut:
global function SetPlayerClassicExecutionsEnabled // player necksnapping
global function ShouldPlayerClassicExecution
global function SetNPCClassicExecutionsEnabled // npc necksnapping
global function ShouldNPCClassicExecution
global function SetUseRandomClassicExecutions
global function IsClassicExecutionRandom

global function SetSyncedMeleeAlwaysKillEnabled
global function IsSyncedMeleeAlwaysKill

global function EnableFriendlyExecution

const float NO_LIMIT_EXECUTION_RANGE = 150
const float NO_LIMIT_EXECUTION_TRIGGER_TIME = 0.2
const float NO_LIMIT_EXECUTION_DURATION = 0.2 // maybe lower than trigger time?

struct
{
	bool playerDoClassicExecutions = false
	bool npcDoClassicExecutions = false

	bool randomClassicExecutions = false
	bool alwaysKillTarget = false
	bool friendlyExecution = false

	table<entity, bool> playerDebounceTable
} file

void function MeleeSyncedNoLimit_Init()
{
    RegisterSignal( "NoLimitExecutionThink" )

    AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
	AddPlayerHeldButtonEventCallback( player, IN_MELEE, CallbackFuncNolimitExecutions, NO_LIMIT_EXECUTION_TRIGGER_TIME )
	// init
	file.playerDebounceTable[ player ] <- false
}

void function CallbackFuncNolimitExecutions( entity player )
{
	if( !IsSyncedMeleeNoLimit() ) // basically check this
		return
	if( !IsAlive( player ) )
		return

	entity meleeWeapon = player.GetMeleeWeapon()
	if( IsValid( meleeWeapon ) ) // melee weapon valid, keep trying to execute friendlies
		thread TryNolimitExecutionWithMeleeWeapon( player, meleeWeapon )
	else // no melee, normally try
		thread NoLimitExecutionThink( player )
}

// this is basically designed for friendly fires
void function TryNolimitExecutionWithMeleeWeapon( entity player, entity meleeWeapon = null )
{
	if( file.playerDebounceTable[ player ] )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "NoLimitExecutionThink" )
	player.EndSignal( "NoLimitExecutionThink" )
	meleeWeapon.EndSignal( "OnDestroy" )

	file.playerDebounceTable[ player ] = true // mark as started!
	OnThreadEnd(
		function():( player )
		{
			if( IsValid( player ) )
				file.playerDebounceTable[ player ] = false // clean up
		}
	)

	while( true )
	{
		if( !player.PlayerMelee_IsAttackActive() ) // melee ends!
			return

		if( TryNolimitExecution( player ) ) // keep trying...
			return

		WaitFrame()
	}
}

void function NoLimitExecutionThink( entity player )
{
	if( file.playerDebounceTable[ player ] )
		return

	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( "NoLimitExecutionThink" )
	player.EndSignal( "NoLimitExecutionThink" )

	file.playerDebounceTable[ player ] = true // mark as started!
	OnThreadEnd(
		function():( player )
		{
			if( IsValid( player ) )
				file.playerDebounceTable[ player ] = false // clean up
		}
	)

	float startTime = Time()
	while( startTime + NO_LIMIT_EXECUTION_DURATION >= Time() )
	{
		if( TryNolimitExecution( player ) ) // keep trying...
			return

		WaitFrame()
	}
}

bool function TryNolimitExecution( entity player )
{
	if( !IsSyncedMeleeNoLimit() )
		return false
	if( player.IsTitan() )
		return false
	//if( IsValid( player.GetMeleeWeapon() ) ) // do this later to support executing friendlies
	//	return
	if( player.IsPhaseShifted() )
		return false
	// AIRBORNE EXECUTIONS CODE
	TraceResults traceResult = TraceLine( player.EyePosition(), player.EyePosition() + player.GetViewVector() * NO_LIMIT_EXECUTION_RANGE, player, (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
	if( !IsValid( traceResult.hitEnt ) )
	{
		//print( "hitEnt Invalid" )
		return false
	}
	//print( "hitEnt is " + traceResult.hitEnt.GetClassName() )
	entity target = traceResult.hitEnt
	if( !IsValid( target ) )
		return false
	if( target.IsTitan() )
		return false
	if( !target.IsPlayer() && !IsGrunt( target ) && !IsSpectre( target ) )
		return false
	if( target.GetTeam() != player.GetTeam() && IsValid( player.GetMeleeWeapon() ) ) // if player has meleeWeapon, they can target enemies normally. since friendlies pilot isn't solid for players, do this check to make nolimitExecutions targeting them
		return false
	if( target.IsPhaseShifted() )
		return false
	//if ( player.Lunge_SetTargetEntity( target, true ) )
	//{
	if( player.ContextAction_IsActive() || target.ContextAction_IsActive() ) // doing a execution?
		return false
	// ignore backstab check will allow player executing friendlies
	bool canbackstab = CodeCallback_IsValidMeleeExecutionTarget( player, target )
	if ( canbackstab || file.friendlyExecution || IsFriendlyFireOn() )
	{
		SyncedMeleeChooser ornull actions = GetSyncedMeleeChooserForPlayerVsTarget( player, target )
		if( actions == null )
			return false
		expect SyncedMeleeChooser( actions )
		SyncedMelee ornull action = FindBestSyncedMelee( player, target, actions )
		if( action == null )
			return false
		expect SyncedMelee( action )
		//player.Anim_PlayGesture( "ACT_MP_STAND_IDLE", 0.1, 0.1, 0.1 ) // temp fix, stop melee animations, which triggers when you try to execute a friendly
		player.Anim_StopGesture( 0 ) // maybe use this? to stop existing melee animations, same as AttemptHumanMeleeExecution() does
		thread MeleeThread_PilotVsEnemy( action, player, target )
		// classic executions should have no CinematicFlag, this has been done in _melee_synced_human's ForceRemoveExecutioCinematic()
		//if( !file.doClassicExecutions ) 
		//{
		thread PlayerSyncedMeleeScreenEffect( player )
		if( target.IsPlayer() )
			thread PlayerSyncedMeleeScreenEffect( target )
		return true
		//}
	}
	return false // did nothing!
	//}
}

void function PlayerSyncedMeleeScreenEffect( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
				RemoveCinematicFlag( player, CE_FLAG_EXECUTION )
                RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
			}
		}
	)

	if( player.IsTitan() )
		AddCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
    AddCinematicFlag( player, CE_FLAG_EXECUTION )
    AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )

    WaittillAnimDone( player )
}

// settings functions

// functions moved to sh_melee.gnut, for my client!
//void function SetSyncedMeleeNoLimit( bool limit )
//{
//	file.noSyncedMeleeLimit = limit
//}

//bool function IsSyncedMeleeNoLimit()
//{
//	return file.noSyncedMeleeLimit
//}

void function SetPlayerClassicExecutionsEnabled( bool should )
{
	file.playerDoClassicExecutions = should
}

bool function ShouldPlayerClassicExecution()
{
	return file.playerDoClassicExecutions
}

void function SetNPCClassicExecutionsEnabled( bool should )
{
	file.npcDoClassicExecutions = should
}

bool function ShouldNPCClassicExecution()
{
	return file.npcDoClassicExecutions
}

void function SetUseRandomClassicExecutions( bool use )
{
	file.randomClassicExecutions = use
}

bool function IsClassicExecutionRandom()
{
	return file.randomClassicExecutions
}

void function SetSyncedMeleeAlwaysKillEnabled( bool enabled )
{
	file.alwaysKillTarget = enabled
}

bool function IsSyncedMeleeAlwaysKill()
{
	return file.alwaysKillTarget
}

void function EnableFriendlyExecution( bool enabled )
{
	file.friendlyExecution = enabled
}