untyped // related with sh_melee.gnut
global function Primary_MeleeWeapon_Init

void function Primary_MeleeWeapon_Init()
{
	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnClientDisconnected( OnClientDisconnected )

	// we just need melee commands
	//AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	//AddCallback_OnPlayerGetsNewPilotLoadout( OnPlayerChangeLoadout )
}

void function OnPlayerRespawned( entity player )
{
	GivePrimaryMelee( player )
}

void function OnPlayerChangeLoadout( entity player, PilotLoadoutDef p )
{
	GivePrimaryMelee( player )
}

void function GivePrimaryMelee( entity player )
{
	foreach( entity weapon in player.GetMainWeapons() )
	{
		if( IsUselessAntiTitan( weapon ) )
		{
			player.TakeWeapon( weapon.GetWeaponClassName() )
			
		}
	}
	player.TakeOffhandWeapon( OFFHAND_MELEE )
	if( player.GetMainWeapons().len() < 3 )
	{
		player.GiveOffhandWeapon( "melee_pilot_sword", OFFHAND_MELEE, ["allow_as_primary"] )
	}
}

void function OnClientConnected( entity player )
{
	AddButtonPressedPlayerInputCallback( player, IN_MELEE, MeleeNotice )
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM, SwitchOffMelee )
	AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, SwitchOffMelee )
}

void function OnClientDisconnected( entity player )
{
}

void function MeleeNotice( entity player )
{
	if( IsAlive( player ) )
	{
		array<entity> mainWeapons = player.GetMainWeapons()
		if ( mainWeapons.len() == 0 ) // no main weapon!
			return // don't notify

		if( !IsValid( player.GetOffhandWeapon( OFFHAND_MELEE ) ) )
			return
		entity meleeWeapon = player.GetActiveWeapon()
		if( IsValid( meleeWeapon ) )
		{
			if( meleeWeapon.HasMod( "allow_as_primary" ) && !meleeWeapon.HasMod( "dash_punch" ) ) // hardcoded here!!!
			{
				SendHudMessage(player, "按瞄准键 收回近战武器",  -1, -0.4, 200, 200, 225, 255, 0.15, 3, 1)
			}
			// just want player able to switch off melee
			//else
			//	SendHudMessage(player, "近战武器不可用",  -1, -0.4, 200, 200, 225, 255, 0.15, 3, 1)
		}
	}
}

void function SwitchOffMelee( entity player )
{
	if( IsAlive( player ) )
	{
		array<entity> mainWeapons = player.GetMainWeapons()
		if ( mainWeapons.len() == 0 ) // no main weapon!
			return // don't switch
			
		if( !IsValid( player.GetOffhandWeapon( OFFHAND_MELEE ) ) )
			return
		entity meleeWeapon = player.GetActiveWeapon()
		if( !IsValid( meleeWeapon ) )
			return
		if( meleeWeapon.HasMod( "dash_punch" ) ) // why here's a hardcode?
			return
		if( meleeWeapon )
		{
			if( meleeWeapon.HasMod( "allow_as_primary" ) )
				player.SetActiveWeaponByName( mainWeapons[0].GetWeaponClassName() )
		}
	}
}

bool function IsTitanGameMode()
{
	if( Riff_TitanAvailability() == eTitanAvailability.Never )
		return false

	return true
}

bool function IsUselessAntiTitan( entity weapon )
{
	if( ["mp_weapon_rocket_launcher", "mp_weapon_mgl", "mp_weapon_arc_launcher"].contains( weapon.GetWeaponClassName() ) && Riff_TitanAvailability() == eTitanAvailability.Never )
		return true

	return false
}