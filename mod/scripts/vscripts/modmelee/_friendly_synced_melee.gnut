global function Friendly_SyncedMelee_Init

void function Friendly_SyncedMelee_Init()
{
	AddDamageFinalCallback( "player", TryExecuteFriendlyTarget )
	AddDamageFinalCallback( "npc_titan", TryExecuteFriendlyTarget )
	AddDamageFinalCallback( "npc_soldier", TryExecuteFriendlyTarget )
	AddDamageFinalCallback( "npc_spectre", TryExecuteFriendlyTarget )
}

void function TryExecuteFriendlyTarget( entity player, var damageInfo )
{
	if( !FriendlyFire_IsEnabled() )
		return

	if( !( DamageInfo_GetCustomDamageType( damageInfo ) & DF_MELEE ) ) // not a melee attack?
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( !IsValid( attacker ) )
		return
	if( !attacker.IsPlayer() )
		return
	if( attacker.GetTeam() != player.GetTeam() )
		return

	if ( attacker.IsTitan() && player.IsTitan() )
		ExecuteFriendlyTitan( attacker, player, damageInfo )
	else if ( !attacker.IsTitan() && !player.IsTitan() )
		ExecuteFriendlyHumanSized( attacker, player, damageInfo )
}

void function ExecuteFriendlyTitan( entity attacker, entity target, var damageInfo )
{
	if( DamageInfo_GetDamage( damageInfo ) >= target.GetHealth() + target.GetShieldHealth() ) // this is a kill shot
		return

	entity titanSoul = target.GetTitanSoul()
	if( !IsValid( titanSoul ) )
		return
	if( !titanSoul.IsDoomed() )
		return

	if( attacker.ContextAction_IsActive() || target.ContextAction_IsActive() ) // doing a execution?
		return
	SyncedMeleeChooser ornull actions = GetSyncedMeleeChooserForPlayerVsTarget( attacker, target )
	if( actions == null )
		return
	expect SyncedMeleeChooser( actions )
	SyncedMelee ornull action = FindBestSyncedMelee( attacker, target, actions )
	if( action == null )
		return

	// all checks passed!
	expect SyncedMelee( action )
	thread MeleeThread_TitanVsTitan( action, attacker, target )
	thread PlayerSyncedMeleeScreenEffect( attacker )
	if( target.IsPlayer() )
		thread PlayerSyncedMeleeScreenEffect( target )
}

void function ExecuteFriendlyHumanSized( entity attacker, entity target, var damageInfo )
{
	if( !attacker.IsInputCommandHeld( IN_MELEE ) )
		return
	if ( !CodeCallback_IsValidMeleeExecutionTarget( attacker, target ) )
		return

	SyncedMeleeChooser ornull actions = GetSyncedMeleeChooserForPlayerVsTarget( attacker, target )
	if( actions == null )
		return
	expect SyncedMeleeChooser( actions )
	SyncedMelee ornull action = FindBestSyncedMelee( attacker, target, actions )
	if( action == null )
		return
	
	// all checks passed!
	DamageInfo_SetDamage( damageInfo, 0 )

	expect SyncedMelee( action )
	attacker.Anim_StopGesture( 0 ) // to stop existing melee animations, same as AttemptHumanMeleeExecution() does
	thread MeleeThread_PilotVsEnemy( action, attacker, target )
	thread PlayerSyncedMeleeScreenEffect( attacker )
	if( target.IsPlayer() )
		thread PlayerSyncedMeleeScreenEffect( target )
}

void function PlayerSyncedMeleeScreenEffect( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				RemoveCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
				RemoveCinematicFlag( player, CE_FLAG_EXECUTION )
                RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )
			}
		}
	)

	if( player.IsTitan() )
		AddCinematicFlag( player, CE_FLAG_TITAN_3P_CAM )
    AddCinematicFlag( player, CE_FLAG_EXECUTION )
    AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD )

    WaittillAnimDone( player )
}